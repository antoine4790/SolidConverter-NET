<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SolidFramework</name>
    </assembly>
    <members>
        <member name="T:SolidFramework.Configuration.NativePlatform">
            <summary>
            Represents types of Native platform
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.Unknown">
            <summary>
            Native platform is unknown
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.Win32">
            <summary>
            Native platform is Win32
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.Win64">
            <summary>
            Native platform is Win64
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.Linux32">
            <summary>
            Native platform is Linux32
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.Linux64">
            <summary>
            Native platform is Linux64
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.LinuxARM">
            <summary>
            Native platform is LinuxARM
            </summary>
        </member>
        <member name="F:SolidFramework.Configuration.NativePlatform.OSX">
            <summary>
            Native platform is OSX
            </summary>
        </member>
        <member name="T:SolidFramework.Configuration.Installer">
            <summary>
            Represents installing functionality
            </summary>
        </member>
        <member name="P:SolidFramework.Configuration.Installer.NativePlatform">
            <summary>
            Gets or sets the native platform.
            </summary>
            <value>
            The native platform.
            </value>
        </member>
        <member name="P:SolidFramework.Configuration.Installer.ForceUnpack">
            <summary>
            Gets or sets a value indicating whether to force unpack.
            </summary>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.GetNativePlatform">
            <summary>
            Gets the native platform.
            </summary>
            <returns>
            The native platform.
            </returns>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.ExtractNativePlatform(System.String,SolidFramework.Configuration.NativePlatform,System.Object)">
            <summary>
            Extracts the native platform.
            </summary>
            <param name="directory">The directory.</param>
            <param name="np">The native platform.</param>
            <param name="ticker">The ticker.</param>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.GetNativePlatformFolder(SolidFramework.Configuration.NativePlatform)">
            <summary>
            Gets the native platform folder.
            </summary>
            <param name="np">Native platform</param>
            <returns>
            The native platform folder.
            </returns>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.GetNativePlatformDirectory(SolidFramework.Configuration.NativePlatform)">
            <summary>
            Gets the native platform directory.
            </summary>
            <param name="np">Native platform</param>
            <returns>
            The native platform directory.
            </returns>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.GetNativeVersionFolder">
            <summary>
            Gets the native version folder.
            </summary>
            <returns>
            The native version folder.
            </returns>
        </member>
        <member name="P:SolidFramework.Configuration.Installer.NativePlatformDirectory">
            <summary>
            Gets or sets the native platform directory.
            </summary>
            <value>
            The native platform directory.
            </value>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.GetIncludedNativePlatforms">
            <summary>
            Gets the included native platforms.
            </summary>
            <returns>
            The included native platforms.
            </returns>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.FrameworkNeedsUnpacking">
            <summary>
            Frameworks the needs unpacking.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.FrameworkNeedsUnpacking(System.String)">
            <summary>
            Frameworks the needs unpacking.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SolidFramework.Configuration.Installer.Initialized">
            <summary>
            Specifies whether SolidFramework has been initialized
            </summary>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.Initialize(SolidFramework.Plumbing.ProgressTicker)">
            <summary>
            Initializes SolidFramework
            
            This will happen automatically when you import a licenses, but it can be called manually if you need it
            to be initialized at a specific time
            
            Calling this after SolidFramework has been initialized will have no effect
            </summary>
            <param name="ticker">The ticker to monitor progress (can be null)</param>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.InitializeNativePlatform(SolidFramework.Plumbing.ProgressTicker)">
            <summary>
            Initializes the native platform.
            </summary>
            <param name="ticker">The ticker</param>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.TerminateNativePlatform">
            <summary>
            Terminates the native platform
            </summary>
        </member>
        <member name="E:SolidFramework.Configuration.Installer.Progress">
            <summary>
            A progress event that will fire while SolidFramework is installing
            </summary>
        </member>
        <member name="T:SolidFramework.Configuration.Installer.Extractor">
            <summary>
            Represent extract helper
            </summary>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.Extractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Configuration.Installer.Extractor"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.Extractor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Configuration.Installer.Extractor.ExtractPlatform(System.String,SolidFramework.Configuration.NativePlatform,SolidFramework.Plumbing.ProgressTicker)">
            <summary>
            Extracts the platform
            </summary>
            <param name="directory">The directory</param>
            <param name="np">The native platform</param>
            <param name="ticker">The ticker</param>
        </member>
        <member name="T:SolidFramework.Forms.AnalyzeResults">
            <summary>
            Analyzes Results.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.AnalyzeResults.#ctor(SolidFramework.Pdf.Reports.PdfAReport,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.AnalyzeResults" /> class.
            </summary>
            <param name="report">The report.</param>
            <param name="reportPath">The report path.</param>
        </member>
        <member name="F:SolidFramework.Forms.AnalyzeResults.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.AnalyzeResults.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.AnalyzeResults.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.Bookmarks">
            <summary>
            Represents bookmarks.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.Bookmarks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.Bookmarks" /> class.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.Bookmarks.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.Bookmarks.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.Bookmarks.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.CenterDialog">
            <summary>
            Used to center any Windows dialog. Example:
            </summary>
            <code>
             OpenFileDialog dlg = new OpenFileDialog();
             dlg.ShowDialog();
             using (new CenterDialog(this)) //where this is the owning form
             {
                dlg.ShowDialog(this);
             }
            </code>
            <code>
             using (new CenterDialog(this)) //where this is the owning form
             {
                MessageBox.Show("Centered on parent");
             }
            </code>
        </member>
        <member name="M:SolidFramework.Forms.CenterDialog.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.CenterDialog" /> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:SolidFramework.Forms.CenterDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.DocumentPropertiesTab">
            <summary>
            Represents document properties tab.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DocumentPropertiesTab.Description">
            <summary>
            Represents document properties tab is description.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DocumentPropertiesTab.Security">
            <summary>
            Represents document properties tab is security.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DocumentPropertiesTab.Fonts">
            <summary>
            Represents document properties tab is fonts.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DocumentPropertiesTab.InitialView">
            <summary>
            Represents document properties tab initial view.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.DocumentPropertiesForm">
            <summary>
            Represents document properties form.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.DocumentPropertiesForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.DocumentPropertiesForm" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.DocumentPropertiesForm.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.DocumentPropertiesForm.CurrentTab">
            <summary>
            Gets or sets the current tab.
            </summary>
            <value>
            The current tab.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Forms.DocumentPropertiesForm.BrandImage">
            <summary>
            Sets the brand image.
            </summary>
            <value>
            The brand image.
            </value>
        </member>
        <member name="F:SolidFramework.Forms.DocumentPropertiesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.DocumentPropertiesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.DocumentPropertiesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.ExplorerPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ExplorerPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.ExplorerPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.ExplorerTree.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ExplorerTree.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.ExplorerTree.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.PageRangeForm">
            <summary>
            Page range form
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.PageRangeForm.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.PageRangeForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.PageRangeForm" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.PageRangeForm.UseSelectedArea">
            <summary>
            Gets or sets a value indicating whether [use selected area].
            </summary>
            <value>
              <c>true</c> if [use selected area]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.PageRangeForm.PageRange">
            <summary>
            Gets or sets the page range.
            </summary>
            <value>
            The page range.
            </value>
        </member>
        <member name="F:SolidFramework.Forms.PageRangeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PageRangeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.PageRangeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.PageView">
            <summary>
            A Page View is a user control that when loaded with a Page Model will display the PDF document.
            Scrolling and zooming (using Ctrl plus the mouse wheel). are automatically supported.
            While it is possible to search within the open pages, this is more easily achieved using the PdfViewer control.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PageView.GetSelectedText">
            <summary>
            Gets whatever text has been selected within the PageView control. This may be located in multiple separate areas within the document.
            </summary>
            <returns>A string containing whatever text has been selected.</returns>
        </member>
        <member name="M:SolidFramework.Forms.PageView.SetCurrentFoundTextByIndexAbs(System.Int32)">
            <summary>
            This method is provides suppport for the PdfViewer class. it is not intended that it will be called from end-user code.
            </summary>
            <param name="selectedIndex">Index of the match to scroll to.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Forms.PageView.NextFoundText">
            <summary>
            Shows the next occurrence of matched text, scrolling the document so that the occurrence is visible.
            If no match is found then does nothing.
            </summary>
            <returns><c>true</c> if another match was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SolidFramework.Forms.PageView.PreviousFoundText">
            <summary>
            Shows the previous occurrence of matched text, scrolling the document so that the occurrence is visible.
            If no match is found then does nothing.
            </summary>
            <returns><c>true</c> if another match was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:SolidFramework.Forms.PageView.SearchText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the visible pages within the pages model for the specified text.
            </summary>
            <param name="str">Text to search for.</param>
            <param name="matchCase">Specifies whether matches should be case sensitive.</param>
            <param name="matchWholeWord">Specifies whether matches should require that the found words exactly match the search string.</param>
        </member>
        <member name="M:SolidFramework.Forms.PageView.StopSearch">
            <summary>
            Terminats the current search if one is in progress.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PageView.EnsureVisible(SolidFramework.Pdf.Plumbing.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Scrolling the document so that the page and rectangle are visible.
            </summary>
            <param name="pdfCurrentPage"></param>
            <param name="pdfVisibleBound"></param>
        </member>
        <member name="E:SolidFramework.Forms.PageView.MarqueeSelected">
            <summary>
            Occurs when [marquee selected].
            </summary>
        </member>
        <member name="E:SolidFramework.Forms.PageView.PagesChanged">
            <summary>
            Occurs when pages changed.
            </summary>
        </member>
        <member name="E:SolidFramework.Forms.PageView.PositionChanged">
            <summary>
            Occurs when view position changed.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PageView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.PageView" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.PageView.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.PageView.PageMagnification">
            <summary>
            Gets or sets the page magnification.
            </summary>
            <value>
            The page magnification.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.PageView.PageLayout">
            <summary>
            Gets or sets the page layout.
            </summary>
            <value>
            The page layout.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.PageView.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
            <value>
            The current page.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.PageView.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PageView.ClearSelection(System.Boolean)">
            <summary>
            Clears the selection.
            </summary>
            <param name="withEvent">if set to <c>true</c> with event.</param>
        </member>
        <member name="M:SolidFramework.Forms.PageView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            </summary>
            <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
            <returns>
            true if the character was processed by the control; otherwise, false.
            </returns>
        </member>
        <member name="P:SolidFramework.Forms.PageView.DraggerState">
            <summary>
            Gets or sets the state of the dragger.
            </summary>
            <value>
            The state of the dragger.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.PageView.DrawString(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.String,System.Drawing.Color)">
            <summary>
            Draws the string.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="emSize">Size of the em.</param>
            <param name="text">The text.</param>
            <param name="textColor">Color of the text.</param>
        </member>
        <member name="P:SolidFramework.Forms.PageView.Origin">
            <summary>
            Gets the origin.
            </summary>
            <value>
            The origin.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.PageView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:SolidFramework.Forms.PageView.DrawSelection(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the selection.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SolidFramework.Forms.PageView.GetCurrentZoom">
            <summary>
            Gets the current zoom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Forms.PageView.ZoomToMarque(System.Drawing.RectangleF)">
            <summary>
            Zooms to marque.
            </summary>
            <param name="marque">The marque.</param>
            <returns></returns>
        </member>
        <member name="F:SolidFramework.Forms.PageView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PageView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.PageView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.CachedPageImage">
            <summary>
            Cached Page Image.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.CachedPageImage.#ctor(System.Single,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.CachedPageImage" /> class.
            </summary>
            <param name="scale">The scale.</param>
            <param name="image">The image.</param>
        </member>
        <member name="M:SolidFramework.Forms.CachedPageImage.Matches(System.Single)">
            <summary>
            gets whether the scale that was specified when the <see cref="T:CachedPageImage"/> was created is the same, or very similar to, the specified scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns><c>True</c> if the scale is the same (to 5 decimal places) as that used when creating the object, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:SolidFramework.Forms.CachedPageImage.Image">
            <summary>
            Gets the image.
            </summary>
            <value>
            The image.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.CachedPageImage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.MarqueEventArgs">
            <summary>
            Represents Marque Event Args.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.MarqueEventArgs.PageSelections">
            <summary>
            Gets the page selections.
            </summary>
            <value>
            The page selections.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.MarqueEventArgs.Marque">
            <summary>
            Gets the marque.
            </summary>
            <value>
            The marque.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.MarqueEventArgs.ClearSelectedPages">
            <summary>
            Gets or sets a value indicating whether [clear selected pages].
            </summary>
            <value>
              <c>true</c> if [clear selected pages]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Forms.DraggerState">
            <summary>
            Represents types of Dragger state.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DraggerState.None">
            <summary>
            Type of Dragger state is None.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DraggerState.Select">
            <summary>
            Type of Dragger state is Select.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DraggerState.Pan">
            <summary>
            Type of Dragger state is Pan.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DraggerState.ZoomMarquee">
            <summary>
            Type of Dragger state is Zoom Marquee.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DraggerState.ZoomInPoint">
            <summary>
            Type of Dragger state is Zoom In Point.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.DraggerState.ZoomOutPoint">
            <summary>
            Type of Dragger state is Zoom Out Point.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.PasswordForm">
            <summary>
            Represents password form.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PasswordForm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.PasswordForm" /> class.
            </summary>
            <param name="fileName">The fileName.</param>
        </member>
        <member name="P:SolidFramework.Forms.PasswordForm.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.PasswordForm.Prompt">
            <summary>
            Gets or sets the prompt.
            </summary>
            <value>
            The prompt.
            </value>
        </member>
        <member name="F:SolidFramework.Forms.PasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.PasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.ProgressForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ProgressForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.ProgressForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.ScannerOptions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ScannerOptions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.ScannerOptions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.SecurityEditor">
            <summary>
            Represents Security Editor.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SecurityEditor.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.SecurityEditor.#ctor(SolidFramework.Model.Pdf.Pages.PagesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.SecurityEditor" /> class.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.SecurityEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SecurityEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.SecurityEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.SolidFolderBrowserDialog">
            <summary>
            The Solid Framework forms are designed to work with the Solid Macro Recorder, as it enables incerception from the UI.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidFolderBrowserDialog.#ctor(System.Windows.Forms.Form)">
            <summary>
            owner refers to the window to allow correct placement of the form
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidFolderBrowserDialog.ShowNewFolderButton">
             <summary>
            When ShowNewFolderButton is set to true, the New Folder button is visible, giving the user a chance to create a folder. 
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidFolderBrowserDialog.Description">
             <summary>
            The Description property can specify additional information to the user.
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidFolderBrowserDialog.SelectedPath">
            <summary>
            the selected path relates to the selected path from the SolidFolderBrowserDialog
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidFolderBrowserDialog.ShowDialog">
             <summary>
            Creates a new instance of the FolderBrowserDialog
             </summary>
        </member>
        <member name="T:SolidFramework.Forms.SolidMessageBox">
            <summary>
            The Solid Framework Message Box can be incercepted with our Macro interface and allows a check box to be added for bulk operation - do this for all.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.#ctor(System.Windows.Forms.Form)">
             <summary>
            form refers to the owner form that the message box relates to.
             </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.#ctor">
             <summary>
            Used by the IMacroEngine Interface
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidMessageBox.Content">
             <summary>
            The message string. Example "No Record Found".
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidMessageBox.Buttons">
             <summary>
            Sets the buttons to be displayed to the user for action in the Message Box.
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidMessageBox.MessageIcon">
             <summary>
            Sets a Icon that relates to the type of message in the SolidMessageBox. For example a warning icon for warning messages.
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidMessageBox.OwnerForm">
             <summary>
            Sets of Gets the owner form that the SolidMessageBox has been generated from
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidMessageBox.CheckBoxText">
             <summary>
            The text that accompanies the checkbox on the SolidMessageBox dialog.  If Null or Empty there is no checkbox
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidMessageBox.CheckBoxChecked">
             <summary>
            Allows and extra action to be taken on the SolidMessageBox dialog other than the buttons. Example: You could use the checkbox to perform a bulk action on multiple files.
             </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.Show(System.Windows.Forms.Form,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
             <summary>
            Display the SolidMessageBox with the information defined centered in the Form owner (if not a windows form window)
             </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
             <summary>
            Display the SolidMessageBox with the information defined centered in the wind
             </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.Execute">
             <summary>
            Execute is the ACTION method that works with the CREATE, SET pattern.
             </summary>
        </member>
        <member name="F:SolidFramework.Forms.SolidMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.SolidMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.SolidOpenFileDialog">
            <summary>
            The Solid Framework forms are designed to work with the Solid Macro Recorder, as it enables incerception from the UI.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidOpenFileDialog.#ctor(System.Windows.Forms.Form)">
            <summary>
            owner refers to the window to allow correct placement of the form
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidOpenFileDialog.Multiselect">
            <summary>
            set to True if the dialog box allows multiple files to be selected.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidOpenFileDialog.Filter">
            <summary>
            Sets the files visible to the user, filtered by file type. Example: Text files (*.txt)|*.txt|All files (*.*)|*.*
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidOpenFileDialog.FilterIndex">
            <summary>
            Set the FilterIndex property to set which filtering option is shown first to the user.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidOpenFileDialog.InitialDirectory">
             <summary>
            The initial file directory path displayed by the file dialog box.
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidOpenFileDialog.FileNames">
            <summary>
            Returns the selected FileNames from the SolidOpenFileDialog box.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidOpenFileDialog.FileName">
            <summary>
            Returns the the filename of a selected file from the SolidOpenFileDialog
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidOpenFileDialog.ShowDialog">
            <summary>
            Shows the form as a modal dialog box.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.SolidSaveFileDialog">
            <summary>
            The Solid Framework forms are designed to work with the Solid Macro Recorder, as it enables incerception from the UI.
            </summary> 
        </member>
        <member name="F:SolidFramework.Forms.SolidSaveFileDialog.owner">
            <summary>
            owner refers to the window to allow correct placement of the form
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidSaveFileDialog.#ctor(System.Windows.Forms.Form)">
            <summary>
            Opens a new instance of the SolidSaveFileDialog
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.OverwritePrompt">
            <summary>
            Set to overwrite a dialog result.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.AddExtension">
            <summary>
            Set to true for the dialog box to add an extension to a file name if the user omits the extension; otherwise, false
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.Filter">
            <summary>
            Sets the files visible to the user, filtered by file type. Example: Text files (*.txt)|*.txt|All files (*.*)|*.*
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.InitialDirectory">
             <summary>
            Sets the initial file directory path displayed by the file dialog box.
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.DefaultExt">
             <summary>
            Sets the The default file name extension. Example SolidSaveFileDialog.DefaultExt = "txt"; 
             </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.FilterIndex">
            <summary>
            Set the FilterIndex property to set which filtering option is shown first to the user.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.SolidSaveFileDialog.FileName">
             <summary>
            A string containing the file name selected in the SolidOpenFileDialog box.
             </summary>
        </member>
        <member name="M:SolidFramework.Forms.SolidSaveFileDialog.ShowDialog">
            <summary>
            Shows the form as a modal dialog box.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.ValidatorReport">
            <summary>
            Represents Validator Report.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ValidatorReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.ValidatorReport" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ValidatorReport.ClearAll">
            <summary>
            Clears all.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ValidatorReport.UpdateValidationReport(SolidFramework.Pdf.Reports.PdfAReport,System.Boolean)">
            <summary>
            Updates the validation report.
            </summary>
            <param name="report">The report.</param>
            <param name="isValidating">if set to <c>true</c> is validating.</param>
        </member>
        <member name="F:SolidFramework.Forms.ValidatorReport.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ValidatorReport.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.ValidatorReport.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.InsertionLocation">
            <summary>
            Represents types of Insertion Location.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.InsertionLocation.None">
            <summary>
            Type of Insertion Location is None.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.InsertionLocation.Top">
            <summary>
            Type of Insertion Location is Top.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.InsertionLocation.Bottom">
            <summary>
            Type of Insertion Location is Botton.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.InsertionLocation.Left">
            <summary>
            Type of Insertion Location is Left.
            </summary>
        </member>
        <member name="F:SolidFramework.Forms.InsertionLocation.Right">
            <summary>
            Type of Insertion Location is Right.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.ThumbnailItem">
            <summary>
            Represents thumbnail item.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ThumbnailItem.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.ThumbnailItem" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="itemIndex">The index.</param>
        </member>
        <member name="P:SolidFramework.Forms.ThumbnailItem.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            The page.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.ThumbnailItem.Highlight">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Forms.ThumbnailItem" /> is highlight.
            </summary>
            <value>
              <c>true</c> if highlight; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.ThumbnailItem.InsertionMark">
            <summary>
            Gets or sets the insertion mark.
            </summary>
            <value>
            The insertion mark.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.ThumbnailItem.Draw(System.Object,System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            Draws the specified sender.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SolidFramework.Forms.Thumbnails">
            <summary>
             Represents thumbnails.
            </summary>
        </member>
        <member name="E:SolidFramework.Forms.Thumbnails.ContextMenuOpening">
            <summary>
            Occurs when context menu opening.
            </summary>
        </member>
        <member name="E:SolidFramework.Forms.Thumbnails.ContextMenuItemClicked">
            <summary>
            Occurs when context menu item clicked.
            </summary>
        </member>
        <member name="E:SolidFramework.Forms.Thumbnails.ClipboardChanged">
            <summary>
            Occurs when clipboard changed.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.Thumbnails" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.ReadOnly">
            <summary>
            Gets or sets a value indicating whether read only.
            </summary>
            <value>
              <c>true</c> if read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.ShowItemToolTips">
            <summary>
            Gets or sets a value indicating whether thumbnail items will show tooltips.
            </summary>
            <value>
              <c>true</c> if showing tooltips; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.ClipboardItems">
            <summary>
            Gets the clipboard items.
            </summary>
            <value>
            The clipboard items.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="T:SolidFramework.Forms.Thumbnails.MethodReloadItem">
            <summary>
             Represents method reload item.
            </summary>
            <param name="pageHolder">The page holder.</param>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <value>
            The selected items.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            </summary>
            <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
            <returns>
            true if the character was processed by the control; otherwise, false.
            </returns>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.ThumbnailSize">
            <summary>
            Gets or sets the size of the thumbnail.
            </summary>
            <value>
            The size of the thumbnail.
            </value>
        </member>
        <member name="E:SolidFramework.Forms.Thumbnails.SelectedIndexChanged">
            <summary>
            Occurs when selected index changed.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.Cut">
            <summary>
            Cuts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.Copy">
            <summary>
            Copies this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.Paste">
            <summary>
            Pastes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Forms.Thumbnails.MethodReloadItems">
            <summary>
            Represents Method Reload Items.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.Thumbnails.MethodInvalidateItem">
            <summary>
            Represents Method Invalidate Item.
            </summary>
            <param name="i">The i.</param>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.OnContextMenuOpening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when context menu opening.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.ClearSelections">
            <summary>
            Clears the selections.
            </summary>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.RemoveMenuItem">
            <summary>
            Gets the remove menu item.
            </summary>
            <value>
            The remove menu item.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.SelectAllMenuItem">
            <summary>
            Gets the select all menu item.
            </summary>
            <value>
            The select all menu item.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.RotateLeftMenuItem">
            <summary>
            Gets the rotate left menu item.
            </summary>
            <value>
            The rotate left menu item.
            </value>
        </member>
        <member name="P:SolidFramework.Forms.Thumbnails.RotateRightMenuItem">
            <summary>
            Gets the rotate right menu item.
            </summary>
            <value>
            The rotate right menu item.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.OnContextMenuItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
            Called when [context menu item clicked].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.ToolStripItemClickedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:SolidFramework.Forms.Thumbnails.MethodEnsureVisible">
            <summary>
            Represents Method Ensure Visible.
            </summary>
            <param name="newPage">The new page.</param>
        </member>
        <member name="F:SolidFramework.Forms.Thumbnails.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.Thumbnails.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SolidFramework.Forms.ClipboardEventArgs">
            <summary>
            Represents clipboard event.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.ClipboardEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Forms.ClipboardEventArgs" /> class.
            </summary>
            <param name="numItems">The num items.</param>
        </member>
        <member name="P:SolidFramework.Forms.ClipboardEventArgs.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:SolidFramework.Forms.PdfViewer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            </summary>
            <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</param>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
            <returns>
            true if the character was processed by the control; otherwise, false.
            </returns>
        </member>
        <member name="F:SolidFramework.Forms.PdfViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Forms.PdfViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Forms.PdfViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:SolidFramework.BytesArray.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.BytesArray.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.BytesArray.Item(System.Int32)">
            <summary>
            Gets the byte at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The byte at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.BytesArray.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.BytesArray.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.BytesArray.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.BytesArray.CopyTo(System.Byte[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.BytesArray.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.BytesArray.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.BytesArray.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.BytesArray.BytesArrayEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.BytesArray.BytesArrayEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.BytesArray.BytesArrayEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.BytesArray.BytesArrayEnumerator.#ctor(SolidFramework.BytesArray)">
            <summary>
            Creates a new instance of the BytesArrayEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.BytesArray.BytesArrayEnumerator.Current">
            <summary>
            Gets the byte element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.BytesArray.BytesArrayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.BytesArray.BytesArrayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.BytesArray.BytesArrayEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Converters.Converter">
            <summary>
            This class is used internally by SolidFramework. It should not be used directly.
            Base class for all converters.
            </summary>
        </member>
        <member name="E:SolidFramework.Converters.Converter.Progress">
            <summary>
            Triggered when progress occurs during PDF conversion.
            </summary>
            <remarks>
            ProgressEventArgs contains the amount of progress, the maximum amount of progress, a status code, a description, plus optional custom data.
            </remarks>
        </member>
        <member name="E:SolidFramework.Converters.Converter.Warning">
            <summary>
            Triggered when a warning is raised during PDF conversion.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Converter.CustomData">
            <summary>
            Custom data to provide during Progress events
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Converter.Cancel">
            <summary>
            Cancels the conversion.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Converter.AddSourceFiles(SolidFramework.StringsArray)">
            <summary>
            Add a collection of PDF file paths to be converted to the source collection.
            </summary>
            <param name="paths"><c>ReadOnlyCollection(String)</c> collection of PDF source file paths.</param>
        </member>
        <member name="M:SolidFramework.Converters.Converter.ConvertTo(System.String)">
            <summary>
            Converts single file to specified path
            </summary>
            <param name="fullpath">The fullpath.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Converters.Converter.Results">
            <summary>
            Gets the results of conversion
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Converter.ClearSourceFiles">
            <summary>
            Clear the current source files collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Converter.SourceDirectory">
            <summary>
            Gets the source directory.
            </summary>
            <value>
            The source directory.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Converter.OutputDirectory">
            <summary>
            Gets or sets the directory where converted files will be placed when created using <c>Convert</c>.
            </summary>
            <value>
            The output directory.
            </value>
        </member>
        <member name="M:SolidFramework.Converters.Converter.Convert">
            <summary>
            Converts files
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Converter.AddSourceFile(System.String)">
            <summary>
            Add a PDF file to be converted to the source collection.
            </summary>
            <param name="fullpath">String of the full path to the PDF file.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when path is invalid.</exception>
        </member>
        <member name="M:SolidFramework.Converters.Converter.AddSourceFile(SolidFramework.Plumbing.Document)">
            <summary>
            Add a PDF file to be converted to the source collection from a loaded <c>Document</c> object.
            </summary>
            <param name="document">Document object loaded with a PDF file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>Document</c> object is null.</exception>
        </member>
        <member name="M:SolidFramework.Converters.Converter.ConvertTo(System.String,System.Boolean)">
            <summary>
            Converts single file to specified path
            </summary>
            <param name="fullpath">The fullpath.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="P:SolidFramework.Converters.Converter.OverwriteMode">
            <summary>
            Get whether to overwrite an existing output file.
            </summary>
            <remarks>
            Set the desired action when the output file already exists.
            Default is <c>FailIfExists.</c>
            </remarks>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.Converter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToPdfConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToPdfAConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.SolidConverterPdf">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToImageConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToOfficeDocumentConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToWordConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToExcelConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToTextConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToDataConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToPowerPointConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToHtmlConverter">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.ConverterType.PdfToJsonConverter">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Converters.HtmlNavigation">
            <summary>
            HTML Navigation.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.HtmlNavigation.SingleWithoutNavigation">
            <summary>navigation of HTML is absent. </summary>
        </member>
        <member name="F:SolidFramework.Converters.HtmlNavigation.SingleWithEmbeddedNavigation">
            <summary>HTML with Embedded Navigation. </summary>
        </member>
        <member name="F:SolidFramework.Converters.HtmlNavigation.SplitIntoMultipleFiles">
            <summary>HTML into multiple files. </summary>
        </member>
        <member name="T:SolidFramework.Converters.HtmlSplittingUsing">
            <summary>
            HTML with Embedded Navigation: pages, bookmarks, headings.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.HtmlSplittingUsing.Pages">
            <summary>HTML with Embedded Navigation: Pages. </summary>
        </member>
        <member name="F:SolidFramework.Converters.HtmlSplittingUsing.Bookmarks">
            <summary>HTML with Embedded Navigation: Bookmarks. </summary>
        </member>
        <member name="F:SolidFramework.Converters.HtmlSplittingUsing.Headings">
            <summary>HTML with Embedded Navigation: Headings. </summary>
        </member>
        <member name="T:SolidFramework.Converters.PdfToDataConverter">
            <summary>
            Convert PDF to CSV, SQL or unformatted Excel.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToDataConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToDataConverter class.
            </summary>
            <remarks>Defaults to <c>LineTerminator.Platform</c> and <c>Encoding = UTF-8</c>.</remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.AutoDetectSeparators">
            <summary>
            Gets or sets whether to attempt to automatically detect decimal and thousands separators, based on the content of the PDF being converted. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.DetectTiledPages">
            <summary>
            Attempt to automatically detect tables tiled across multiple pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.DecimalSeparator">
            <summary>
            Gets the decimal separator.
            </summary>
            <value>
            The decimal separator.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.ExportFormat">
            <summary>
            Gets the export format to use.
            </summary>
            <value>
            The export format.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.ThousandsSeparator">
            <summary>
            Gets the thousands separator.
            </summary>
            <value>
            The thousands separator.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.SingleTable">
            <summary>
            Get whether to join all output information into a single file.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.LineTerminator">
            <summary>
            Gets what characters terminate the line, ie Platform, Windows or Mac
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.OutputType">
            <summary>
            Gets the data document format.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToDataConverter.DelimiterOption">
            <summary>
            Gets the character that will be used to separate each field in the data file. ie. comma, tab or semicolon
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.PdfToExcelConverter">
            <summary>
            Extract tables from PDF Pages to Microsoft Excel Spreadsheet.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToExcelConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToExcelConverter class.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToExcelConverter.Convert(System.String,System.String)">
            <summary>
            Convert the specified source file into the specified Excel file.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination Excel file.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
        </member>
        <member name="M:SolidFramework.Converters.PdfToExcelConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Convert the specified source file into the specified text file.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination text file.</param>
            <param name="overwrite">If the destination files exists, overwrite it or not.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.AutoDetectSeparators">
            <summary>
            Gets or sets whether to attempt to automatically detect decimal and thousands separators, based on the content of the PDF being converted. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.DetectTiledPages">
            <summary>
            Gets or sets whether to attempt to automatically reconstruct tables that were so wide that they were tiled across multiple pages. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.OutputType">
            <summary>
            Gets the data document format.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.TablesFromContent">
            <summary>
            Deprecated alias for <c>KeepNonTableContent</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.KeepNonTableContent">
            <summary>
            Gets or sets whether to include non-table content such as images or text in the reconstructed Excel document.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.PreserveColumnsInNonTableContent">
            <summary>
            Gets or sets whether to place non-table content that is detected within columns in the PDF into separate columns in the reconstructed Excel file. 
            If true then non-table content that is detected will be placed into separate columns. If false then such content will all be placed into the first column.
            If KeepNonTableContent is false then no non-table content will be included in the reconstructed file and this option will have no meaning.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.SingleTable">
            <summary>
            Gets or sets whether to join all output information into a single sheet. Default is <c>PlaceEachTableOnOwnSheet</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.DecimalSeparator">
            <summary>
            Gets the decimal separator.
            </summary>
            <value>
            The decimal separator.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.ThousandsSeparator">
            <summary>
            Gets the thousands separator.
            </summary>
            <value>
            The thousands separator.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.HeaderAndFooterMode">
            <summary>
            Get or sets a <see cref="E:HeaderAndFooterMode" /> that specifies the header and footer mode. Default is <c>HeaderAndFooterMode.Remove</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.FootnotesMode">
            <summary>
            Get or sets a <see cref="E:FootnotesMode" /> that specifies the footnotes mode. Default is <c>FootnotesMode.Ignore</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.MarkupAnnotConversionType">
            <summary> 
            This method is deprecated. Use the property <c>TextAnnotationsAsContent</c>  instead. 
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToExcelConverter.TextAnnotationsAsContent">
            <summary>
            Gets or sets whether text annotations should be converted into content.
            This property will be ignored if KeepNonTableContent is <c>false</c>.
            </summary>  
            <remarks>
            This property replaces the deprecated <c>MarkupAnnotConversionType</c>.
            </remarks>
        </member>
        <member name="T:SolidFramework.Converters.PdfToHtmlConverter">
            <summary>
            Convert PDF to HTML document.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToHtmlConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToHtmlConverter class.
            </summary>
            <remarks>Defaults to <c>HtmlImages.Default</c>, <c>ImageDocumentType.Default</c>, <c>GraphicsAsImages = true</c> and <c>widthLimit = 0</c>.</remarks>
        </member>
        <member name="M:SolidFramework.Converters.PdfToHtmlConverter.Convert(System.String,System.String)">
            <summary>
            Convert the specified source file into the specified HTML file.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination text file.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
        </member>
        <member name="M:SolidFramework.Converters.PdfToHtmlConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Convert the specified source file into the specified HTML file.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination text file.</param>
            <param name="overwrite">If the destination files exists, overwrite it or not.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
            <seealso cref="T:SolidFramework.Converters.Plumbing.ConversionStatus"/>
        </member>
        <member name="M:SolidFramework.Converters.PdfToHtmlConverter.RebaseHtml(System.String,System.String,System.String)">
            <summary>
            Rebases the HTML.
            </summary>
            <param name="path">Path to html file</param>
            <param name="oldFolder">The old folder.</param>
            <param name="newFolder">The new folder.</param>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.WidthLimit">
            <summary>
            Get maximum width for HTML file images.
            </summary>
            <remarks>
            Default is 0, which indicates not to resize the image width.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.DetectLists">
            <summary>
            Get whether to detect lists.
            </summary>
            /// <remarks>
            DetectLists is ignored with HtmlSplitting options.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.DetectTiledPages">
            <summary>
            Attempt to automatically detect tables tiled across multiple pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.DetectLanguage">
            <summary>
            Gets or sets a value indicating whether the document language should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.HtmlNavigation">
            <summary>
            Gets the HTML navigation.
            </summary>
            <value>
            The HTML navigation.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.HtmlSplittingUsing">
            <summary>
            Gets the HTML splitting using.
            </summary>
            <value>
            The HTML splitting using.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.Images">
            <summary>
            Get or set the how images are handled during conversion.
            </summary>
            <remarks>
            The default is <c>SolidFramework.Converters.Plumbing.HtmlImages.Default</c>, which
            indicates including linked images into output HTML file.
            </remarks>
            <seealso cref="T:SolidFramework.Converters.Plumbing.HtmlImages"/>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.ImageType">
            <summary>
            Get the format of the image you are converting i.e bmp for Bitmap etc.
            </summary>
            <remarks>
            The image file type that will be used in images converted from the document.
            Default is <c>SolidFramework.Converters.Plumbing.ImageDocumentType.Default</c>, which will
            choose the most appropriate format for each image.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.KeepLineBreaks">
            <summary>
            Gets or sets whether line breaks should be preserved in the content. The default is <c>false</c>.
            </summary>  
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.ExactMode">
            <summary>
            Gets or sets a value indicating whether the reconstruction should attempt to represent the original pdf.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToHtmlConverter.HeaderAndFooterMode">
            <summary>
            Get or sets a <see cref="E:HeaderAndFooterMode" /> that specifies the header and footer mode. Default is <c>HeaderAndFooterMode.Remove</c>.
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.PdfToImageConverter">
            <summary>
            Extracts images from PDF files or renders the pages of PDFs as images.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToImageConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToImageConverter class.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToImageConverter.PageDPI">
            <summary>
            Gets the page DPI.
            </summary>
            <value>
            Specify the page DPI, 40 is about thumbnail size 300 is approximately letter size.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToImageConverter.OutputType">
            <summary>
            Gets the format of output image files.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToImageConverter.ConversionType">
            <summary>
            Gets the type of the conversion.
            </summary>
            <value>
            Bitmap = bmp etc
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToImageConverter.DrawingCore">
            <summary>
            Gets the drawing core to use when rendering PDF pages.
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.PdfToJsonConverter">
            <summary>
            Converts and reconstructs PDF files to editable Microsoft Word documents
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToJsonConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToJsonConverter class.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToJsonConverter.GetWordInstalled">
            <summary>
            Gets a value indicating whether [word installed].
            </summary>
            <value>
              <c>true</c> if [word installed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Converters.PdfToJsonConverter.Convert(System.String,System.String)">
            <summary>
            Converts the specified source file. If the destination file exists then the conversion will fail with <c>ConversionStatus.IOFileLocked</c>.
            Always check the value of the returned ConversionResult to verify that conversion was successful.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <returns>A <c>ConversionStatus</c> that indicates whether the conversion succeeded.</returns>
        </member>
        <member name="M:SolidFramework.Converters.PdfToJsonConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Converts the selected or specified source file.
            Always check the value of the returned ConversionResult to verify that conversion was successful.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="overwrite">Specifies whether or not to verwrite an existing destination file. If <c>false</c> and the destination file exists then the conversion will fail with <c>ConversionStatus.IOFileLocked</c>.</param>
            <returns>A <c>ConversionStatus</c> that indicates whether the conversion succeeded.</returns>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectToc">
            <summary>
            Gets or sets whether Table of Contents should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectLists">
            <summary>
            Gets or sets whether lists should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectTables">
            <summary>
            Gets or sets whether tables should be detected as tables, rather than being treated as plain text. The default is <c>true</c>.
            </summary>
            <remarks>
            The Table Detection option will be used as default when converting PDF files unless you specify otherwise.
            This option is only used when ReconstructionMode is Flowing or Continuous.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectTaggedTables">
             <summary>
             Gets or sets whether text that is tagged as being a table in the PDF should be always be considered to be a table, rather than being considered as a table only if it "looks" like one. 
             The default is <c>true</c>.
             </summary>
            <remarks>
             Note that the default value generally gives results that are closer to the structure of the PDF. However, when comparing two similar documents where one is tagged 
             and one is not, the results can be quite different. In that case it may be useful to set this value to <c>false</c>.
             If the PDF is not tagged then this value has no effect.
             See also <c>RemoveStructTreeRoot</c> which can be used to remove tagging from the PDF.
             </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectTiledPages">
            <summary>
            Attempt to automatically detect tables tiled across multiple pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectStyles">
            <summary>
            Gets or sets whether styles should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.DetectLanguage">
            <summary>
            Gets or sets whether the document language should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.KeepCharacterSpacing">
            <summary>
            Get or sets whether to keep character spacing. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.AverageCharacterScaling">
            <summary>
            Get or sets whether the spacing between characters should be set as to their average size. 
            This is required because fonts in PDF and docx are different and therefore the same Unicode characters 
            have different character widths in PDF and docx. This value must be set to true if the generated docx file 
            is to look the same as the PDF file. Setting the value to true will also result in the creation of fewer, but 
            larger "Run" objects.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.SupportRightToLeftWritingDirection">
            <summary>
            Get whether to support right-to-left writing direction. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.ImageAnchoringMode">
            <summary>
            Get or sets a <see cref="E:ImageAnchoringMode" /> that specifies the header and footer mode. Default is <c>ImageAnchoringMode.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.ReconstructionMode">
            <summary>
            Gets or sets the <see cref="E:ReconstructionMode" /> reconstruction mode. Default is <c>ReconstructionMode.Flowing</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.HeaderAndFooterMode">
            <summary>
            Get or sets a <see cref="E:HeaderAndFooterMode" /> that specifies the header and footer mode. Default is <c>HeaderAndFooterMode.Detect</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.FootnotesMode">
            <summary>
            Get or sets a <see cref="E:FootnotesMode" /> that specifies the header and footer mode. Default is <c>FootnotesMode.Ignore</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToJsonConverter.MarkupAnnotConversionType">
            <summary>
            Get or sets a <see cref="E:MarkupAnnotConversionType" /> that specifies how Markup Annotations should be converted. Default is <c>MarkupAnnotConversionType.TextBox</c>.
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.PdfToOfficeDocumentConverter">
            <summary>
            This class is used internally by SolidFramework. It should not be used directly.
            Abstract class for converting PDF to MS Office application files.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToOfficeDocumentConverter.GetResultAsStream">
            <summary>
            Gets the result as stream.
            </summary>
            <returns>
            The result as stream.
            </returns>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.SelectedAreas">
            <summary>
            Gets or sets the selected areas. The default is <c>null</c>.
            </summary>
            <value>
            The selected areas.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.UserProperties">
            <summary>
            Gets or sets the user properties. The default is an empty string.
            </summary>
            <value>
            The user properties.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoveryLanguage">
            <summary>
            Gets or sets the text recovery language. Default is an empty string.
            </summary>
            <value>
            The text recovery language.
            </value>
            <remarks> Format for each language is as follows:
            "es" for Spanish 
            "de" for German
            "it" for Italian
            "pl" for Polish
            "pt" for Portugeuse
            "ru" for Russian
            "fr" for French
            "nl" for Dutch
            "en" for English           
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.AutoRotate">
            <summary>
            Gets or sets whether to automatically rotate pages based on the orientation of the text on the pages. Default is <c>true</c>.
            </summary>
            <remarks>If a page in the PDF file is set to landscape, and all text is flowing up and down, automatically rotate the page to portrait.</remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoverySuspects">
            <summary>
            Gets or sets a value indicating whether to highlight low confidence words (any word with <see cref="P:SolidFramework.Imaging.OcrWord.Confidence"/> less than 100) in the OCR output in yellow.
            This property has no effect if OCR has not occurred. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoveryType">
            <summary>
            Gets or sets the text recovery type. The default value is <c>automatic</c>.
            </summary>
            <value>
            The type of the text recovery.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoveryNseType">
            <summary>
            Gets os sets the text recovery NSE type.  The default value is <c>automatic</c>.
            </summary>
            <value>
            The type of the text recovering NSE.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoveryEngine">
            <summary>
            Gets or sets  the text recovery engine.  The default value is <c>automatic</c>.
            </summary>
            <value>
            The text recovery engine.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoveryEngineNse">
            <summary>
            Gets or sets the non-standard encoding recovery engine.  The default value is <c>automatic</c>.
            </summary>
            <value>
            The NSE recovery engine.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToOfficeDocumentConverter.TextRecoveryAutomaticGNse">
            <summary>
            Gets the automatic GNSE options.
            </summary>
            <value>
            The automatic GNSE options.
            </value>
        </member>
        <member name="T:SolidFramework.Converters.PdfToPdfAConverter">
            <summary>
            Converts PDF to PDF/A 1b or 2b compliant document.  
            This class is used to convert from PDF to PDF/A. If you wish to convert to a PDF that is non-PDF/A then use the PdfToPdfConverter instead.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPdfAConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Converters.PdfToPdfAConverter"/> class. This class is used to convert from PDF to PDF/A. If you wish to convert to a PDF that is non-PDF/A then use the PdfToPdfConverter instead.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.OcrLanguage">
            <summary>
            Gets or sets the OCR language to to be used.       
            </summary>
            <remarks>
            The format used is typically the first two letters of the language as spelt in that language.  "en" for English, "es" for Spanish, "de" for German etc.
            If Chinese, Korean, Japanese or Greek is selected then the tesseract "traineddata" files will also be required. Please see documentation for details.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.ExportLogPath">
            <summary>
            Gets or sets the directory path to validation log.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.ReportLanguage">
            <summary>
            Gets or sets the language for validation log.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.Report">
            <summary>
            Gets the Report that shows the validation steps, errors, passes etc. of the conversion.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.TextWatermark">
             <summary>
             Gets or sets the Text Watermark to be used in the converted file.
            </summary>
            <remarks>
            A watermark is an impression that displays on top of or below the content of a PDF page. 
            Watermarks can be useful for identifying drafts and confidential documents or placing a logo on each page.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.LogPath">
            <summary>
            Gets or sets the path where the error log is located.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPdfAConverter.Validate">
            <summary>
            Check whether the PDF file passes PDF/A validation for the current validation mode.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPdfAConverter.Validate(SolidFramework.Plumbing.ValidationMode)">
            <summary>
            Check whether the PDF file passes PDF/A validation for the specified mode.
            </summary>
            <param name="mode">The PDF/A mode to validate as.</param>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPdfAConverter.Verify">
            <summary>
            Verify that the PDF file passes PDF/A validation with the ValidationMode that it claims to be.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.OcrAlways">
            <summary>
            Gets or sets whether OCR should be performed on every single character. Setting this to true can result in slow conversions.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.ShowWarnings">
            <summary>
            Gets or sets whether warnings should be shown.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.OcrAutoRotate">
            <summary>
            Gets or sets whether to automatically detect and rotate pages that require rotatation on conversion.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.OcrType">
            <summary>
            Gets or sets the type of OCR to be performed.
            </summary>
            <remarks>
            None - No OCR, Full - OCR everything - CreateSearchableTextLayer - Enable the converted file to be searchable.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.OcrEngine">
            <summary>
            Gets or sets the TextRecoveryEngine that should be used for OCR.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.ValidationMode">
            <summary>
            Sets the PDF/A Validation Mode. Setting this to PDF will cause an exception to be thrown if an attempt is made to convert the file.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfAConverter.OcrImageCompression">
            <summary>
            Gets or sets the compression method to be used for images. This will affect file size and image quality.
            </summary>
            <remarks>
            Choose from ColourOrBetter, FakeMono, GrayOrBetter, Mono, FakeMone, RealGrayOrBetter, Lossless, PreserveOriginal or Unknown.
            <c>SolidFramework.Imaging.Plumbing.ImageCompression.ColorOrBetter;</c>
            </remarks>
        </member>
        <member name="T:SolidFramework.Converters.PdfToPdfConverter">
            <summary>
            Converts a PDF file into another PDF file 
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.OcrLanguage">
            <summary>
            Set the OCR language to that of the original document.       
            </summary>
            <value>
            Format used is the first two letters of the language as spelt in that language.  "en" for English, "es" for Spanish, "de" for German etc.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.OcrAlways">
            <summary>
            Gets an OCR flag
            </summary>
            <value>
              <c>true</c> if [OCR always]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.OcrAutoRotate">
            <summary>
            Set to true of false to automatically detect if pages require rotatation on conversion.
            </summary>
            <value>
              <c>true</c> if [ocr auto rotate]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.CreateTags">
            <summary>
            Gets a Create Tags flag
            </summary>
            <value>
              <c>true</c> if [Tags create]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.OcrType">
            <summary>
            Choose the type of OCR you want to apply
            </summary>
            <value>
            None - No OCR, Full - OCR everything - CreateSearchableTextLayer - Enable the converted file to be searchable
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.OcrEngine">
            <summary>
            Gets a value indicating whether [OCR always].
            </summary>
            <value>
              <c>true</c> if [OCR always]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPdfConverter.OcrImageCompression">
            <summary>
            Set this to compress or change image properties to manage the size of the converted file.
            </summary>
            <value>
            Choose from ColourOrBetter, FakeMono, GrayOrBetter, Mono, RealGrayOrBetter or Unknown
            <c>SolidFramework.Imaging.Plumbing.ImageCompression.ColorOrBetter;</c>
            </value>
        </member>
        <member name="T:SolidFramework.Converters.PdfToPowerPointConverter">
            <summary>
            Converts a PDF file to a PowerPoint Presentation.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPowerPointConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToPowerPointConverter class.
            </summary>
            <remarks>Defaults to <c>LineTerminator.Platform</c> and <c>Encoding = UTF-8</c>.</remarks>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPowerPointConverter.Convert(System.String,System.String)">
            <summary>
            Convert the specified source file into the specified PowerPoint document.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination PowerPoint document.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
        </member>
        <member name="M:SolidFramework.Converters.PdfToPowerPointConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Convert the specified source file into the specified PowerPoint document.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination PowerPoint document.</param>
            <param name="overwrite">If true, then overwrite the destination file if it exists; otherwise do not.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPowerPointConverter.DetectLists">
            <summary>
            Get or sets whether lists within the PDF file should be reconstructed as lists within the PowerPoint Document.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPowerPointConverter.TextAnnotationsAsSpeakerNotes">
            <summary>
            Gets or sets whether text annotations should be converted into speaker notes.
            </summary>  
            <remarks>
            This property replaces the deprecated <c>MarkupAnnotConversionType</c>.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPowerPointConverter.EmbedFontsMode">
            <summary>
            Gets a <see cref="E:EmbedFontsMode" /> that specifies embed ot not font programs to output document. Default is <c>EmbedFontsMode.NoFontEmbedding</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToPowerPointConverter.MarkupAnnotConversionType">
            <summary>
            This method is deprecated. Use the property <c>TextAnnotationsAsSpeakerNotes</c> instead.
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.PdfToTextConverter">
            <summary>
             Convert a PDF file into plain text document. 
            </summary>
            <remarks>
            This will not recover formatting (characters or paragraphs) or graphics but it will recover text flow using column and page layout analysis
            </remarks>
        </member>
        <member name="M:SolidFramework.Converters.PdfToTextConverter.#ctor">
            <summary>
            Static method that converts the specified source file into the specified text file using default settings.
            </summary>
            <remarks>Defaults to <c>LineTerminator.Platform</c> and <c>Encoding = UTF-8</c>.</remarks>
        </member>
        <member name="M:SolidFramework.Converters.PdfToTextConverter.Convert(System.String,System.String)">
            <summary>
            Convert the specified source file into the specified text file.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination text file.</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
            <remarks>If the file already exists, the <c>ConversionStatus</c> will return FileAlreadyExists and fail.</remarks>
        </member>
        <member name="M:SolidFramework.Converters.PdfToTextConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Convert the specified source file into the specified text file.
            </summary>
            <param name="sourceFileName">String of the full path to the PDF file.</param>
            <param name="destinationFileName">String of the full path to the destination text file.</param>
            <param name="overwrite">If the destination file(s) exist, specify whether or not to overwrite the file(s).</param>
            <returns><c>ConversionStatus</c> of the resulting conversion.</returns>
        </member>
        <member name="P:SolidFramework.Converters.PdfToTextConverter.LineLength">
            <summary>
             Get the maximum number of characters to display in each line of your text document.  Example:  <c>textConverter.LineLength = 80;</c>.
            </summary>
            <remarks>
            Specify the maximum number of characters to display in each line of your text output document.
            Default value is 100 if not specified.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToTextConverter.DetectAndRemoveHeadersAndFooters">
            <summary>
            Gets or sets whether headers and footers should be removed if detected.
            If <c>true</c> then headers and footers will be removed.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToTextConverter.DetectAndRemoveFootnotes">
            <summary>
            Gets or sets whether footnotes should be removed if detected.
            If <c>true</c> then footnotes will be removed.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToTextConverter.LineTerminator">
            <summary>
            Get the line terminator.
            </summary>
            <remarks>
            Default setting is <c>SolidFramework.Converters.Plumbing.LineTerminator.Platform</c>.
            Change if you want to use a different line terminator in the output text file.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToTextConverter.TextAnnotationsAsContent">
            <summary>
            Gets or sets whether text annotations should be converted into content.
            </summary>  
        </member>
        <member name="P:SolidFramework.Converters.PdfToTextConverter.KeepLineBreaks">
            <summary>
            Gets or sets whether line breaks should be preserved in the content. The default is <c>false</c>.
            </summary>  
        </member>
        <member name="T:SolidFramework.Converters.PdfToWordConverter">
            <summary>
            Converts and reconstructs PDF files to editable Microsoft Word documents
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToWordConverter.#ctor">
            <summary>
            Initializes a new instance of the PdfToWordConverter class.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.PdfToWordConverter.Convert(System.String,System.String)">
            <summary>
            Converts the specified source file. If the destination file exists then the conversion will fail with <c>ConversionStatus.IOFileLocked</c>.
            Always check the value of the returned ConversionResult to verify that conversion was successful.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <returns>A <c>ConversionStatus</c> that indicates whether the conversion succeeded.</returns>
        </member>
        <member name="M:SolidFramework.Converters.PdfToWordConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Converts the selected or specified source file.
            Always check the value of the returned ConversionResult to verify that conversion was successful.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="overwrite">Specifies whether or not to verwrite an existing destination file. If <c>false</c> and the destination file exists then the conversion will fail with <c>ConversionStatus.IOFileLocked</c>.</param>
            <returns>A <c>ConversionStatus</c> that indicates whether the conversion succeeded.</returns>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.WordInstalled">
            <summary>
            Gets a value indicating whether [word installed].
            </summary>
            <value>
              <c>true</c> if [word installed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectToc">
            <summary>
            Gets or sets whether Table of Contents should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectLists">
            <summary>
            Gets or sets whether lists should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectTables">
            <summary>
            Gets or sets whether tables should be detected as tables, rather than being treated as plain text. The default is <c>true</c>.
            </summary>
            <remarks>
            The Table Detection option will be used as default when converting PDF files unless you specify otherwise.
            This option is only used when ReconstructionMode is Flowing or Continuous.
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectTaggedTables">
             <summary>
             Gets or sets whether text that is tagged as being a table in the PDF should be always be considered to be a table, rather than being considered as a table only if it "looks" like one. 
             The default is <c>true</c>.
             </summary>
            <remarks>
             Note that the default value generally gives results that are closer to the structure of the PDF. However, when comparing two similar documents where one is tagged 
             and one is not, the results can be quite different. In that case it may be useful to set this value to <c>false</c>.
             If the PDF is not tagged then this value has no effect.
             See also <c>RemoveStructTreeRoot</c> which can be used to remove tagging from the PDF.
             </remarks>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectTiledPages">
            <summary>
            Attempt to automatically detect tables tiled across multiple pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectStyles">
            <summary>
            Gets or sets whether styles should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.DetectLanguage">
            <summary>
            Gets or sets whether the document language should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.KeepCharacterSpacing">
            <summary>
            Get or sets whether to keep character spacing. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.AverageCharacterScaling">
            <summary>
            Get or sets whether the spacing between characters should be set as to their average size. 
            This is required because fonts in PDF and docx are different and therefore the same Unicode characters 
            have different character widths in PDF and docx. This value must be set to true if the generated docx file 
            is to look the same as the PDF file. Setting the value to true will also result in the creation of fewer, but 
            larger "Run" objects.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.SupportRightToLeftWritingDirection">
            <summary>
            Get whether to support right-to-left writing direction. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.OutputType">
            <summary>
            Gets or sets the type of the output to be created by the converter.  Default is <c>WordDocumentType.DocX</c>
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.ImageAnchoringMode">
            <summary>
            Get or sets a <see cref="E:ImageAnchoringMode" /> that specifies the header and footer mode. Default is <c>ImageAnchoringMode.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.ReconstructionMode">
            <summary>
            Gets or sets the <see cref="E:ReconstructionMode" /> reconstruction mode. Default is <c>ReconstructionMode.Flowing</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.HeaderAndFooterMode">
            <summary>
            Get or sets a <see cref="E:HeaderAndFooterMode" /> that specifies the header and footer mode. Default is <c>HeaderAndFooterMode.Detect</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.FootnotesMode">
            <summary>
            Get or sets a <see cref="E:FootnotesMode" /> that specifies the header and footer mode. Default is <c>FootnotesMode.Ignore</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.MarkupAnnotConversionType">
            <summary>
            Get or sets a <see cref="E:MarkupAnnotConversionType" /> that specifies how Markup Annotations should be converted. Default is <c>MarkupAnnotConversionType.TextBox</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.PdfToWordConverter.TargetWordFormat">
            <summary>
            Get a <see cref="E:TargetWordFormat" /> that specifies Target MS Word File Format Version. Default is <c>TargetWordFormat.Automatic</c>.
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ConversionProgressState">
            <summary>
            Represents types of Conversion progress state
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionProgressState.None">
            <summary>Conversion progress state is None </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionProgressState.EndFileProcessing">
            <summary>Conversion progress state is End File Processing </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ConversionResult">
            <summary>
            Implementation of the <c>IConversionResult</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.ConversionResult.#ctor(System.String,SolidFramework.Converters.Plumbing.ConversionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Converters.Plumbing.ConversionResult"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.ConversionResult.AddTemporaryFolder(System.String)">
            <summary>
            Adds the temporary folder
            </summary>
            <param name="path">The path</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.ConversionResult.AddTemporaryFile(System.String)">
            <summary>
            Adds the temporary file
            </summary>
            <param name="path">The path</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.ConversionResult.RemoveTemporary(System.String)">
            <summary>
            Removes the temporary.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.ConversionResult.AddResult(System.String,System.Boolean)">
            <summary>
            Adds the result
            </summary>
            <param name="path">The path</param>
            <param name="temporary">If set to <c>true</c> [temporary].</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.ConversionResult.AddResultFolder(System.String,System.Boolean)">
            <summary>
            Adds the result
            </summary>
            <param name="path">The path</param>
            <param name="temporary">If set to <c>true</c> [temporary].</param>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.ConversionResult.Source">
            <summary>
            Gets the source file
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.ConversionResult.Status">
            <summary>
            Gets the conversion status
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionResultType.IConversionResult">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionResultType.ConversionResult">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionResultType.PdfAConversionResult">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ConversionStatus">
            <summary>
            Enum that describes the result of an attempt to convert PDF files to Data, Excel, HTML, Images, PDFA, PowerPoint, Text and Word in a single line of code.
            </summary>
            <remarks>Example of use is <c>aConversionStatus Wordconverter = PdfToWordConverter.Convert(pdfPath, WordFile, true);</c>.  
            Where pdfPath and Word file are defined before ConversionStatus is called, for example if using an OpenFileDialog to caputure the files 
            <c> string pdfPath = OpFile.FileName</c>
            <c>string wordFile = Path.ChangeExtension(pdfPath, ".docx");</c></remarks>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.Success">
            <summary>Successful conversion. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.Canceled">
            <summary>Conversion was canceled. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.InternalError">
            <summary>An Internal Error occurred. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.Unknown">
            <summary>Unknown conversion status (not set yet). </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.Fail">
            <summary>Conversion failed. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.BadData">
            <summary>Bad input data. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.IOError">
            <summary>I/O Error </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.IOFileLocked">
            <summary>Output file exists and is locked or readonly. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NotEnoughMemory">
            <summary>Not enough RAM to perform the task. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.FileHasCopyProtection">
            <summary>PDF file is password protected. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.InvalidPagesRange">
            <summary>Invalid page range was specified. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.UnsupportedEncryptionHandler">
            <summary>Unsupported encryption handler. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.MissingCertificate">
            <summary>Missing security certificate. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.OCRCanceled">
            <summary>Conversion was canceled. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NoTablesToExtract">
            <summary>No tables were found to extract. This will occur when converting to Excel while ignoring non-table content, if only non-table content exists. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NoImagesToExtract">
            <summary>No images were found to extract. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NoBppConversion">
            <summary>No Bpp Conversion. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NoGrayscale">
            <summary>No Gray Scale. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.PSDUnsupportedMode">
            <summary>Unsupported mode. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.PdfAError">
            <summary>The source document has PDFA Errors, but it was posible to correct these in the reconstructed file. For further details look at the PdfAConversionStatus. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.PdfAFatalError">
            <summary>The source document has fatal PDFA Errors. This prevented conversion from occurring. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.CanceledExists">
            <summary>Conversion was canceled because the output file already exists. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.WrongPassword">
            <summary>Wrong security password specified. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NoUserNoOwner">
            <summary>Conversion status is No User No Owner. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.NoUserOwner">
            <summary>Conversion status is No User Owner. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.UserNoOwner">
            <summary>Conversion status is User No Owner. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.UserOwner">
            <summary>Conversion status is User Owner. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.InvalidLicense">
            <summary>Invalid <see cref = "T:SolidFramework.License"/>  used. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.AlreadyLoaded">
            <summary>Document already loaded. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.UnavailableAction">
            <summary>Unavailable action. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.InvalidArgument">
            <summary>Invalid argument </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.LicenseError">
            <summary><see cref = "T:SolidFramework.License"/>  error </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.OptionError">
            <summary>Option error (argument valid, setting as an option failed) </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConversionStatus.ConversionFailure">
            <summary>Conversion failure (an exception that was not caught by SolidFramework) </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConvertMode.Document">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConvertMode.Images">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConvertMode.Tables">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ConvertMode.Presentation">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.DataDocumentType">
            <summary>
            Data output document types.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DataDocumentType.Csv">
            <summary>CSV </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.DataExportFormat">
            <summary>
            The data format to export to.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DataExportFormat.Text">
            <summary>Export to csv or delimited text file </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DataExportFormat.Excel">
            <summary>Export to xlsx (without styles) </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DataExportFormat.MySQL">
            <summary>Export to MySQL compatible SQL statements </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DataExportFormat.MSSQL">
            <summary>Export to MS SQL Server compatible SQL statements </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.DecimalSeparator">
            <summary>
            The decimal separator used in numeric reconstruction for Excel files.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DecimalSeparator.Period">
            <summary>Sets decimal separator to period </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DecimalSeparator.Comma">
            <summary>Sets decimal separator to comma </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.DelimiterOptions">
            <summary>
            The delimiter used in data files.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DelimiterOptions.Comma">
            <summary>Sets delimiter to comma </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DelimiterOptions.Semicolon">
            <summary>Sets delimiter to semicolon </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.DelimiterOptions.Tab">
            <summary>Sets delimiter to tab </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.EmbedFontsMode.NoFontEmbedding">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.EmbedFontsMode.EmbedEditableFonts">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ExcelDocumentType">
            <summary>
            Excel output document types.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ExcelDocumentType.Xls">
            <summary>Sets format to Xls. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ExcelDocumentType.XlsX">
            <summary>Sets format to XlsX. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ExcelTablesOnSheet.PlaceEachTableOnOwnSheet">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ExcelTablesOnSheet.PlaceAllTablesOnSingleSheet">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ExcelTablesOnSheet.PlaceTablesForEachPageOnSingleSheet">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.FootnotesMode">
            <summary>
            Sets footnotes handling mode when converting PDFs
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.FootnotesMode.Detect">
            <summary>Recover footnotes in the output document </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.FootnotesMode.Ignore">
            <summary>Recognize footnotes but place them in the body of the output document </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.FootnotesMode.Remove">
            <summary>Remove footnotes from the output document </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.HeaderAndFooterMode">
            <summary>
            Sets Headers and Footers handling mode when converting PDFs
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HeaderAndFooterMode.Detect">
            <summary>Recover Headers and Footers in the output document </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HeaderAndFooterMode.Ignore">
            <summary>Recognize Headers and Footers but place them in the body of the output document </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HeaderAndFooterMode.Remove">
            <summary>Remove Headers and Footers from the output document </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.HtmlImages">
            <summary>
            Sets images handling mode when converting to HTML format
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlImages.Default">
            <summary>Default value </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlImages.Link">
            <summary>Include linked images into output HTML file </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlImages.Ignore">
            <summary>Do not include images into output HTML file </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlImages.Embed">
            <summary>Embed images into output HTML file </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.HtmlNavigationType">
            <summary>
            Html navigation types.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationNoNavigation">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationPages">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationHeadings">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationBookmarks">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationPagesHeadings">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationPagesBookmarks">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationHeadingsBookmark">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationPagesHeadingsBookmarks">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationSplitFileByPages">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationSplitFileByHeadings">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.HtmlNavigationType.HtmlNavigationSplitFileByBookmarks">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.IConversionResult">
            <summary>
            Interface for conversion results
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResult.AddTemporaryFolder(System.String)">
            <summary>
            Adds the temporary folder
            </summary>
            <param name="path">The path</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResult.AddTemporaryFile(System.String)">
            <summary>
            Adds the temporary file
            </summary>
            <param name="path">The path</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResult.RemoveTemporary(System.String)">
            <summary>
            Removes the temporary.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResult.AddResult(System.String,System.Boolean)">
            <summary>
            Adds the result
            </summary>
            <param name="path">The path</param>
            <param name="temporary">If set to <c>true</c> [temporary].</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResult.AddResultFolder(System.String,System.Boolean)">
            <summary>
            Adds the result
            </summary>
            <param name="path">The path</param>
            <param name="temporary">If set to <c>true</c> [temporary].</param>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResult.Source">
            <summary>
            Gets the source file
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResult.Status">
            <summary>
            Gets the conversion status
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Converters.Plumbing.IConversionResult at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Converters.Plumbing.IConversionResult at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.CopyTo(SolidFramework.Converters.Plumbing.IConversionResult[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.CopyTo(SolidFramework.Converters.Plumbing.IConversionResult[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.CopyTo(System.Int32,SolidFramework.Converters.Plumbing.IConversionResult[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator.#ctor(SolidFramework.Converters.Plumbing.IConversionResultsCollection)">
            <summary>
            Creates a new instance of the IConversionResultsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Converters.Plumbing.IConversionResult element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.IConversionResultsCollection.IConversionResultsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ImageAnchoringMode">
            <summary>
            Sets images anchoring mode in the output Word file
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageAnchoringMode.Automatic">
            <summary>Use automatic anchoring </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageAnchoringMode.Paragraph">
            <summary>Anchor images to paragraph </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageAnchoringMode.Page">
            <summary>Anchor images to page </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageAnchoringMode.RemoveImages">
            <summary>Remove images from the output file </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ImageConversionType">
            <summary>
            Represents types of Image conversion type
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageConversionType.ExtractImages">
            <summary>Extract all images from pdf file </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageConversionType.ExtractPages">
            <summary>Create image pages from pdf pages </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ImageDocumentType">
            <summary>
            Sets converted images format
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageDocumentType.Default">
            <summary>Use optimal - the most appropriate format for each image </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageDocumentType.Bmp">
            <summary>BMP images </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageDocumentType.Jpeg">
            <summary>Jpeg images </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageDocumentType.Png">
            <summary>Png images </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageDocumentType.Tiff">
            <summary>Tiff images </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ImageDocumentType.Gif">
            <summary>Gif images </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ImageWatermark">
            <summary>
            Represents Image watermark
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.ImageWatermark.Path">
            <summary>
            Gets or sets the path to image
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.LineTerminator">
            <summary>
            The line terminator used in text based files.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.LineTerminator.Platform">
            <summary>Set the terminator based on current platform. Allows .Net to determine and set the terminator based on the platform detected. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.LineTerminator.Windows">
            <summary>Set the terminator to 0x0D 0x0A (Windows default). </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.LineTerminator.OSX">
            <summary>Set the terminator to 0x0A (OSX default). </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.MarkupAnnotConversionType">
            <summary>
            Sets annotations recovering mode when converting to Word format.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.MarkupAnnotConversionType.Never">
            <summary>Do not recover annotations </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.MarkupAnnotConversionType.Textbox">
            <summary>Recover annotations to textboxes </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.MarkupAnnotConversionType.Comment">
            <summary>Recover annotations to Word comments </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.OcrType">
            <summary>
            Represents OCR type for the converted document, i.e. Creating a Searchable Text Layer.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.OcrType.FullOcr">
            <summary>Full OCR </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.OcrType.CreateSearchableTextLayer">
            <summary>Create Searchable Text Layer </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.OcrType.None">
            <summary>None </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.PdfAConversionResult">
            <summary>
            Represents PDF/A conversion result
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.PdfAConversionResult.PdfType">
            <summary>
            Gets the type of the validation mode to PDF file.
            </summary>
            <value>
            The type of the PDF.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.PdfAConversionResult.PdfAStatus">
            <summary>
            Gets the PDF/A status.
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.PdfAConversionStatus">
            <summary>
            Represents types of PDFA conversion status
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.PdfAConversionStatus.Compliant">
            <summary>Document is PDFA compliant </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.PdfAConversionStatus.Failure">
            <summary>Fail conversion </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.PdfAConversionStatus.ErrorsFixed">
            <summary>All errors could be fixed </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.PdfAConversionStatus.ErrorsNotFixed">
            <summary>Not all errors could be fixed </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.PdfAConversionStatus.ErrorsFatal">
            <summary>Document has fatal PDFA errors </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ReconstructionMode">
            <summary>
            Reconstruction mode when converting to Word format
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ReconstructionMode.Flowing">
            <summary>Use Flowing mode </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ReconstructionMode.Exact">
            <summary>Use Exact mode </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ReconstructionMode.Continuous">
            <summary>Use Continuous mode </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ReconstructionMode.PlainText">
            <summary>Use Plain text </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ReconstructionMode.NoColumns">
            <summary>No columns legacy mode </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.SelectedArea">
            <summary>
            Represents Selected area
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedArea.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Converters.Plumbing.SelectedArea"/> class.
            </summary>
            <param name="page">The page number.</param>
            <param name="x">The X.</param>
            <param name="y">The Y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedArea.#ctor(System.Int32,System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Converters.Plumbing.SelectedArea"/> class.
            </summary>
            <param name="page">The page number.</param>
            <param name="location">The location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedArea.#ctor(System.Int32,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Converters.Plumbing.SelectedArea"/> class.
            </summary>
            <param name="page">The page number.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedArea.Area">
            <summary>
            Gets the area.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedArea.SetArea(System.Drawing.Rectangle)">
            <summary>
            Sets the area.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedArea.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedArea.Parse(System.String)">
            <summary>
            Parses the specified content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedArea.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedArea.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedArea.Page">
            <summary>
            Gets the page number
            </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.SelectedAreas">
            <summary>
            Represents Selected area
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreas.Parse(System.String)">
            <summary>
            Parses the specified content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Converters.Plumbing.SelectedArea at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Converters.Plumbing.SelectedArea at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.CopyTo(SolidFramework.Converters.Plumbing.SelectedArea[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.CopyTo(SolidFramework.Converters.Plumbing.SelectedArea[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.CopyTo(System.Int32,SolidFramework.Converters.Plumbing.SelectedArea[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator.#ctor(SolidFramework.Converters.Plumbing.SelectedAreasCollection)">
            <summary>
            Creates a new instance of the SelectedAreasCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Converters.Plumbing.SelectedArea element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.SelectedAreasCollection.SelectedAreasCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TargetWordFormat">
            <summary>
            Target MS Word Compatibility Version (OOXML file format)
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TargetWordFormat.Automatic">
            <summary>Not set </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TargetWordFormat.Word2007">
            <summary>MS Word 2007 </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TargetWordFormat.Word2010">
            <summary>MS Word 2010 </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TargetWordFormat.Word2013">
            <summary>MS Word 2013, MS Word 2016, MS Word 2019, MS Word 365, MS Word Online </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TextRecovery">
            <summary>
            Represents types of Text recovering
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecovery.Automatic">
            <summary>Scanned page only </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecovery.Always">
            <summary>Use always </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecovery.Never">
            <summary>Never use </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecovery.Default">
            <summary>Default value is Never </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse">
            <summary>
            Configure Automatic GNSE features
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.None">
            <summary>No automatic GNSE features </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.Logos">
            <summary>Logo glyphs as vector graphics </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.Styles">
            <summary>Use GNSE to correct font styles </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.Icons">
            <summary>Icon font glyphs as vector graphics </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.Symbols">
            <summary>Fully automatic correction of common symbolic fonts </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.Barcodes">
            <summary>Barcode fonts as vector graphics </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.Ligatures">
            <summary>Fully automatic correction of ligatures like ff, fl fi, ffi, ti, etc. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.AllCaps">
            <summary>AllCap font detection and correction </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.SmallCaps">
            <summary>SmallCap font detection and correction </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.AlphaNum">
            <summary>Fully automatic correction of alphanumeric glyphs (including automatic by DQ) </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.ExoticLigatures">
            <summary>Fully automatic correction of ligatures like ff, fl fi, ffi, ti, etc. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryAutomaticGNse.All">
            <summary>All automatic GNSE features </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TextRecoveryEngine">
            <summary>
            Represents types of Optical Character Recognition (OCR) Text recovery engine, i.e. SolidOCR
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngine.Automatic">
            <summary>Automatic chose from available engines </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngine.MODI">
            <summary>Use Microsoft Office Document Imaging if present </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngine.SolidOCR">
            <summary>Use Solid OCR </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngine.IRIS">
            <summary>Reserved for and alternate engine (IRIS) </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngine.Default">
            <summary>Default value is Automatic </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TextRecoveryEngineNse">
            <summary>
            Represents types of Text recovery engine
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngineNse.Automatic">
            <summary>Automatic chose from available engines </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngineNse.OCR">
            <summary>Use NSE-capable OCR engine (like MODI) - never used because NSE would be "off" if MODI is absent </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngineNse.SolidNSE">
            <summary>Use Solid NSE </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryEngineNse.Default">
            <summary>Default value is Automatic </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TextRecoveryNSE">
            <summary>
            Represents types of Text recovery using Non Standard Encoding (NSE)
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryNSE.Automatic">
            <summary>Problem characters only </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryNSE.Always">
            <summary>Every characters </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryNSE.Never">
            <summary>Never use NSE </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.TextRecoveryNSE.Default">
            <summary>Default value is Automatic </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.TextWatermark">
            <summary>
            Represents Text watermark
            </summary>
        </member>
        <member name="M:SolidFramework.Converters.Plumbing.TextWatermark.Parse(System.String)">
            <summary>
            Parses the specified content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Text">
            <summary>
            Gets the text to be displayed on the watermark i.e. DRAFT
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Url">
            <summary>
            Gets the URL you want to target
            </summary>
            <value>
            The URL you are targeting.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Color">
            <summary>
            Gets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Fill">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Converters.Plumbing.TextWatermark"/> is filled.
            </summary>
            <value>
              <c>true</c> if filled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Stroke">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Converters.Plumbing.TextWatermark"/> is strokde.
            </summary>
            <value>
              <c>true</c> if stroked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.SerifFont">
            <summary>
            Gets a value indicating whether [serif font].
            </summary>
            <value>
              <c>true</c> if [serif font]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Background">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Converters.Plumbing.TextWatermark"/> is background.
            </summary>
            <value>
              <c>true</c> if background; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.Angle">
            <summary>
            Gets the angle.
            </summary>
            <value>
            The angle.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.Plumbing.TextWatermark.LineWeight">
            <summary>
            Gets the line weight.
            </summary>
            <value>
            The line weight.
            </value>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.ThousandsSeparator">
            <summary>
            The thousands separator used in numeric reconstruction for Excel files.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ThousandsSeparator.Comma">
            <summary>Sets thousands separator to comma </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ThousandsSeparator.Period">
            <summary>Sets thousands separator to period </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.ThousandsSeparator.Space">
            <summary>Sets thousands separator to space </summary>
        </member>
        <member name="T:SolidFramework.Converters.Plumbing.WordDocumentType">
            <summary>
            Word output document types.
            </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.WordDocumentType.WordML">
            <summary>Sets format to Microsoft Office XML. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.WordDocumentType.Rtf">
            <summary>Sets format to RTF. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.WordDocumentType.Txt">
            <summary>Sets format to TXT. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.WordDocumentType.Doc">
            <summary>Sets format to Doc. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.WordDocumentType.DocX">
            <summary>Sets format to DocX. </summary>
        </member>
        <member name="F:SolidFramework.Converters.Plumbing.WordDocumentType.Json">
            <summary>Sets format to JSON. </summary>
        </member>
        <member name="T:SolidFramework.Converters.SolidConverterPdf">
            <summary>
            This class is used internally by SolidFramework. It should not be used directly.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.ImageWatermark">
            <summary>
             Gets or sets an image as a watermark in the converted file
            </summary>
            <remarks>
            A watermark is an impression that displays on top of or below the content of a PDF page. 
            Image watermarks can be useful for placing a logo on each page.
            To set an ImageWatermark, assign the path to the Image, <c> ImageWatermark.Path = "C:\\MyDocuments\\MyWatermark.jpg";</c>
            Alternatively watermarks can be text. <c>TextWatermark watermark  = new TextWatermark(); watermark.Text = "DRAFT";</c>      
            </remarks>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.PageRange">
            <summary>
            Gets the page range.
            </summary>
            <value>
            The page range.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.DetectSoftHyphens">
            <summary>
            Gets or sets a value indicating whether soft-hyphens should be detected. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.NoRepairing">
            <summary>
             In the event of a damaged PDF (InternalError) do not attempt to repair the PDF before conversion.
            </summary>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.GraphicsAsImages">
            <summary>
            Gets or sets whether vector images should be converted to bitmap images. Default is <c>false</c>.
            </summary>
            <value>
              If <c>true</c> then vector images will be converted to bitmap images; otherwise they will be retained as vector images.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.KeepInvisibleText">
            <summary>
            Gets or sets whether text that is invisible because it has no stroke or fill (PDF rendering mode 3 is typically used for a searchable layer in scanned pages) should be recovered. Default is <c>false</c>.
            </summary>
            <value>
              If <c>true</c> then invisible text that has no stroke or fill will be recovered, else it will be discarded.
            </value>
        </member>
        <member name="P:SolidFramework.Converters.SolidConverterPdf.KeepBackgroundColorText">
            <summary>
            Gets or sets whether text that is invisible because it is the same colour as the background should be recovered. Default is <c>false</c>.
            </summary>
            <value>
              If <c>true</c> then text that is the same colour as the background will be recovered, else it will be discarded.
            </value>
        </member>
        <member name="P:SolidFramework.FloatsArray.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.FloatsArray.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.FloatsArray.Item(System.Int32)">
            <summary>
            Gets the float at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The float at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.FloatsArray.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.FloatsArray.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.FloatsArray.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.FloatsArray.CopyTo(System.Single[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.FloatsArray.CopyTo(System.Single[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.FloatsArray.CopyTo(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.FloatsArray.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.FloatsArray.FloatsArrayEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.FloatsArray.FloatsArrayEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.FloatsArray.FloatsArrayEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.FloatsArray.FloatsArrayEnumerator.#ctor(SolidFramework.FloatsArray)">
            <summary>
            Creates a new instance of the FloatsArrayEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.FloatsArray.FloatsArrayEnumerator.Current">
            <summary>
            Gets the float element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.FloatsArray.FloatsArrayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.FloatsArray.FloatsArrayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.FloatsArray.FloatsArrayEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Imaging.Image">
            <summary>
            Represents Image
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.Image.Create(System.IntPtr,SolidFramework.Pdf.Plumbing.PageStatistics)">
            <summary>
            Creates from the specified path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetPaletteColor(System.Int32)">
            <summary>
            Gets the color of the palette.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetAngles">
            <summary>
            Gets the autorotate and deskew angles for the image.
            </summary>
            <returns>
            Nothing. Properties WasaAutoRotated and WasDeskewed are valid after this call.
            </returns>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetComponentImages">
            <summary>
            Gets the component images.
            </summary>
            <returns>
            The component images.
            </returns>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetComponentImages(SolidFramework.Imaging.Plumbing.ImageCompression)">
            <summary>
            Gets the component images.
            </summary>
            <param name="compression">The compression.</param>
            <returns>
            The component images.
            </returns>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetComponentImages(SolidFramework.Imaging.Plumbing.ImageCompression,SolidFramework.Imaging.Plumbing.ImageComponents)">
            <summary>
            Gets the component images.
            </summary>
            <param name="compression">The compression.</param>
            <param name="components">The components.</param>
            <returns>
            The component images.
            </returns>
        </member>
        <member name="M:SolidFramework.Imaging.Image.GetComponentImages(SolidFramework.Imaging.Plumbing.ImageCompression,SolidFramework.Imaging.Plumbing.ImageComponents,SolidFramework.Imaging.Plumbing.ImageComponentOrder)">
            <summary>
            Gets the component images.
            </summary>
            <param name="compression">The compression.</param>
            <param name="components">The components.</param>
            <param name="imageOrder">The image order.</param>
            <returns>
            The component images.
            </returns>
        </member>
        <member name="M:SolidFramework.Imaging.Image.ToBitmap">
            <summary>
            Converts to <c>System.Drawing.Bitmap</c>
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Imaging.Image.ImageEncoder">
            <summary>
            Gets the image encoder.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.ImageType">
            <summary>
            Gets the type of the image.
            </summary>
            <value>
            The type of the image.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.DCTCompressionQuality">
            <summary>
            Gets a value indicating the quality of lossy compression to use.
            </summary>
            <value>
              <c>true</c> if this instance is lossy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.BitsPerComponent">
            <summary>
            Gets the bits per component.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.TransparentIndex">
            <summary>
            index in a palette image of transparent color (-1 means no transparent color)
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.HeightProcessed">
            <summary>
            Gets the height processed.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.WidthProcessed">
            <summary>
            Gets the width processed.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.DpiProcessed">
            <summary>
            Gets the dpi processed.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsUnderlineComponent">
            <summary>
            Gets a value indicating whether this instance is underline component.
            </summary>
            <value>
                <c>true</c> if this instance is underline component; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsRectangleComponent">
            <summary>
            Gets a value indicating whether this instance is rectangle component.
            </summary>
            <value>
                <c>true</c> if this instance is rectangle component; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsInverseComponent">
            <summary>
            Gets a value indicating whether this instance is inverse component.
            </summary>
            <value>
                <c>true</c> if this instance is inverse component; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.UsesDCTCompression">
            <summary>
            Gets a value indicating whether this instance is lossy.
            </summary>
            <value>
              <c>true</c> if this instance is lossy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsVectorComponent">
            <summary>
            Gets a value indicating whether this instance is vector component.
            </summary>
            <value>
                <c>true</c> if this instance is vector component; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsImageComponent">
            <summary>
            Gets a value indicating whether this instance is image component.
            </summary>
            <value>
                <c>true</c> if this instance is image component; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsTextBackground">
            <summary>
            Gets a value indicating whether this instance is text background.
            </summary>
            <value>
                <c>true</c> if this instance is text background; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsTextComponent">
            <summary>
            Gets a value indicating whether this instance is text component.
            </summary>
            <value>
                <c>true</c> if this instance is text component; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsPaletteUsed">
            <summary>
            Gets a value indicating whether this instance is palette used.
            </summary>
            <value>
                <c>true</c> if this instance is palette used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsNeedingOCR">
            <summary>
            Gets a value indicating whether this instance is needing OCR.
            </summary>
            <value>
                <c>true</c> if this instance is needing OCR; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.IsAlphaUsed">
            <summary>
            Gets a value indicating whether this instance is alpha channel used.
            </summary>
            <value>
                <c>true</c> if this instance is alpha channel used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.WasAutoRotated">
            <summary>
            Gets the auto rotate angle (non-zero if the image needed to be rotated)
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.WasDeskewed">
            <summary>
            Gets the deskew angle (non-zero if the image needed to be deskewed)
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.PaletteSize">
            <summary>
            Gets the number of entries in the current palette.
            </summary>
            <value>
                <c>true</c> if this instance is palette used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.TextAngle">
            <summary>
            Gets a value indicating whether this instance ortho rotated text
            </summary>
            <value>
                <c>0, 90 or -90</c> if rotated, <c>0</c> if not.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.TextLanguage">
            <summary>
            Gets a value indicating whether this instance was detected as CJK text.
            </summary>
            <value>
                Bit flagged value if CJK, <c>0</c> if not.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Image.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.DpiX">
            <summary>
            Gets the dpi X co-ordinates.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.DpiY">
            <summary>
            Gets the dpi Y co-ordinates.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.Dx">
            <summary>
            Gets the delta x co-ordinates.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Image.Dy">
            <summary>
            Gets the delta y co-ordinates.
            </summary>
        </member>
        <member name="T:SolidFramework.Imaging.ImageEncoder">
            <summary>
            Represents types of Image encoder
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.None">
            <summary>Undefined <see cref = "T:SolidFramework.Imaging.Image"/>  Encoder </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.ASCIIHexEncode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is ASCII Hex </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.LZWEncode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is LZW </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.FlateEncode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is Flate </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.ASCII85Encode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is ASCII85 </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.RunLengthEncode">
            <summary>Runs length encoder </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.JBIG2Encode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is JBIG2 </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.DCTEncode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is DCT </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.J2KEncode">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is J2K </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.CCITTFaxEncodeGroup3">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is CCITT Fax (Group3) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.CCITTFaxEncodeGroup4">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Encoder is CCITT Fax (Group4) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.AutomaticSizeOptimize">
            <summary>Automatic (Optimize size) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.AutomaticSpeedOptimize">
            <summary>Automatic (Optimize speed) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageEncoder.Automatic">
            <summary>Automatic </summary>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Imaging.Image at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Imaging.Image at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.CopyTo(SolidFramework.Imaging.Image[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.CopyTo(SolidFramework.Imaging.Image[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.CopyTo(System.Int32,SolidFramework.Imaging.Image[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator.#ctor(SolidFramework.Imaging.ImagesCollection)">
            <summary>
            Creates a new instance of the ImagesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Imaging.Image element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ImagesCollection.ImagesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Imaging.ImageType">
            <summary>
            Represents types of Image type such as colour, greyscale etc.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageType.None">
            <summary>Undefined <see cref = "T:SolidFramework.Imaging.Image"/>  Type </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageType.Color">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Type is Color </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageType.Grayscale">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Type is Gray Scale </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ImageType.Monochrome">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  Type is monochrome </summary>
        </member>
        <member name="T:SolidFramework.Imaging.IOcrRegion">
            <summary>
            Interface for OCR region
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegion.Dx">
            <summary>
            Gets the delta x co-ordinates.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegion.Dy">
            <summary>
            Gets the delta y co-ordinate.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegion.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegion.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Imaging.IOcrRegion at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Imaging.IOcrRegion at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.CopyTo(SolidFramework.Imaging.IOcrRegion[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.CopyTo(SolidFramework.Imaging.IOcrRegion[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.CopyTo(System.Int32,SolidFramework.Imaging.IOcrRegion[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator.#ctor(SolidFramework.Imaging.IOcrRegionsCollection)">
            <summary>
            Creates a new instance of the IOcrRegionsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Imaging.IOcrRegion element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.IOcrRegionsCollection.IOcrRegionsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.Ocr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Imaging.Ocr"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.Ocr.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Imaging.Ocr"/> class.
            </summary>
            <param name="languageCode">The language code.</param>
        </member>
        <member name="M:SolidFramework.Imaging.Ocr.AddWord(System.String)">
            <summary>
            Adds a word to the custom dictionary for the lifetime of this  <see cref="T:SolidFramework.Imaging.Ocr"/> session. Useful for domain specific names or terminology.
            </summary>
            <param name="customWord">The custom word.</param>
        </member>
        <member name="M:SolidFramework.Imaging.Ocr.Process(SolidFramework.Imaging.Image)">
            <summary>
            Processes the specified image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Imaging.Ocr.TextRecoverySuspects">
            <summary>
            Gets or sets a value indicating whether to highlight low confidence words (any word with <see cref="P:SolidFramework.Imaging.OcrWord.Confidence"/> less than 100) in the OCR output in yellow.
            </summary>
            <value>
                <c>true</c> to mark suspects; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Imaging.OcrGraphicRegion">
            <summary>
            Represents OCR graphic region
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrGraphicRegion.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrGraphicRegion.LineWidth">
            <summary>
            Gets the width of the line.
            </summary>
            <value>
            The width of the line.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.OcrGraphicRegion.GraphicType">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:SolidFramework.Imaging.OcrGraphicRegionType">
            <summary>
            Represents types of OCR graphic region
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrGraphicRegionType.Unknown">
            <summary>Region is unknown </summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrGraphicRegionType.Rectangle">
            <summary>Region is rectangle </summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrGraphicRegionType.FilledRectangle">
            <summary>Region is rectangle </summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrGraphicRegionType.Line">
            <summary>Region is line </summary>
        </member>
        <member name="T:SolidFramework.Imaging.OcrImageRegion">
            <summary>
            Represents image region
            </summary>
        </member>
        <member name="T:SolidFramework.Imaging.OcrLine">
            <summary>
            Represents line of OCR words
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLine.#ctor(SolidFramework.Imaging.OcrWordsCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Imaging.OcrLine"/> class.
            </summary>
            <param name="words">The words.</param>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Imaging.OcrLine at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Imaging.OcrLine at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.CopyTo(SolidFramework.Imaging.OcrLine[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.CopyTo(SolidFramework.Imaging.OcrLine[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.CopyTo(System.Int32,SolidFramework.Imaging.OcrLine[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator.#ctor(SolidFramework.Imaging.OcrLinesCollection)">
            <summary>
            Creates a new instance of the OcrLinesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Imaging.OcrLine element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrLinesCollection.OcrLinesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="F:SolidFramework.Imaging.OcrRegionType.IOcrRegion">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrRegionType.OcrImageRegion">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrRegionType.OcrTextRegion">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.OcrRegionType.OcrGraphicRegion">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Imaging.OcrResults">
            <summary>
            Represents OCR results
            </summary>
        </member>
        <member name="T:SolidFramework.Imaging.OcrTextRegion">
            <summary>
            Represents OCR text region
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrTextRegion.TextLanguage">
            <summary>
            Gets two letter language code this text region.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrTextRegion.OcrWordCount">
            <summary>
            Gets count of words OCRd in this region.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrTextRegion.OcrConfidentWords">
            <summary>
            Gets count of supsect words OCRd in this region.
            </summary>
        </member>
        <member name="T:SolidFramework.Imaging.OcrWord">
            <summary>
            Represents OCR word
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Background">
            <summary>
            Gets the background color.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWord.GetWidth">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Pts">
            <summary>
            Gets the PTS.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Bold">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Imaging.OcrWord"/> is bold.
            </summary>
            <value>
              <c>true</c> if bold; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Italic">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Imaging.OcrWord"/> is italic.
            </summary>
            <value>
              <c>true</c> if italic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Confidence">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Imaging.OcrWord"/> is of high recognition confidence.
            </summary>
            <value>
              <c>100</c> if confident; less if not.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Dx">
            <summary>
            Gets the delta x co-ordinates.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Dy">
            <summary>
            Gets the delta y co-ordinates.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.BaseLine">
            <summary>
            Gets the base line.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWord.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Imaging.OcrWord at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Imaging.OcrWord at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.CopyTo(SolidFramework.Imaging.OcrWord[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.CopyTo(SolidFramework.Imaging.OcrWord[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.CopyTo(System.Int32,SolidFramework.Imaging.OcrWord[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator.#ctor(SolidFramework.Imaging.OcrWordsCollection)">
            <summary>
            Creates a new instance of the OcrWordsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Imaging.OcrWord element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.OcrWordsCollection.OcrWordsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Imaging.PaperSize">
            <summary>
            Represents types of Paper Size.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.PaperSize.Letter">
            <summary>Type of Paper Size is Letter. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.PaperSize.Legal">
            <summary>Type of Paper Size is Legal. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.PaperSize.A4">
            <summary>Type of Paper Size is A4. </summary>
        </member>
        <member name="T:SolidFramework.Imaging.PaperSource">
            <summary>
             Represents type of Paper Source.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.PaperSource.FeederSimplex">
            <summary>Type of Paper Sourse is Feeder Simplex. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.PaperSource.FeederDuplex">
            <summary>Type of Paper Sourse is Feeder Duplex. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.PaperSource.Flatbed">
            <summary>Type of Paper Sourse is Flatbed. </summary>
        </member>
        <member name="T:SolidFramework.Imaging.Plumbing.ImageComponentOrder">
            <summary>
            Controls the sort order of the results from GetComponentImages. Also controls single versus multiple text component mode.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponentOrder.ImagesVectorsText">
            <summary>Order of the result components from GetComponentImages is Images, Vectors then Text (order used by Solid Converter PDF to Word using MODI) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponentOrder.ImagesTextVectors">
            <summary>Order of the result components from GetComponentImages is Images, Text then Vectors </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponentOrder.ImagesVectorsSingleText">
            <summary>Order of the result components from GetComponentImages is Images, Vectors then asingle Text component (order used by Solid Converter PDF to Word using Solid OCR) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponentOrder.ImagesSingleTextVectors">
            <summary>Order of the result components from GetComponentImages is Images, single Text component then Vectors </summary>
        </member>
        <member name="T:SolidFramework.Imaging.Plumbing.ImageComponents">
            <summary>
            Represents types of Image components
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponents.All">
            <summary>GetComponentImages will process and return images, vectors and text components for full OCR </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponents.TextOnly">
            <summary>GetComponentImages will process and return only text components (useful for searchable text) </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageComponents.ImagesOnly">
            <summary>GetComponentImages will process and return only optimized image components (not for OCR) </summary>
        </member>
        <member name="T:SolidFramework.Imaging.Plumbing.ImageCompression">
            <summary>
            GetComponentImages will process and return components optimized according to ImageCompression.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.Unknown">
            <summary>Unknown <see cref = "T:SolidFramework.Imaging.Image"/>  Compression </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.ColorOrBetter">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  components will be returned as 24 bpp RGB, 8/4/2 bpp gray, 8/4 bpp indexed color or mono </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.GrayOrBetter">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  components will be returned as 4/2 bpp gray or mono </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.Mono">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  components will be returned as 1 bpp mono </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.FakeMono">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  components will be returned as 1 bpp mono </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.RealGrayOrBetter">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  components will be returned as 4/2 bpp gray or mono </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.Lossless">
            <summary><see cref = "T:SolidFramework.Imaging.Image"/>  components will be returned as a single lossless compressed image </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.ImageCompression.PreserveOriginal">
            <summary>The original images won't be changed </summary>
        </member>
        <member name="T:SolidFramework.Imaging.Plumbing.TextLanguage">
            <summary>
            Used by TextLanguage to return the detected CJK language for a text component.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.Unknown">
            <summary>Not set. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.Japanese">
            <summary>Text Component appears to be Japanese. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.Korean">
            <summary>Text Component appears to be Korean. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.SimplifiedChinese">
            <summary>Text Component appears to be Simplified Chinese. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.TraditionalChinese">
            <summary>Text Component appears to be Traditional Chinese. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.Greek">
            <summary>Text Component appears to be Greek. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.Hebrew">
            <summary>Text Component appears to be Hebrew. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.Plumbing.TextLanguage.Arabic">
            <summary>Text Component appears to be Arabic. </summary>
        </member>
        <member name="T:SolidFramework.Imaging.ScanAction">
            <summary>
            Represents type of Scan Action.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanAction.Completed">
            <summary>Type of Scan Action is Completed. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanAction.Image">
            <summary>Type of Scan Action is <see cref = "F:SolidFramework.Imaging.ScanAction.Image"/> . </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanAction.Error">
            <summary>Type of Scan Action is Error. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.Successful">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.TwainNotLoaded">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.ScannerOffline">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.BadAqcuire">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.BadScannerSelection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.NoImage">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.UserCancelled">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.Cancelled">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.BadImageSave">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScanEventResult.NextImageFailed">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Imaging.ScannerDuplexTypes">
            <summary>
            Duplex types for Scanner Object.
            </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScannerDuplexTypes.None">
            <summary>Duplex scanning not supported. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScannerDuplexTypes.OnePassDuplex">
            <summary>One pass duplex scanning supported. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScannerDuplexTypes.TwoPassDuplex">
            <summary>Tow pass duplex scanning supported. </summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScannerProtocol.Twain">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Imaging.ScannerProtocol.WIA">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Imaging.Scanner">
            <summary>
            Represents types of Scanner.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.Manufacturer">
            <summary>
            Gets the manufacturer.
            </summary>
            <value>
            The manufacturer.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.ProtocolVersion">
            <summary>
            Gets the major protocol version.
            </summary>
            <value>
            The major protocol version.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.FeederEnabled">
            <summary>
            Gets a value indicating whether feeder enabled.
            </summary>
            <value>
              <c>true</c> if feeder enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.DuplexType">
            <summary>
            Gets the type of the duplex.
            </summary>
            <value>
            The type of the duplex.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.DuplexEnabled">
            <summary>
            Gets a value indicating whether duplex enabled.
            </summary>
            <value>
              <c>true</c> if duplex enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutoFeed">
            <summary>
            Gets a value indicating whether auto feed.
            </summary>
            <value>
              <c>true</c> if auto feed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.PaperDetect">
            <summary>
            Gets a value indicating whether paper detect.
            </summary>
            <value>
              <c>true</c> if paper detect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.FeederLoaded">
            <summary>
            Gets a value indicating whether [feeder loaded].
            </summary>
            <value>
              <c>true</c> if [feeder loaded]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutoSenseMedium">
            <summary>
            Gets a value indicating whether auto sense medium.
            </summary>
            <value>
              <c>true</c> if auto sense medium; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.UndefinedImageSize">
            <summary>
            Gets a value indicating whether undefined image size.
            </summary>
            <value>
              <c>true</c> if undefined image size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.Overscan">
            <summary>
            Gets the overscan.
            </summary>
            <value>
            The overscan.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutomaticDeskew">
            <summary>
            Gets a value indicating whether automatic deskew.
            </summary>
            <value>
              <c>true</c> if automatic deskew; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutomaticRotate">
            <summary>
            Gets a value indicating whether automatic rotate.
            </summary>
            <value>
              <c>true</c> if automatic rotate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutomaticBorderDetection">
            <summary>
            Gets a value indicating whether automatic border detection.
            </summary>
            <value>
            <c>true</c> if automatic border detection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutomaticColorEnabled">
            <summary>
            Gets a value indicating whether automatic color enabled.
            </summary>
            <value>
            <c>true</c> if automatic color enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.AutomaticColorNonColorPixelType">
            <summary>
            Gets the type of the automatic color non color pixel.
            </summary>
            <value>
            The type of the automatic color non color pixel.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.SupportedPaperSizes">
            <summary>
            Gets the supported paper sizes.
            </summary>
            <value>
            The supported paper sizes.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.SelectedPaperSize">
            <summary>
            Gets or sets the size of the selected paper.
            </summary>
            <value>
            The size of the selected paper.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.SelectedPaperSource">
            <summary>
            Gets or sets the selected paper source.
            </summary>
            <value>
            The selected paper source.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanner.SelectedFeederFlip">
            <summary>
            Gets or sets a value indicating whether selected feeder flip.
            </summary>
            <value>
              <c>true</c> if selected feeder flip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Imaging.Scanner.LoadSettings">
            <summary>
            Saves the selected settings.
            </summary>
        </member>
        <member name="T:SolidFramework.Imaging.ScannerPng">
            <summary>
            Represents type of Scanner Png.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ScannerPng.ExtractPng(System.String)">
            <summary>
            Extracts the PNG.
            </summary>
            <param name="scannerName">Name of the scanner.</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Imaging.ScanEventArgs">
            <summary>
            Represent type of Scan Event Args.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ScanEventArgs.#ctor(SolidFramework.Imaging.ScanAction,System.String,SolidFramework.Imaging.ScanEventResult)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Imaging.ScanEventArgs" /> class.
            </summary>
            <param name="theAction">The action.</param>
            <param name="myFilePath">My file path.</param>
        </member>
        <member name="P:SolidFramework.Imaging.ScanEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Imaging.ScanEventArgs" /> is cancel.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.ScanEventArgs.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.ScanEventArgs.Image">
            <summary>
            Gets the image.
            </summary>
            <value>
            The image.
            </value>
        </member>
        <member name="T:SolidFramework.Imaging.Scanners">
            <summary>
            Represents types of Scanners.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Scanners.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Scanners.LastError">
            <summary>
            Gets the last error.
            </summary>
            <value>
            The last error.
            </value>
        </member>
        <member name="E:SolidFramework.Imaging.Scanners.ScanNotification">
            <summary>
            Occurs when scan notification.
            </summary>
        </member>
        <member name="P:SolidFramework.Imaging.Scanners.OwnerForm">
            <summary>
            Gets or sets the owner form.
            </summary>
            <value>
            The owner form.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanners.OptionsLocation">
            <summary>
            Gets or sets the options location.
            </summary>
            <value>
            The options location.
            </value>
        </member>
        <member name="P:SolidFramework.Imaging.Scanners.SelectedScanner">
            <summary>
            Gets or sets the selected scanner.
            </summary>
            <value>
            The selected scanner.
            </value>
        </member>
        <member name="M:SolidFramework.Imaging.Scanners.ShowOptions(System.String)">
            <summary>
            Shows the options.
            </summary>
            <param name="applicationTitle">The application title.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Imaging.Scanners.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.Scanners.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.Scanners.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.Scanners.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SolidFramework.Imaging.Scanners.OnRaiseScanNotification(SolidFramework.Imaging.ScanEventArgs)">
            <summary>
            Raises the <see cref="E:RaiseScanNotification" /> event.
            </summary>
            <param name="e">The <see cref="T:SolidFramework.Imaging.ScanEventArgs" /> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="F:SolidFramework.Imaging.ScannerWaitCapabilitiesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ScannerWaitCapabilitiesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Imaging.ScannerWaitCapabilitiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SolidFramework.Imaging.ScanningComms.ConvertUTF7toUCS2(System.String)">
            <summary>
            UTF-7 is used to transfer strings (like unicode paths) via the console without
            needing to care about the code page of the console (since only 0..127 are used)
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.Item(System.Int32)">
            <summary>
            Gets the global::System.Drawing.Color at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The global::System.Drawing.Color at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.CopyTo(System.Drawing.Color[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.CopyTo(System.Drawing.Color[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.CopyTo(System.Int32,System.Drawing.Color[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator.#ctor(SolidFramework.Interop.ColorsCollection)">
            <summary>
            Creates a new instance of the ColorsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator.Current">
            <summary>
            Gets the global::System.Drawing.Color element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.ColorsCollection.ColorsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="M:SolidFramework.Interop.DateTime.ToISOString">
             <summary>
            Returns an ISO 8601 representation of the DateTime
            </summary>
             <returns>The string representation of the DateTime in the format "yyyy-MM-ddTHH:mm:ss.fffZ".</returns>
        </member>
        <member name="M:SolidFramework.Interop.DateTime.ToSortableString">
             <summary>
            Returns a string representation of the DateTime that will be chronologically sortable for positive years.
            </summary>
             <returns>The string representation of the DateTime in the format "yyyy-MM-dd HH:mm:ssZ".</returns>
        </member>
        <member name="M:SolidFramework.Interop.DateTime.Parse(System.String)">
            <summary>Parses a DateTime from the specified string or throws an exception if it can't be parsed.</summary>
            <param name="date">The string to parse.</param>
            <returns>The DateTime that was parsed from the string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.DateTime.TryParse(System.String,System.DateTime@)">
            <summary>Attempts to parse a DateTime from the specified string.</summary>
            <param name="date">The string to parse.</param>
            <param name="result">A DateTime to store the result into. This will be set to null if <paramref name="date" /> couldn't be parsed.</param>
            <returns>true if <paramref name="date" /> was parsed successfully; otherwise, false.</returns>
        </member>
        <member name="M:SolidFramework.Interop.DateTime.Now">
            <summary>Creates a UTC DateTime based on the current system time.</summary>
            <returns>A UTC DateTime based on the current system time.</returns>
        </member>
        <member name="M:SolidFramework.Interop.Matrix.Tx">
            <summary>
            Specifies the offset to be applied in the X direction.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.Matrix.Ty">
            <summary>
            Specifies the offset to be applied in the Y direction.
            </summary>
        </member>
        <member name="T:SolidFramework.Interop.NativeError">
            <summary>
            Represents types of Native errors
            </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.Success">
            <summary>Success </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.Fail">
            <summary>Failure </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.AlreadyLoaded">
            <summary>Document is already loaded </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.BadData">
            <summary>Bad input data </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.IOError">
            <summary>I/O Error </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.IOFileLocked">
            <summary>Output file is locked </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.NotEnoughMemory">
            <summary>Not enough RAM to perform the task </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.WrongPassword">
            <summary>Wrong open password </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.NoUserNoOwner">
            <summary>No User No Owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.NoUserOwner">
            <summary>No User Owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.UserNoOwner">
            <summary>User No Owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.UserOwner">
            <summary>User Owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.InvalidLicense">
            <summary>Invalid <see cref = "T:SolidFramework.License"/> </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.UnavailableAction">
            <summary>Unavailable action </summary>
        </member>
        <member name="F:SolidFramework.Interop.NativeError.FileHasCopyProtection">
            <summary>Password is required </summary>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.Item(System.Int32)">
            <summary>
            Gets the global::System.Drawing.PointF at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The global::System.Drawing.PointF at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.CopyTo(System.Drawing.PointF[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.CopyTo(System.Drawing.PointF[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.CopyTo(System.Int32,System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator.#ctor(SolidFramework.Interop.PointFsCollection)">
            <summary>
            Creates a new instance of the PointFsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator.Current">
            <summary>
            Gets the global::System.Drawing.PointF element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.PointFsCollection.PointFsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Interop.SolidErrorCodes">
            <summary>
            Represents types of Solid error codes
            </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SUCCESS">
            <summary>Success </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_CANCEL">
            <summary>Canceled </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_INTERNALERROR">
            <summary>Was Internal Error </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_FAILURE">
            <summary>Failure </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_UNAVAILABLEACTION">
            <summary>Unavailable action </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_BADDATA">
            <summary>Bad data </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_IOERROR">
            <summary>Was I/O Error </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_IOFILELOCKED">
            <summary>Input file is locked </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_INVALIDPAGERANGE">
            <summary>Invalid page range </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_NOTENOUGHMEMORY">
            <summary>Not enough RAM to perform the task </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PDF_HAS_COPYPROTECTION">
            <summary>Password is required </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PDF_UNSUPPORTED_ENCRYPTION_HANDLER">
            <summary>Unsupported encryption handler </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_MISSING_CERTIFICATE">
            <summary>Missing security certificate </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PDF_OCR_CANCELED">
            <summary>OCR was canceled </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_CANCELED_FILE_EXIST">
            <summary>Canceled, caused output file is already exist </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_NO_TABLES_TO_EXTRACT">
            <summary>No tables to extract </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_NO_IMAGES_TO_EXTRACT">
            <summary>No images to extract </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PDFA_PROBLEMS_ADDRESSED">
            <summary>Pdf/A problems is fixed </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PDFA_PROBLEMS_NOT_ADDRESSED">
            <summary>Pdf/A problems is not fixed </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SDKAlreadyLoaded">
            <summary>Document is already loaded </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SSDK_WRONG_PASSWORD">
            <summary>Wrong password for the document </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SSDK_NOUSER_NOOWNER">
            <summary>No user, No owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SSDK_NOUSER_OWNER">
            <summary>No user, Owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SSDK_USER_NOOWNER">
            <summary>User, No owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SSDK_USER_OWNER">
            <summary>User, owner </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_SSDK_INVALID_LICENCE">
            <summary>Invalid license </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_NOTING_TO_PRINT">
            <summary>Nothing to print </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_CANCELED_PDFA_NOT_COMPLIANT">
            <summary>Canceled Pdf/A not compliant </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_RESULTED_PDFA_NOT_COMPLIANT">
            <summary>Resulted Pdf/A not compliant </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PDF_ENCRYPTED">
            <summary>Pdf is encrypted </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PRINTING_RESERVED_FIRST">
            <summary>Reserved first value in printing range </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PRINTING_RESERVED_LAST">
            <summary>Reserved last value in printing range </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_NOBPPCONVERSION">
            <summary>No BPP conversion </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_NOGRAYSCALE">
            <summary>No Gray scale </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_PSDUNSUPPORTEDMODE">
            <summary>Unsupported PSD mode </summary>
        </member>
        <member name="F:SolidFramework.Interop.SolidErrorCodes.SE_UNKNOWN">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Interop.StringMarshaler">
            <summary>
            Represents String marshaler
            Reference: http://support.microsoft.com/kb/307713
            converts System.String to native const wchar_t *
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.StringMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Converts a native string to a managed string.
            </summary>
            <param name="nativeData">A pointer to the native string to be converted.</param>
            <returns>Returns a managed copy of the native string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.StringMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Converts a managed string to a native string.
            </summary>
            <param name="managedObj">The managed string to be converted.</param>
            <returns>Returns a pointer to the native string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.StringMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Performs necessary cleanup of the unmanaged data when it is no longer needed.
            </summary>
            <param name="nativeData">A pointer to the unmanaged data to be destroyed.</param>
        </member>
        <member name="M:SolidFramework.Interop.StringMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            Cleans up managed data.
            </summary>
            <param name="managedObj">The managed object.</param>
        </member>
        <member name="M:SolidFramework.Interop.StringMarshaler.GetNativeDataSize">
            <summary>
            Returns the size of the native data to be marshaled.
            </summary>
            <returns>
            The size in bytes of the native data.
            </returns>
        </member>
        <member name="M:SolidFramework.Interop.StringMarshaler.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            The instance.
            </returns>
        </member>
        <member name="T:SolidFramework.Interop.ConstStringMarshaler">
            <summary>
            Marshals constant native strings (const wchar_t *) to managed strings (System.String)
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.ConstStringMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Converts a native string to a managed string.
            </summary>
            <param name="nativeData">A pointer to the native string to be converted.</param>
            <returns>Returns a managed copy of the native string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.ConstStringMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Converts a managed string to a native string.
            </summary>
            <param name="managedObj">The managed string to be converted.</param>
            <returns>Returns a pointer to the native string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.ConstStringMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Performs necessary cleanup of the unmanaged data when it is no longer needed.
            </summary>
            <param name="nativeData">A pointer to the unmanaged data to be destroyed.</param>
        </member>
        <member name="M:SolidFramework.Interop.ConstStringMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            Cleans up managed data.
            </summary>
            <param name="managedObj">The managed object.</param>
        </member>
        <member name="M:SolidFramework.Interop.ConstStringMarshaler.GetNativeDataSize">
            <summary>
            Returns the size of the native data to be marshaled.
            </summary>
            <returns>
            The size in bytes of the native data.
            </returns>
        </member>
        <member name="M:SolidFramework.Interop.ConstStringMarshaler.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            The instance.
            </returns>
        </member>
        <member name="T:SolidFramework.Interop.TempStringMarshaler">
            <summary>
            Marshals temporary native strings (wchar_t[]) to and from managed strings (System.String)
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.TempStringMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Converts a native string to a managed string.
            </summary>
            <param name="nativeData">A pointer to the native string to be converted.</param>
            <returns>Returns a managed copy of the native string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.TempStringMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Converts a managed string to a native string.
            </summary>
            <param name="managedObj">The managed string to be converted.</param>
            <returns>Returns a pointer to the native string.</returns>
        </member>
        <member name="M:SolidFramework.Interop.TempStringMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Performs necessary cleanup of the unmanaged data when it is no longer needed.
            </summary>
            <param name="nativeData">A pointer to the unmanaged data to be destroyed.</param>
        </member>
        <member name="M:SolidFramework.Interop.TempStringMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            Cleans up managed data.
            </summary>
            <param name="managedObj">The managed object.</param>
        </member>
        <member name="M:SolidFramework.Interop.TempStringMarshaler.GetNativeDataSize">
            <summary>
            Returns the size of the native data to be marshaled.
            </summary>
            <returns>
            The size in bytes of the native data.
            </returns>
        </member>
        <member name="M:SolidFramework.Interop.TempStringMarshaler.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            The instance.
            </returns>
        </member>
        <member name="T:SolidFramework.Interop.StringArrayMarshaler">
            <summary>
            Represents String array marshaler
            </summary>
        </member>
        <member name="M:SolidFramework.Interop.StringArrayMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Converts the unmanaged data to managed data.
            </summary>
            <param name="pNativeData">A pointer to the unmanaged data to be wrapped.</param>
            <returns>
            Returns the managed view of the COM data.
            </returns>
        </member>
        <member name="M:SolidFramework.Interop.StringArrayMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Marshals the managed data to native data.
            </summary>
            <param name="managedObj">The managed object.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Interop.StringArrayMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            Performs necessary cleanup of the unmanaged data when it is no longer needed.
            </summary>
            <param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
        </member>
        <member name="M:SolidFramework.Interop.StringArrayMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            Cleans up managed data.
            </summary>
            <param name="managedObj">The managed object.</param>
        </member>
        <member name="M:SolidFramework.Interop.StringArrayMarshaler.GetNativeDataSize">
            <summary>
            Returns the size of the native data to be marshaled.
            </summary>
            <returns>
            The size in bytes of the native data.
            </returns>
        </member>
        <member name="M:SolidFramework.Interop.StringArrayMarshaler.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            The instance.
            </returns>
        </member>
        <member name="M:SolidFramework.License.FreeOk">
            <summary>
            Checks whether the current license has permission to use 'free' features.
            </summary>
            <returns>
              <c>true</c> if the current license allows 'free' features; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.License.ToolsOk">
            <summary>
            Checks whether the current license has permission to use 'tools' features.
            </summary>
            <returns>
              <c>true</c> if the current license allows 'tools' features; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.License.ProfessionalOk">
            <summary>
            Checks whether the current license has permission to use 'conversion' features.
            </summary>
            <returns>
              <c>true</c> if the current license allows 'conversion' features; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.License.ProfessionalOcrOk">
            <summary>
            Checks whether the current license has permission to use 'conversion' and OCR features.
            </summary>
            <returns>
              <c>true</c> if the current license allows 'conversion' and OCR features; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.License.DistributionOk">
            <summary>
            Checks whether the current license has permission to be distributed.
            </summary>
            <returns>
              <c>true</c> if the current license is distributable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.License.Allows(SolidFramework.Plumbing.LicensePermissions)">
            <summary>
            Checks if the current license has the required <see cref="T:SolidFramework.Plumbing.LicensePermissions"/>.
            </summary>
            <param name="permissions">The <see cref="T:SolidFramework.Plumbing.LicensePermissions"/> to check.</param>
            <returns>
              <c>true</c> if the current license has the required <see cref="T:SolidFramework.Plumbing.LicensePermissions"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.License.Import(System.String,System.String,System.String,System.String)">
            <summary>
            Imports license
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <param name="organization">The organization.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:SolidFramework.License.Import(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Imports license
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <param name="organization">The organization.</param>
            <param name="code">The code.</param>
            <param name="applicationCode">The application code.</param>
        </member>
        <member name="M:SolidFramework.License.Import(System.IO.StreamReader)">
            <summary>
            Imports license from the specified stream
            </summary>
            <param name="stream">The stream containing the license XML</param>
        </member>
        <member name="M:SolidFramework.License.Import(System.String)">
            <summary>
            Imports license from the specified XML
            </summary>
            <param name="xml">Either XML content or the path to an XML file.</param>
        </member>
        <member name="M:SolidFramework.License.Validate(System.String,System.String@)">
            <summary>
            Validates license from the specified XML and uses web service to generate new license if appropriate
            </summary>
            <param name="xml">The XML.</param>
            <param name="newXml">The new XML.</param>
        </member>
        <member name="M:SolidFramework.License.WebValidate(System.String)">
            <summary>
            Validates the license and uses the web service to generate a new license if required.
            </summary>
            <returns>
            An empty string if the current license is valid, otherwise returns the XML for the updated license
            </returns>
        </member>
        <member name="M:SolidFramework.License.WebValidate(System.String,System.String,System.String,System.String)">
            <summary>
            Validates the license and uses the web service to generate a new license if required.
            </summary>
            <returns>
            An empty string if the current license is valid, otherwise returns the XML for the updated license
            </returns>
        </member>
        <member name="M:SolidFramework.License.CloudImport(System.String)">
            <summary>
            Loads a seed license from an XML file and uses the web service to import a license that will work in cloud environments
            </summary>
            <param name="xml">Either XML content or the path to an XML file.</param>
        </member>
        <member name="M:SolidFramework.License.CloudImport(System.String,System.String,System.String,System.String)">
            <summary>
            Uses the web service to import a license that will work in cloud environments
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <param name="organization">The organization.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:SolidFramework.License.CloudImport(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Uses the web service to import a license that will work in cloud environments
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <param name="organization">The organization.</param>
            <param name="code">The code.</param>
            <param name="applicationCode">The application code.</param>
        </member>
        <member name="M:SolidFramework.License.GetTemporaryLicense">
            <summary>
            Gets a temporary machine specific copy of the current license.
            </summary>
            <returns>
            A temporary machine specific copy of the current license.
            </returns>
        </member>
        <member name="M:SolidFramework.License.LoadTemporaryLicense(System.String)">
            <summary>
            Loads a temporary machine specific license that was created by GetTemporaryLicense.
            </summary>
            <param name="license">A temporary machine specific license created by GetTemporaryLicense.</param>
        </member>
        <member name="M:SolidFramework.License.Clear">
            <summary>
            Clears the current license and loads the default free license (if available)
            </summary>
        </member>
        <member name="M:SolidFramework.License.GetUniqueMachineID">
            <summary>
            Gets the unique machine ID for this machine.
            </summary>
            <returns>
            The unique machine ID for this machine.
            </returns>
        </member>
        <member name="M:SolidFramework.License.RequiresCloudImport">
            <summary>
            Gets whether this machine needs to use CloudImport.
            </summary>
            <returns>
            Whether this machine needs to use CloudImport.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Create(System.String)">
            <summary> Creates a <see cref="T:SolidFramework.Model.CoreModel"/> object based on the file that is located at <paramref name= "path" />. </summary>
            <param name="path">The path.</param>
            <remarks>Check the <see cref = "P:SolidFramework.Model.CoreModel.ConversionStatus"/> property of the returned object to ensure that conversion was successful.</remarks>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Create(System.String,System.Boolean)">
            <summary> Creates a <see cref="T:SolidFramework.Model.CoreModel"/> object based on the file that is located at <paramref name= "path" />. </summary>
            <param name="path">The path.</param>
            <param name="noRepairing">If true then no attempt is made to repair an invalid pdf file.</param>
            <remarks>Check the <see cref = "P:SolidFramework.Model.CoreModel.ConversionStatus"/> property of the returned object to ensure that conversion was successful.</remarks>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Create(System.String,SolidFramework.Model.PdfOptions)">
            <summary> Creates a <see cref="T:SolidFramework.Model.CoreModel"/> object based on the file that is located at <paramref name= "path" />. </summary>
            <param name="path">The path.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Create(System.String,SolidFramework.Model.PdfOptions,System.Boolean)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="options">The options.</param>
            <param name="readOnly">Read only access.</param>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Create(System.String,SolidFramework.Model.PdfOptions,System.Boolean,System.Boolean)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="options">The options.</param>
            <param name="readOnly">Read only access.</param>
            <param name="noRepairing">If <c>true</c> then no attempt will be made to repair a corrupt PDF file.</param>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.GetLayout">
            <summary>
            Gets the LayoutDocument for the model. This will be <c>null</c> unless the CoreModel was created with PdfOptions.ExposeTargetDocumentPagination set to true.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.Layout.LayoutDocument"/> object that contains the layout information for each item in the model.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.GetPageWasOCRd(System.Int32)">
            <summary>
            True if for the page OCR is performed.
            </summary>
            <value>
            Page was OCRd.
            </value>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.GetPageWasAutoRotated(System.Int32)">
            <summary>
            Indicates if the page was auto rotated.
            </summary>
            <value>
            Angle of the page auto rotation. 0 means "Was not auto rotated"
            </value>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Export(System.String)">
            <summary>
            Exports the contents of the Model as an Excel, PowerPoint or Word Document at the location specified in <paramref name="path" />. Fails if the destination file already exists.
            </summary>
            <param name="path">The path where the model should be exported.</param>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Export(System.String,System.Boolean)">
            <summary>
            Exports the contents of the Model as an Excel, PowerPoint or Word Document at the location specified in <paramref name="path" />.
            </summary>
            <param name="path">The path where the model should be exported.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Export(System.String,SolidFramework.Model.Export.ExportOptions)">
            <summary>
            Exports the contents of the Model to the location specified in <paramref name="path" />.
            </summary>
            <param name="path">The path where the model should be exported.</param>
            <param name="options">A <see cref="T:SolidFramework.Model.Export.ExportOptions" /> object specifying how the model should be exported.</param>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.Hyperlinks">
            <summary>
            Gets the hyperlinks present in the PDF document.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.HyperlinksCollection"/> containing the hyperlinks present in the PDF document.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.Bookmarks">
            <summary>
            Gets the bookmarks present in the PDF document.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.BookmarksCollection"/> containing the bookmarks present in the PDF document.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.Fonts">
            <summary>
            Get the fonts.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.FontsCollection"/> containing the fonts present in the PDF document.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.DefaultStyleTemplate">
            <summary>
            Get the default paragraph style template.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.Plumbing.ParagraphStyleTemplate"/> that describes the default paragraph style template.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.DefaultSection">
            <summary>
            Get the default section.
            </summary>
            <returns>
            The first <see cref="T:SolidFramework.Model.Plumbing.Section"/> in the PDF document.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.StyleTemplates">
            <summary>
            Get the paragraph style templates.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.StyleTemplatesCollection"/> that contains the paragraph style templates used in the PDF document.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.Lists">
            <summary>
            Get the lists.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.ListsCollection"/> that contains the lists used in the PDF document.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.Topic">
            <summary>
            Get the topic of the PDF document.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.CoreModel.Topic"/> that contains the topic of the PDF document.
            </returns>
            <remarks>A topic is a collection of sections.</remarks>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.Close">
            <summary>
            Closes the model. Use the method to disposing native data, when application is about to be closed, for example.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.CoreModel.WrapNativeModel(System.IntPtr)">
            <summary>
            Creates a <see cref="T:SolidFramework.Model.CoreModel"/> object from a native model handle.
            </summary>
            <param name="nativeModel">The native model to wrap.</param>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.ConversionStatus">
            <summary>
            Gets the conversion status.
            </summary>
            <value>
            The conversion status.
            </value>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
            <value>
            The number of pages.
            </value>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.WasOCRd">
            <summary>
            True if at least for one document page OCR is performed.
            </summary>
            <value>
            Document was OCRd.
            </value>
        </member>
        <member name="P:SolidFramework.Model.CoreModel.WasAutoRotated">
            <summary>
            True if at least one document page was auto rotated.
            </summary>
            <value>
            Document page/s was auto rotated.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Export.ExportOptions">
            <summary>
            Specifies options for exporting the document.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Export.ExportOptions.CheckLicense">
            <summary>
            Checks the license.
            </summary>
            <exception cref="T:System.InvalidOperationException"> occurs if the license is not valid.</exception>
        </member>
        <member name="P:SolidFramework.Model.Export.ExportOptions.OverwriteMode">
            <summary>
            Get or sets whether to overwrite an existing output file.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Export.HtmlOptions.WidthLimit">
            <summary>
            Get maximum width for HTML file images.
            </summary>
            <remarks>
            Default is 0, which indicates not to resize the image width.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Export.HtmlOptions.DetectLists">
            <summary>
            Get whether to detect lists.
            </summary>
            <remarks>
            DetectLists is ignored with HtmlSplitting options.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Export.HtmlOptions.Images">
            <summary>
            Get or set the how images are handled during conversion.
            </summary>
            <remarks>
            The default is <c>SolidFramework.Converters.Plumbing.HtmlImages.Default</c>, which
            indicates including linked images into output HTML file.
            </remarks>
            <seealso cref="T:SolidFramework.Converters.Plumbing.HtmlImages"/>
        </member>
        <member name="P:SolidFramework.Model.Export.HtmlOptions.ImageType">
            <summary>
            Get the format of the image you are converting i.e bmp for Bitmap etc.
            </summary>
            <remarks>
            The image file type that will be used in images converted from the document.
            Default is <c>SolidFramework.Converters.Plumbing.ImageDocumentType.Default</c>, which will
            choose the most appropriate format for each image.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Export.HtmlOptions.HtmlNavigationType">
            <summary>
            Gets the type of the word document.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Export.TxtOptions.Encoding">
            <summary>
            Get the character set encoding used for the output text document.
            </summary>
            <remarks>
            Integer representing Windows Code Page. i.e. 65001 for UTF-8 Unicode, or 1252 for Latin, etc.
            Default is 65001 for UTF-8 Unicode.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Export.TxtOptions.LineLength">
            <summary>
             Get the maximum number of characters to display in each line of your text document.  Example:  <c>textConverter.LineLength = 80;</c>.
            </summary>
            <remarks>
            Specify the maximum number of characters to display in each line of your text output document.
            Default value is 100.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Export.TxtOptions.LineTerminator">
            <summary>
            Get the line terminator.
            </summary>
            <remarks>
            What will be used as a line terminator in the output text file.
            Default is <c>SolidFramework.Converters.Plumbing.LineTerminator.Platform</c>.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Export.WordOptions.WordDocumentType">
            <summary>
            Gets the type of the word document.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Export.WordOptions.TargetWordFormat">
            <summary>
            Get a <see cref="E:TargetWordFormat" /> that specifies Target MS Word File Format Version. Default is <c>TargetWordFormat.Automatic</c>.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutChunk">
            <summary>
            Represents a chunk of text as loaded from the PDF
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunk.Text">
            <summary>
            Gets the text.
            </summary>
            <returns>
            The text.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunk.Bounds">
            <summary>
            Gets the bounds of the chunk.
            </summary>
            <returns>
            A <see cref = "T:SolidFramework.Interop.RectangleF" /> that describes the bounds of the chunk.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutChunkLine">
            <summary>
            Represents a line of text chunks that were loaded from the PDF
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLine.Bounds">
            <summary>
            Gets the bounds of the line.
            </summary>
            <returns>
            A <see cref = "T:SolidFramework.Interop.RectangleF" /> that describes the bounds of the line.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLine.GetChunks">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Layout.LayoutChunk" /> objects that are in the LayoutChunkLine.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLine.Count">
            <summary>
            Gets the number of <see cref="T:SolidFramework.Model.Layout.LayoutChunk" /> objects that are in the LayoutChunkLine.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Layout.LayoutChunkLine at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Layout.LayoutChunkLine at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.CopyTo(SolidFramework.Model.Layout.LayoutChunkLine[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.CopyTo(SolidFramework.Model.Layout.LayoutChunkLine[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.CopyTo(System.Int32,SolidFramework.Model.Layout.LayoutChunkLine[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator.#ctor(SolidFramework.Model.Layout.LayoutChunkLinesCollection)">
            <summary>
            Creates a new instance of the LayoutChunkLinesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Layout.LayoutChunkLine element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkLinesCollection.LayoutChunkLinesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutChunkParagraph">
            <summary>
            Represents a paragraph of text chunks that were loaded from the PDF
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkParagraph.Bounds">
            <summary>
            Gets the bounds of the paragraph.
            </summary>
            <returns>
            A <see cref = "T:SolidFramework.Interop.RectangleF" /> that describes the bounds of the paragraph.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkParagraph.GetLines">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Layout.LayoutChunkLine"/> objects that are in the LayoutChunkParagraph.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunkParagraph.GetChunkParagraph(SolidFramework.Model.Plumbing.Paragraph)">
            <summary>
            Gets the LayoutChunkParagraph for a specific paragraph. This will return null if the CoreModel was not created with PdfOptions.ExposeSourceDocumentPagination set to true.
            </summary>
            <param name="paragraph">The paragraph to get the LayoutChunkParagraph.</param>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkParagraph.Count">
            <summary>
            Gets the number of <see cref="T:SolidFramework.Model.Layout.LayoutChunkLine" /> objects that are in the LayoutChunkParagraph.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkParagraph.PageNumber">
            <summary>
            Gets the page number this LayoutChunkParagraph started on in the PDF.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunkParagraph.Rotation">
            <summary>
            Gets the rotation of the paragraph and its chunks.
            </summary>
            <returns>
            The rotation of the paragraph and its chunks.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Layout.LayoutChunk at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Layout.LayoutChunk at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.CopyTo(SolidFramework.Model.Layout.LayoutChunk[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.CopyTo(SolidFramework.Model.Layout.LayoutChunk[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.CopyTo(System.Int32,SolidFramework.Model.Layout.LayoutChunk[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator.#ctor(SolidFramework.Model.Layout.LayoutChunksCollection)">
            <summary>
            Creates a new instance of the LayoutChunksCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Layout.LayoutChunk element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutChunksCollection.LayoutChunksCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutDocument">
            <summary>
            Contains information about the location of objects within the document.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutDocument.GetLayoutObjects">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Layout.LayoutObject"/> within the document.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutDocument.FindLayoutObject(System.Int32)">
            <summary>
            Finds the <see cref="T:SolidFramework.Model.Layout.LayoutObject"/> that represents the <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/>  which has the specified ID.
            </summary>
            <param name = "val">ID of the SolidObject that is being searched for.</param>
            A <see cref="T:SolidFramework.Model.Layout.LayoutObject"/> object that contains the layout information for the <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> 
            which has the specified ID, or null if <c>val</c> did not match any <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/>.
            Note: If val is the ID of a TextBox or its contents and the TextBox is located within an inline-shape, then <c>null</c> will be returned. 
            <returns>The LayoutObject with the asssociated ID, or null if no match is found.</returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutDocument.Count">
            <summary>
            Gets the number of <see cref="T:SolidFramework.Model.Layout.LayoutObject"/> within the document.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutGraphic">
            <summary>
            Provides access to the layout information for a graphic in a PDF document.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutGraphic.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutGraphic.Size">
            <summary>
            Gets the Size of the LayoutGraphic.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutGraphic.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutGraphic.GetID">
            <summary>
            Gets the ID of the <see cref="T:SolidFramework.Model.Plumbing.Graphic"/> object that this object refers to.
            </summary>
            <returns>
            The ID of the <see cref="T:SolidFramework.Model.Plumbing.Graphic"/> that this object contains layout information for, or <c>nullptr</c> if the one does not exist.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutGroup.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutGroup.Size">
            <summary>
            Gets the Size of the LayoutImage.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutImage.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutGroup.GetID">
            <summary>
            Gets the ID of the <see cref="T:SolidFramework.Model.Plumbing.Group"/> object that this object refers to.
            </summary>
            <returns>
            The ID of the <see cref="T:SolidFramework.Model.Plumbing.Group"/> that this object contains layout information for, or <c>nullptr</c> if the group does not exist.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutGroup.GetLayoutObjects">
            <summary>
            Gets the collection of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the group.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutGroup.Count">
            <summary>
            Gets the number of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the group.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutImage">
            <summary>
            Provides access to the layout information for an image in a PDF document.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutImage.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutImage.Size">
            <summary>
            Gets the Size of the LayoutImage.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutImage.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutImage.GetID">
            <summary>
            Gets the ID of the <see cref="T:SolidFramework.Model.Plumbing.ImageShape"/> object that this object refers to.
            </summary>
            <returns>
            The ID of the <see cref="T:SolidFramework.Model.Plumbing.ImageShape"/> that this object contains layout information for, or <c>nullptr</c> if one does not exist.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutObject">
            <summary>
            Abstract base class for all objects that contain layout information for items in a PDF document
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObject.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "T:SolidFramework.Interop.Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObject.Size">
            <summary>
            Gets the Size of the LayoutPage.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Interop.SizeF"/> that describes the size of the LayoutPage.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObject.GetID">
            <summary> This function always returns zero. </summary>
            <returns> 0 </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObject.Bounds">
            <summary>
            Gets the transformed bounds of the object.
            </summary>
            <returns>
            A <see cref = "T:SolidFramework.Interop.RectangleF" /> that describes the bounds of the object.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObject.GetPageNumber">
            <summary>
            Gets the page number this object appears on (starting at 1) or -1 if it couldn't find the page
            </summary>
            <returns>
            The page number this appears on.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Layout.LayoutObject at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Layout.LayoutObject at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.CopyTo(SolidFramework.Model.Layout.LayoutObject[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.CopyTo(SolidFramework.Model.Layout.LayoutObject[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.CopyTo(System.Int32,SolidFramework.Model.Layout.LayoutObject[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator.#ctor(SolidFramework.Model.Layout.LayoutObjectsCollection)">
            <summary>
            Creates a new instance of the LayoutObjectsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Layout.LayoutObject element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutObjectsCollection.LayoutObjectsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Page">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Image">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Table">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Group">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Graphic">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.TextBox">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Paragraph">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.ParagraphLine">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.ParagraphWord">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.ParagraphListItem">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Layout.LayoutObjectType.Object">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutPage">
            <summary>
            Provides access to the layout information for a page of a PDF document.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutPage.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutPage.Size">
            <summary>
            Gets the Size of the LayoutPage.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutPage.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutPage.GetID">
            <summary> This function always returns zero. </summary>
            <returns> 0 </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutPage.GetLayoutObjects">
            <summary>
            Gets the collection of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the page.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutPage.Count">
            <summary>
            Gets the number of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the page.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraph.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraph.Size">
            <summary> Gets the Size of the LayoutParagraph. </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutParagraph.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutParagraph.GetID">
            <summary>
            Gets the ID of the Paragraph object that this object refers to.
            </summary>
            <returns>
            The ID of the <see cref="T:SolidFramework.Model.Plumbing.Paragraph"/> that this object contains layout information for.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraph.ChunkLines">
            <summary>
            Gets the PDF chunk locations for this paragraph grouped together into lines. This will be empty unless the CoreModel was created with PdfOptions.ExposeSourceDocumentPagination set to true.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraph.AllText">
            <summary>
            Gets all of the text associated with the paragraph that this object contains layout information for.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutParagraph.GetLayoutObjects">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Layout.LayoutParagraphLine" /> objects that are contained within the paragraph.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraph.Count">
            <summary>
            Gets the number of LayoutParagraphLine objects that are contained within the paragraph.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraph.Rotation">
            <summary>
            Gets the rotation of the paragraph.
            </summary>
            <returns>
            The rotation of the paragraph.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutParagraphLine">
            <summary>
            Represents a single line within the document, and provides access to the layout information for that line.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphLine.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphLine.Size">
            <summary>
            Gets the Size of the LayoutParagraphLine.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutParagraphLine.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutParagraphLine.GetID">
            <summary> This function always returns zero. </summary>
            <returns> 0 </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphLine.AllText">
            <summary> Gets all of the text associated with the paragraph that this object contains layout information for.</summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutParagraphLine.GetLayoutObjects">
            <summary> Gets the collection of <see cref="T:SolidFramework.Model.Layout.LayoutParagraphWord"/>  objects that are contained within the line. </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphLine.Count">
            <summary> Gets the number of <see cref="T:SolidFramework.Model.Layout.LayoutParagraphWord"/> objects that are contained within the line.</summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutParagraphListItem">
            <summary>
            Represents a single word within the document, and provides access to the layout information for that word.
            NOTE: a <see cref="T:SolidFramework.Model.Layout.LayoutParagraphWord"/> does not map directly to a <see cref = "T:SolidFramework.Model.Plumbing.Run"/>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphListItem.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "T:SolidFramework.Interop.Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphListItem.Size">
            <summary>
            Gets the Size of the LayoutParagraphWord.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Interop.SizeF"/> that describes the size of the LayoutParagraphWord.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphListItem.Bounds">
            <summary>
            Gets the bounds on page.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphListItem.Text">
            <summary>
            Gets the text that this layout object represents.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutParagraphWord">
            <summary>
            Represents a single word within the document, and provides access to the layout information for that word.
            NOTE: a <see cref="T:SolidFramework.Model.Layout.LayoutParagraphWord"/> does not map directly to a <see cref = "T:SolidFramework.Model.Plumbing.Run"/>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphWord.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphWord.Size">
            <summary>
            Gets the Size of the LayoutParagraphWord.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutParagraphWord.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphWord.Bounds">
            <summary>
            Gets the bounds on page.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutParagraphWord.GetID">
            <summary> This function always returns zero. </summary>
            <returns> 0 </returns>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutParagraphWord.Text">
            <summary>
            Gets the text that this layout object represents.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutTable">
            <summary>
            Represents a table within the document, and provides access to the layout information for that table.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutTable.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutTable.Size">
            <summary>
            Gets the Size of the LayoutTable.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutParagraphWord.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutTable.GetID">
            <summary>
            Gets the ID of the Table object that this object refers to.
            </summary>
            <returns>
            The ID of the <see cref="T:SolidFramework.Model.Plumbing.Table"/> that this object contains layout information for, or <c>nullptr</c> if the table does not exist.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutTable.GetLayoutObjects">
            <summary>
            Gets the collection of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the table.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutTable.Count">
            <summary>
            Gets the number of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the table.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Layout.LayoutTextBox">
            <summary>
            Represents a textbox within the document, and provides access to the layout information for that textbox.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutTextBox.Transform">
            <summary>
            Gets the transformation matrix.
            </summary>
            <value>
            A <see cref = "!:Matrix"/> that specifies the transform.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutTextBox.Size">
            <summary>
            Gets the Size of the LayoutTextBox.
            </summary>
            <returns>
            A <see cref="!:SizeF"/> that describes the size of the LayoutTextBox.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutTextBox.GetID">
            <summary>
            Gets the ID of the <see cref="T:SolidFramework.Model.Plumbing.TextBox"/> object that this object refers to.
            </summary>
            <returns>
            The ID of the <see cref="T:SolidFramework.Model.Plumbing.TextBox"/> that this object contains layout information for, or <c>nullptr</c> if one does not exist.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Layout.LayoutTextBox.GetLayoutObjects">
            <summary>
            Gets the collection of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the table.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Layout.LayoutTextBox.Count">
            <summary>
            Gets the number of <see cref = "T:SolidFramework.Model.Layout.LayoutObject" /> objects that are contained within the table.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.ListsCollection">
            <summary>
            Provides access to the individual items that are available in the document.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.PdfOptions">
            <summary>
             Specifies values to be used when importing a Pdf file.
            </summary>
        </member>
        <member name="E:SolidFramework.Model.PdfOptions.Progress">
            <summary>
            Triggered when progress occurs during CoreModel creation or while exporting.
            </summary>
            <remarks>
            ProgressEventArgs contains the amount of progress, the maximum amount of progress, a status code, a description, plus optional custom data.
            </remarks>
        </member>
        <member name="E:SolidFramework.Model.PdfOptions.Warning">
            <summary>
            Triggered when a warning is raised during CoreModel creation or while exporting.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.CustomData">
            <summary>
            Custom data to provide during Progress events
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.Password">
            <summary>
            Gets or sets the password for the Pdf file.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TextRecoveryLanguage">
            <summary>
            Gets or sets the text recovery language. Default is an empty string.
            </summary>
            <value>
            The text recovery language.
            </value>
            <remarks> Format for each language is as follows:
            "es" for Spanish 
            "de" for German
            "it" for Italian
            "pl" for Polish
            "pt" for Portugeuse
            "ru" for Russian
            "fr" for French
            "nl" for Dutch
            "en" for English           
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.PageRange">
            <summary>
            Gets or sets a PageRange that defines which pages are to be converted. <c>Null</c> means convert all pages. 
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.SelectedAreas">
            <summary>
            Gets or sets the selected areas. The default is <c>null</c>.
            </summary>
            <value>
            The selected areas.
            </value>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.AutoDetectSeparators">
            <summary>
            Gets or sets whether to attempt to automatically detect decimal and thousands separators, based on the content of the PDF being converted. Default is <c>true</c>.
            </summary>
            <returns>A Boolean that indicates whether separators should be detected.</returns>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.DetectTiledPages">
            <summary>
            Attempt to automatically detect tables tiled across multiple pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TablesFromContent">
            <summary>
            Deprecated alias for <c>KeepNonTableContent</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.KeepNonTableContent">
            <summary>
            Gets or sets whether to include non-table content such as images or text when using <c>ConvertMode.Tables</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.PreserveColumnsInNonTableContent">
            <summary>
            Gets or sets whether to place non-table content that is detected within columns in the PDF into separate columns when using <c>ConvertMode.Tables</c>. 
            If true then non-table content that is detected will be placed into separate columns. If false then such content will all be placed into the first column.
            If KeepNonTableContent is false then no non-table content will be included in the reconstructed file and this option will have no meaning.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.ReconstructionMode">
            <summary>
            Get or sets a <see cref="E:SolidFramework::Converters::Plumbing::ReconstructionMode"/> that specifies the file reconstruction mode. The default is <c>ReconstructionMode.Flowing</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.ExcelTablesOnSheet">
            <summary>
            Get or sets a <see cref="E:ExcelTablesOnSheet" /> that specifies how tables should be handled when exporting to Excel. Default is <c>ExcelTablesOnSheet.PlaceEachTableOnOwnSheet</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TextRecovery">
            <summary>
            Get or sets a <see cref="E:TextRecovery" /> that specifies when OCR is used. Default is <c>TextRecovery.Automatic</c>.
            Warning: setting this value to <c>TextRecovery.Always</c> will casue OCR to occur even on non-scanned Pdf files.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TextRecoveryNSE">
            <summary>
            Get or sets a <see cref="E:TextRecoveryNSE" /> that specifies whether OCR is used for characters with non-standard encoding. Default is <c>TextRecoveryNSE.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.ConvertMode">
            <summary>
            Get or sets a <see cref="E:ConvertMode" /> that specifies whether the document, or just images, or just tables should be converted . Default is <c>ConvertMode.Document</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TextRecoveryEngine">
            <summary>
            Get or sets a <see cref="E:TextRecoveryEngine" /> that specifies the text recovery engine to be used for OCR. Default is <c>TextRecoveryEngine.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TextRecoveryEngineNse">
            <summary>
            Get or sets a <see cref="E:TextRecoveryEngineNse" /> that specifies the text recovery engine to be used for OCR when dealing with non-standard encoding. 
            Default is <c>TextRecoveryEngineNse.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.HeaderAndFooterMode">
            <summary>
            Get or sets a <see cref="E:HeaderAndFooterMode" /> that specifies the header and footer mode. Default is <c>HeaderAndFooterMode.Detect</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.FootnotesMode">
            <summary>
            Get or sets a <see cref="E:FootnotesMode" /> that specifies the footnotes mode. Default is <c>FootnotesMode.Ignore</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.DecimalSeparator">
            <summary>
            Gets the decimal separator.
            </summary>
            <value>
            The decimal separator.
            </value>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.ThousandsSeparator">
            <summary>
            Gets the thousands separator.
            </summary>
            <value>
            The thousands separator.
            </value>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.MarkupAnnotConversionType">
            <summary>
            Gets or sets a <see cref="E:MarkupAnnotConversionType" /> that specifies the markup annotation mode. Default is <c>MarkupAnnotConversionType.TextBox</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.AverageCharacterScaling">
            <summary>
            Get or sets whether the spacing between characters should be set as to their average size. 
            This is required because fonts in PDF and docx are different and therefore the same Unicode characters 
            have different character widths in PDF and docx. This value must be set to true if the generated docx file 
            is to look the same as the PDF file. Setting the value to true will also result in the creation of fewer, but 
            larger "Run" objects.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.AutoRotate">
            <summary>
            Gets or sets whether to automatically rotate pages based on the orientation of the text on the pages. Default is <c>true</c>.
            </summary>
            <remarks>If a page in the PDF file is set to landscape, and all text is flowing up and down, automatically rotate the page to portrait.</remarks>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.GraphicsAsImages">
            <summary>
            Gets or sets whether vector images should be converted to bitmap images. Default is <c>false</c>.
            </summary>
            <value>
              If <c>true</c> then vector images will be converted to bitmap images; otherwise they will be retained as vector images.
            </value>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.KeepBackgroundColorText">
            <summary>
            Gets or sets whether the background color of text should be retained. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.KeepInvisibleText">
            <summary>
            Gets or sets whether invisible text should be kept. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.DetectLanguage">
            <summary>
            Gets or sets whether the document language should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.DetectLists">
            <summary>
            Gets or sets whether lists should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.KeepLineBreaks">
            <summary>
            Gets or sets whether line breaks should be preserved in the content. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.DetectToc">
            <summary>
            Gets or sets whether Table of Contents should be detected from the document content. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.DetectSoftHyphens">
            <summary>
            Gets or sets whether soft-hyphens should be detected. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.ExposeTargetDocumentPagination">
            <summary>
            Gets or sets a value indicating whether document pagination should be exposed. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.ExposeSourceDocumentPagination">
            <summary>
            Gets or sets a value indicating whether source document pagination should be exposed. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.PdfOptions.TransformPrivateUnicode">
            <summary>
            Gets or sets a value indicating whether to transform characters in Unicode Private Use area to true Unicode equivalents.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ImagePageHolder">
            <summary>
            Represents image page holder.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHolder.GenerateThumbnail">
            <summary>
            Generates the thumbnail.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHolder.Rotation">
            <summary>
            Gets or sets the angle by which the <see cref="T:SolidFramework.Model.Pdf.Pages.IPageHolder" /> is rotated.
            </summary>
            <returns>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHolder.Path">
            <summary>
            Gets the path to the image.
            </summary>
            <value>
            The path  to the image.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.ImagePageHolder at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.ImagePageHolder at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.CopyTo(SolidFramework.Model.Pdf.Pages.ImagePageHolder[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.CopyTo(SolidFramework.Model.Pdf.Pages.ImagePageHolder[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.ImagePageHolder[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection)">
            <summary>
            Creates a new instance of the ImagePageHoldersCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.ImagePageHolder element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageHoldersCollection.ImagePageHoldersCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ImagePageSource">
            <summary>
            Represents image page source.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.ImagePageSource at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.ImagePageSource at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.CopyTo(SolidFramework.Model.Pdf.Pages.ImagePageSource[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.CopyTo(SolidFramework.Model.Pdf.Pages.ImagePageSource[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.ImagePageSource[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection)">
            <summary>
            Creates a new instance of the ImagePageSourcesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.ImagePageSource element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ImagePageSourcesCollection.ImagePageSourcesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.IntParameter">
            <summary>
            Operation that allows deletion of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IntParameter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.IntParameter" /> class.
            </summary>
            <param name="value">The model.</param>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.IPageHolder">
            <summary>
            Abstract interface that represents a single page within the PDF document. Concrete implementations are PdfPageHolder and ImagePageHolder.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHolder.GenerateThumbnail">
            <summary>
            Generates the thumbnail.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHolder.Clone">
            <summary>
            Clones this instance. This is only implemented in derived classes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.Rotation">
            <summary>
            Gets or sets the angle by which the <see cref="T:SolidFramework.Model.Pdf.Pages.IPageHolder" /> is rotated.
            </summary>
            <returns>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.Thumbnail">
            <summary>
            Gets the thumbnail.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Interop.Bitmap"/> containing the thumbnail.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.Size">
            <summary>
            Gets the size of the object in points.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Interop.SizeF" /> that is the page size in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.Width">
            <summary>
            Gets the rotated Width.
            </summary>
            <returns>
            The page rotated width in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.Height">
            <summary>
            Gets the rotated Height.
            </summary>
            <returns>
            The page rotated height in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.CurrentIndex">
            <summary>
            Gets the index of the current object.
            </summary>
            <returns>
            The index of the current.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.Visible">
            <summary>
            Gets or sets whether this <see cref="T:SolidFramework.Model.Pdf.Pages.IPageHolder" /> is visible.
            </summary>
            <returns>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.TargetID">
            <summary>
            Gets or sets the target ID.
            </summary>
            <returns>
            The target ID.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHolder.ThumbnailGenerated">
            <summary>
            Gets a value indicating whether thumbnail generated.
            </summary>
            <returns>
              <c>true</c> if thumbnail generated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.IPageHolder at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.IPageHolder at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.CopyTo(SolidFramework.Model.Pdf.Pages.IPageHolder[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.CopyTo(SolidFramework.Model.Pdf.Pages.IPageHolder[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.IPageHolder[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.IPageHoldersCollection)">
            <summary>
            Creates a new instance of the IPageHoldersCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.IPageHolder element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageHoldersCollection.IPageHoldersCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.IPageSource at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.IPageSource at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.CopyTo(SolidFramework.Model.Pdf.Pages.IPageSource[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.CopyTo(SolidFramework.Model.Pdf.Pages.IPageSource[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.IPageSource[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.IPageSourcesCollection)">
            <summary>
            Creates a new instance of the IPageSourcesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.IPageSource element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.IPageSourcesCollection.IPageSourcesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.OfferPasswordEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.OfferPasswordEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.OfferPasswordEventArgs.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.OfferPasswordEventArgs" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.OfferPasswordEventArgs.Path">
            <summary>
            Gets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.AddComment">
            <summary>
            Operation that allows addition of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.AddComment.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.AddComment</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.AddComment.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.AddComment.Name">
            <summary>
            Gets the name of the current operation.
            </summary>
            <remarks>
            This property aways returns "AddComment".
            </remarks>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.AddCommentParameter">
            <summary>
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.AddCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.IPageHolder,SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType,SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.AddCommentParameter" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.AddCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.AddCommentParameter" /> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.DeleteComment">
            <summary>
            Operation that allows deletion of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.DeleteComment.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.DeleteComment</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.DeleteComment.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.DeleteComment.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "DeleteComment"
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.DeleteCommentParameter">
            <summary>
            Operation that allows deletion of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.DeleteCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.Comment)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.DeleteCommentParameter" /> class.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.InsertParameter">
            <summary>
            Operation that allows deletion of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.InsertParameter.#ctor(System.Int32,SolidFramework.Model.Pdf.Pages.IPageSource)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.InsertParameter" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.InsertParameter.#ctor(System.Int32,SolidFramework.Model.Pdf.Pages.IPageSourcesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.InsertParameter" /> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.ModifyComment">
            <summary>
            Operation that allows modification of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.ModifyComment.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.ModifyComment</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.ModifyComment.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.ModifyComment.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "ModifyComment"
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter">
            <summary>
            Operation that allows deletion of an annotation within the PagesModel.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter" /> class.
            </summary>
            <param name="modifiedComment">The comment object.</param>
            <param name="position">The position of the comment.</param>
            <param name="title">The title of the comment.</param>
            <param name="content">The content of the comment.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,SolidFramework.Interop.PointFsCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter" /> class.
            </summary>
            <param name="modifiedComment">The comment object.</param>
            <param name="position">The position of the comment.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter" /> class.
            </summary>
            <param name="modifiedComment">The comment object.</param>
            <param name="color">The color of the comment.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Operations.ModifyCommentParameter" /> class.
            </summary>
            <param name="modifiedComment">The comment object.</param>
            <param name="title">The title of the comment.</param>
            <param name="content">The content of the comment.</param>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Copy">
            <summary>
            Represents copy.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Copy.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.Copy</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Copy.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <returns>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Copy.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Copy".
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Delete">
            <summary>
            Operation that allows deletion of pages within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Delete.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.Delete</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Delete.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Delete.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Delete"
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Insert">
            <summary>
            Represents insert.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Insert.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.Insert</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Insert.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Insert.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Insert".
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Move">
            <summary>
            Operation that allows moving of pages within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Move.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            This always returns <c>ModelOperation.Move</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Move.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Move.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Move".
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Redo">
            <summary>
            Operation that allows redoing of an operation that was undone within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Redo.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.Redo</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Redo.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Redo.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Redo"
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Rotate">
            <summary>
            Operation that allows rotation of pages within the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Rotate.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.Rotate</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Rotate.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Rotate.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Rotate".
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operations.Undo">
            <summary>
            Operation that allows undoing an operation that has been executed on the PagesModel.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Undo.ModelOperation">
            <summary>
            Gets the type model operation.
            </summary>
            <value>
            Thhis always returns <c>ModelOperation.Undo</c>.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Undo.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operations.Undo.Name">
            <summary>
            Gets the name of the operation.
            </summary>
            <value>
            This always returns "Undo".
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PageHolderType.IPageHolder">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PageHolderType.PdfPageHolder">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PageHolderType.ImagePageHolder">
            <summary></summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.PageSelection at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.PageSelection at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.PageSelection[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.PageSelection[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.PageSelection[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.PageSelectionsCollection)">
            <summary>
            Creates a new instance of the PageSelectionsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.PageSelection element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelectionsCollection.PageSelectionsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.GetThumbnailDpi">
            <summary>
            Gets the thumbnail dpi.
            </summary>
            <value>
            The thumbnail dpi.
            </value>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.SetThumbnailDpi(System.Int32)">
            <summary>
            Sets the thumbnail dpi.
            </summary>
            <value>
            The thumbnail dpi.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.PopupTitle">
            <summary>
            Gets the popup title.
            </summary>
            <value>
            The popup title.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.Producer">
            <summary>
            Gets the producer.
            </summary>
            <value>
            The popup title.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.OriginalPath">
            <summary>
            Gets the original path.
            </summary>
            <value>
            The original path.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.ReadOnlyInfo">
            <summary>
            Gets the read only info.
            </summary>
            <value>
            The read only info.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.InitialView">
            <summary>
            Gets the initial view.
            </summary>
            <value>
            The initial view.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.SetInstance(System.Int32)">
            <summary>
            Sets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.GetFonts">
            <summary>
            Gets the fonts used in this model (all PDF sources). Fonts from deleted pages will still be listed.
            </summary>
            <returns>
            The fonts.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
            <value>
            The undo stack.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
            <value>
            The redo stack.
            </value>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.GetOperation(SolidFramework.Model.Pdf.Pages.ModelOperation)">
            <summary>
            Gets the operation.
            </summary>
            <param name="modelOperation">The model operation.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.PageSelections">
            <summary>
            Gets the page selections.
            </summary>
            <value>
            The page selections.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.Selection">
            <summary>
            Gets the selection.
            </summary>
            <value>
            The selection.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.SelectedPageRange">
            <summary>
            Gets the selected page range.
            </summary>
            <value>
            The selected page range.
            </value>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModelBase.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.PageCount">
            <summary>
            Gets pages count.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.CurrentPage">
            <summary>
            Gets the current page.
            </summary>
            <value>
            The current page.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.ProgressFraction">
            <summary>
            Gets the progress fraction.
            </summary>
            <value>
            The progress fraction.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.Modified">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.PagesModel" /> is modified.
            </summary>
            <value>
              <c>true</c> if modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.ReadOnly">
            <summary>
            Gets a value indicating whether read only.
            </summary>
            <value>
              <c>true</c> if read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.IsUntitled">
            <summary>
            Gets a value indicating whether this instance is untitled.
            </summary>
            <value>
            <c>true</c> if this instance is untitled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.UndoDisabled">
            <summary>
            Gets the undo disabled.
            </summary>
            <value>
            The undo disabled.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.EmptyModelAllowed">
            <summary>
            Gets a value indicating whether empty model allowed.
            </summary>
            <value>
              <c>true</c> if empty model allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModelBase.RepairIssue">
            <summary>
            The type of repair that took place in the event of repair of the PDF duing loading.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.IPageSource">
            <summary>
            Represents page holder interface.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ModelChangedEvent">
            <summary>
            Represents types of Model Changed Event.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelChangedEvent.Clear">
            <summary>Type of Model Changed Event is Clear. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelChangedEvent.Rotation">
            <summary>Type of Model Changed Event is Rotation. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelChangedEvent.StartImport">
            <summary>Type of Model Changed Event is Start Import. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelChangedEvent.EndImport">
            <summary>Type of Model Changed Event is End Import. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelChangedEvent.Reset">
            <summary>Type of Model Changed Event is Reset. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelChangedEvent.GenericChange">
            <summary>Type of Model Changed Event is GenericChange. </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs.#ctor(SolidFramework.Model.Pdf.Pages.ModelChangedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs" /> class.
            </summary>
            <param name="theEvent">The event.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs.#ctor(SolidFramework.Model.Pdf.Pages.ModelChangedEvent,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs" /> class.
            </summary>
            <param name="theEvent">The event.</param>
            <param name="customData">Custom data.</param>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs.Clear">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs" /> is clear.
            </summary>
            <value>
              <c>true</c> if clear; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs.Rotation">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs" /> is rotation.
            </summary>
            <value>
              <c>true</c> if rotation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs.Event">
            <summary>
            Gets the event.
            </summary>
            <value>
            The event.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ModelOperation">
            <summary>
            Represents types of Model Operation.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Undefined">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Undefined. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Insert">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Insert. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Move">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Move. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Copy">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Copy. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Rotate">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Rotate. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Delete">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Delete. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Undo">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Undo. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.Redo">
            <summary>Type of Model <see cref = "T:SolidFramework.Model.Pdf.Pages.Operation"/>  is Redo. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.AddComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.DeleteComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ModelOperation.ModifyComment">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Operation">
            <summary>
            Abstract class that represents an operation which can be performed to a page of a PdfDocument.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operation.ModelOperation">
            <summary>
            Gets the model operation.
            </summary>
            <value>
            The model operation.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operation.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Operation" /> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Operation.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operation.Execute">
            <summary>
            This method is not available for use in this class.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Operation.Execute(SolidFramework.Model.Pdf.Pages.Parameter)">
            <summary>
            This method is not available for use in this class.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs">
            <summary>
            Represents types of Pages Changed Event Args.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs.#ctor(SolidFramework.Model.Pdf.Pages.Operation,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs.Operation">
            <summary>
            Gets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PageSelection">
            <summary>
            Represents a selection that is part or all of a page.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PageSelection.#ctor(SolidFramework.Model.Pdf.Pages.IPageHolder,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.PageSelection" /> class.
            </summary>
            <param name="page">The page.</param>
            <param name="area">The area.</param>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelection.Area">
            <summary>
            Gets the area within the page that has been selected.
            </summary>
            <returns>
            The area within the page that has been selected.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PageSelection.Page">
            <summary>
            Gets the page that the selection is located on.
            </summary>
            <returns>
            The page that the selection is located on.
            </returns>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PageSourceType.IPageSource">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PageSourceType.PdfPageSource">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PageSourceType.ImagePageSource">
            <summary></summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.Parameter" /> class.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ParameterType.Undefined">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ParameterType.AddComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ParameterType.DeleteComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ParameterType.ModifyComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ParameterType.Insert">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ParameterType.Int">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs">
            <summary>
            Represents types of Password Entered Event Args.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs.#ctor(System.String,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PdfPageHolder">
            <summary>
            Represents a page in a PDF file. Supports page level operations.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.GenerateThumbnail">
            <summary>
            Generates a thumbnail for the page.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHolder.Rotation">
            <summary>
            Gets the original rotation of the page in degrees.
            </summary>
            <returns>
            The original rotation of the page in degrees.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHolder.PdfVisibleBox">
            <summary>
            Gets a rectangle defining the size and location of the PdfVisibleBox.
            </summary>
            <returns>
            A  rectangle defining the size and location of the PdfVisibleBox.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.AddHighlightComment(SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Adds a highlight comment to the PDF page.
            <param name = "location">The location of the comment. This consists of a PointFsCollection containing exactly 4 points representing the location of the  bottom-left, bottom-right, top-left and top-right of the comment.  </param>
            <param name = "color">The color of the comment.</param>
            <param name = "title">The title of the comment. By convention this should be the name of the person who made the change.</param>
            <param name = "content">The text that is to be associated with the comment.</param>
            </summary>
            <returns>
            The newly created comment object.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.AddStrikeOutComment(SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Adds a strikeout comment to the PDF page.
            <param name = "location">The location of the comment. This consists of a PointFsCollection containing exactly 4 points representing the location of the  bottom-left, bottom-right, top-left and top-right of the comment.  </param>
            <param name = "color">The color of the comment.</param>
            <param name = "title">The title of the comment. By convention this should be the name of the person who made the change.</param>
            <param name = "content">The text that is to be associated with the comment.</param>
            </summary>
            <returns>
            The newly created comment object.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.AddUnderlineComment(SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Adds an underline comment to the PDF page.
            <param name = "location">The location of the comment. This consists of a PointFsCollection containing exactly 4 points representing the location of the  bottom-left, bottom-right, top-left and top-right of the comment.  </param>
            <param name = "color">The color of the comment.</param>
            <param name = "title">The title of the comment. By convention this should be the name of the person who made the change.</param>
            <param name = "content">The text that is to be associated with the comment.</param>
            </summary>
            <returns>
            The newly created comment object.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.AddTextComment(SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Adds a text comment to the PDF page.
            <param name = "location">The location of the comment. This consists of a PointFsCollection containing exactly 4 points representing the location of the  bottom-left, bottom-right, top-left and top-right of the comment.  </param>
            <param name = "color">The color of the comment.</param>
            <param name = "title">The title of the comment. By convention this should be the name of the person who made the change.</param>
            <param name = "content">The text that is to be associated with the comment.</param>
            </summary>
            <returns>
            The newly created comment object.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.AddTextComment(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,System.String,System.String)">
            <summary>
            Adds a text comment to an existing comment.
            <param name = "parent">The existing comment to which the new comment should be attached.  </param>
            <param name = "title">The title of the comment. By convention this should be the name of the person who made the change.</param>
            <param name = "content">The text that is to be associated with the comment.</param>
            </summary>
            <returns>
            The newly created comment object.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.DeleteComment(SolidFramework.Model.Pdf.Pages.Plumbing.Comment)">
            <summary>
            Deletes an existing comment annotation on the PDF page.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHolder.ModifyComment(SolidFramework.Model.Pdf.Pages.Plumbing.Comment,SolidFramework.Interop.PointFsCollection,System.Drawing.Color,System.String,System.String)">
            <summary>
            Modifies an existing comment annotation on the PDF page.
            </summary>
            <param name = "comment">The comment that is to be modified.</param>
            <param name = "newLocation">The new location of the comment. This consists of a PointFsCollection containing exactly 4 points representing the location of the  bottom-left, bottom-right, top-left and top-right of the comment.  </param>
            <param name = "newColor">The new color of the comment.</param>
            <param name = "newTitle">The new title of the comment. By convention this should be the name of the person who made the change.</param>
            <param name = "newContent">The new text that is to be associated with the comment.</param>
            <returns>
            <c>true</c> if the comment was successfully modified; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHolder.LinkCount">
            <summary>
            Gets the number of link annotations on the PDF page.
            </summary>
            <returns>
            The number of link annotations on the PDF page.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHolder.CommentCount">
            <summary>
            Gets the number of comment annotations on the PDF page.
            </summary>
            <returns>
            The number of comment annotations on the PDF page. This is the total number of highlight, underline, strikeout and text annotations.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.PdfPageHolder at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.PdfPageHolder at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.CopyTo(SolidFramework.Model.Pdf.Pages.PdfPageHolder[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.CopyTo(SolidFramework.Model.Pdf.Pages.PdfPageHolder[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.PdfPageHolder[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection)">
            <summary>
            Creates a new instance of the PdfPageHoldersCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.PdfPageHolder element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageHoldersCollection.PdfPageHoldersCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PdfPageSource">
            <summary>
            Represents pdf page source.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSource.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.PdfPageSource at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.PdfPageSource at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.CopyTo(SolidFramework.Model.Pdf.Pages.PdfPageSource[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.CopyTo(SolidFramework.Model.Pdf.Pages.PdfPageSource[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.PdfPageSource[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection)">
            <summary>
            Creates a new instance of the PdfPageSourcesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.PdfPageSource element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PdfPageSourcesCollection.PdfPageSourcesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.Annotation">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Annotation.ModificationDate">
            <summary>
            Gets the date and time when the annotation was most recently modified.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.Annotation at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.Annotation at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.Annotation[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.Annotation[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.Annotation[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection)">
            <summary>
            Creates a new instance of the AnnotationsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.Annotation element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationsCollection.AnnotationsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType">
            <summary>
             This enum provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.Annotation">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.Link">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.URILink">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.GoToLink">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.Comment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.HighlightComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.StrikeOutComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.UnderlineComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.AnnotationType.TextComment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.BorderStyle.None">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.BorderStyle.Box">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.BorderStyle.Underline">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.Comment">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Comment.Label">
            <summary>
            Gets the text label to be displayed in the title bar of the annotation's pop-up window when open and active.
            By convention, this entry identifies the user who added the annotation.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Comment.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.Comment at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.Comment at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.Comment[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.Comment[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.Comment[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection)">
            <summary>
            Creates a new instance of the CommentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.Comment element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.CommentsCollection.CommentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.Description">
            <summary>
            Provides access to author specified metadata for the document.
            This class provides internal support for the <see cref="T:SolidFramework.Forms.DocumentPropertiesForm"/>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Description.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
            <returns>
            The title.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Description.Author">
            <summary>
            Gets of sets the author for the document.
            </summary>
            <returns>
            The author.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Description.Keywords">
            <summary>
            Gets or sets the keywords for the document.
            </summary>
            <returns>
            The keywords.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Description.Subject">
            <summary>
            Gets or sets the subject of the document.
            </summary>
            <returns>
            The subject.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.Description.Modified">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.Description" /> has been modified.
            </summary>
            <returns>
              <c>true</c> if modified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.GoToLink">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection)">
            <summary>
            Creates a new instance of the HighlightCommentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.HighlightComment element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.HighlightCommentsCollection.HighlightCommentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView">
            <summary>
            Represents initial view to be used when displaying a PDF document.
            This class primarily provides internal support for the <see cref="T:SolidFramework.Forms.DocumentPropertiesForm"/>.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.Modified">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView" /> is modified.
            </summary>
            <value>
              <c>true</c> if modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.HideMenuBar">
            <summary>
            Gets a value indicating whether [hide menubar].
            </summary>
            <value>
              <c>true</c> if [hide menubar]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.HideToolBars">
            <summary>
            Gets a value indicating whether [hide toolbars].
            </summary>
            <value>
              <c>true</c> if [hide toolbars]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.HideWindowControls">
            <summary>
            Gets a value indicating whether [hide window controls].
            </summary>
            <value>
              <c>true</c> if [hide window controls]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.CenterWindowOnScreen">
            <summary>
            Gets a value indicating whether [center window on screen].
            </summary>
            <value>
            <c>true</c> if [center window on screen]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.DisplayDocumentTitle">
            <summary>
            Gets a value indicating whether [display document title].
            </summary>
            <value>
            <c>true</c> if [display document title]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.OpenInFullScreenMode">
            <summary>
            Gets a value indicating whether [open in full screen mode].
            </summary>
            <value>
            <c>true</c> if [open in full screen mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.ResizeWindowToInitialPage">
            <summary>
            Gets a value indicating whether [resize window to initial page].
            </summary>
            <value>
            <c>true</c> if [resize window to initial page]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.NavigationTab">
            <summary>
            Gets the navigation tab.
            </summary>
            <value>
            The navigation tab.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.Magnification">
            <summary>
            Gets the magnification.
            </summary>
            <value>
            The magnification.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.InitialPageLayout">
            <summary>
            Gets the initial page layout.
            </summary>
            <value>
            The initial page layout.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.OpenToPageTargetID">
            <summary>
            Gets the open to page target ID.
            </summary>
            <value>
            The open to page target ID.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.InitialView.Percent">
            <summary>
            Gets the percent.
            </summary>
            <value>
            The percent.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.Link">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.Link at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.Link at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.Link[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.Link[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.Link[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection)">
            <summary>
            Creates a new instance of the LinksCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.Link element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.LinksCollection.LinksCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.NavigationTab">
            <summary>
            This class primarily provides internal support for the <see cref="T:SolidFramework.Forms.DocumentPropertiesForm"/>.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.NavigationTab.PageOnly">
            <summary>Represents navigation tab is page only. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.NavigationTab.BookmarksAndPage">
            <summary>Represents navigation tab are bookmarks and pape. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.NavigationTab.ThumbnailsAndPage">
            <summary>Represents navigation tab are thumbnails and page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.NavigationTab.AttachmentsAndPage">
            <summary>Represents navigation tab are attachments and page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.NavigationTab.LayersAndPage">
            <summary>Represents navigation tab are layers and page. </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout">
            <summary>
            This class primarily provides internal support for the <see cref="T:SolidFramework.Forms.PageView"/> and <see cref="T:SolidFramework.Forms.PdfViewer"/> forms.
            </summary>
            <summary>
            Represents types of Page layouts
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout.SinglePage">
            <summary>Represents initial page layout is single page. </summary>
            <summary>Page layouts is Single Page </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout.SinglePageContinuous">
            <summary>Represents initial page layout is page continuous. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout.TwoUpFacing">
            <summary>Represents initial page layout is two up facing. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout.TwoUpFacingContinuous">
            <summary>Represents initial page layout is two facing continuous. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout.TwoUpCoverPage">
            <summary>Represents initial page layout is two up cover page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageLayout.TwoUpCoverPageContinuous">
            <summary>Represents initial page layout is tw up cover page continuous. </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification">
            <summary>
            This class primarily provides internal support for the <see cref="T:SolidFramework.Forms.PageView"/> and <see cref="T:SolidFramework.Forms.PdfViewer"/> forms.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification.Default">
            <summary>Represents magnification is default.. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification.Scaled">
            <summary>Represents magnification is scaled. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification.FitPage">
            <summary>Represents magnification is fit page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification.FitWidth">
            <summary>Represents magnification is fit width. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification.FitHeight">
            <summary>Represents magnification is height. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.Plumbing.PageMagnification.FitVisible">
            <summary>Represents magnification is visible. </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo">
            <summary>
            This class primarily provides internal support for the <see cref="T:SolidFramework.Forms.DocumentPropertiesForm"/> and <see cref="T:SolidFramework.Forms.PdfViewer"/> forms.
            However it can also be accessed from the <see cref="T:SolidFramework.Model.Pdf.Pages.PagesModel"/> object.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.Version">
            <summary>
            Gets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.CreationDate">
            <summary>
            Gets the creation date.
            </summary>
            <value>
            The creation date.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.ModificationDate">
            <summary>
            Gets the modification date.
            </summary>
            <value>
            The modification date.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.Creator">
            <summary>
            Gets the creator.
            </summary>
            <value>
            The creator.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.Producer">
            <summary>
            Gets the producer.
            </summary>
            <value>
            The producer.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.OpenPassword">
            <summary>
            Gets the password used to open the PDF file.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.IsTagged">
            <summary>
            Gets a value indicating whether this instance is tagged.
            </summary>
            <value>
              <c>true</c> if this instance is tagged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.WasRepaired">
            <summary>
            Gets a value indicating whether this PDF was repaired as part of being loaded.
            </summary>
            <value>
              <c>true</c> if it was repaired; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.IsLinearized">
            <summary>
            Gets a value indicating whether this instance is linearized.
            </summary>
            <value>
            <c>true</c> if this instance is linearized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.SizeInBytes">
            <summary>
            Gets the size in bytes.
            </summary>
            <value>
            The size in bytes.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.FirstPageWidth">
            <summary>
            Gets the first width of the page.
            </summary>
            <value>
            The first width of the page.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.FirstPageHeight">
            <summary>
            Gets the first height of the page.
            </summary>
            <value>
            The first height of the page.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.AccessPermissions">
            <summary>
            Gets the access permissions.
            </summary>
            <value>
            The access permissions.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.EncryptionAlgorithm">
            <summary>
            Gets the encryption algorithm.
            </summary>
            <value>
            The encryption algorithm.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.ReadOnlyInfo.AuthenticationMode">
            <summary>
            Gets the authentication mode.
            </summary>
            <value>
            The authentication mode.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection)">
            <summary>
            Creates a new instance of the StrikeOutCommentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutComment element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.StrikeOutCommentsCollection.StrikeOutCommentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.TextComment">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.TextComment at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.TextComment at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.TextComment[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.TextComment[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.TextComment[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection)">
            <summary>
            Creates a new instance of the TextCommentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.TextComment element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.TextCommentsCollection.TextCommentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment">
            <summary>
             This class provides internal support for the <see cref = "T:SolidFramework.Forms.PageView" />
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection)">
            <summary>
            Creates a new instance of the UnderlineCommentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineComment element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.Plumbing.UnderlineCommentsCollection.UnderlineCommentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Plumbing.URILink">
            <summary>
            This class primarily provides internal support for the <see cref="T:SolidFramework.Forms.PageView"/> form.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.ProgressPhase">
            <summary>
            Represents types of Progress Phase.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ProgressPhase.None">
            <summary>Type of Progress Phase is None. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ProgressPhase.Pages">
            <summary>Type of Progress Phase is Pages. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ProgressPhase.Segments">
            <summary>Type of Progress Phase is Segments. </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.ProgressPhase.Complete">
            <summary>Type of Progress Phase is Complete. </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.RepairFailedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.RepairFailedEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.RepairFailedEventArgs.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.RepairFailedEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs.Tick">
            <summary>
            Gets the tick.
            </summary>
            <value>
            The tick.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs.Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs.Phase">
            <summary>
            Gets the phase.
            </summary>
            <value>
            The phase.
            </value>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs.PageHolder">
            <summary>
            Gets the page holder.
            </summary>
            <value>
            The page holder.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs.InvokeRequired">
            <summary>
            Gets a value indicating whether invoke required.
            </summary>
            <value>
              <c>true</c> if invoke required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.Transaction">
            <summary>
            Represents page holder interface.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Transaction.Operation">
            <summary>
            Gets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.Transaction.Parameter">
            <summary>
            Gets the parameter.
            </summary>
            <value>
            The parameter.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Transaction at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Pdf.Pages.Transaction at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Transaction[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.CopyTo(SolidFramework.Model.Pdf.Pages.Transaction[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.CopyTo(System.Int32,SolidFramework.Model.Pdf.Pages.Transaction[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator.#ctor(SolidFramework.Model.Pdf.Pages.TransactionCollection)">
            <summary>
            Creates a new instance of the TransactionCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Pdf.Pages.Transaction element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.TransactionCollection.TransactionCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.CreatorOptionsRequestArgs.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PagesModel">
            <summary>
            Represents types of Pages Model.
            </summary>
        </member>
        <member name="E:SolidFramework.Model.Pdf.Pages.PagesModel.OfferSave">
            <summary>
            #region PagesModel_Event
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OnModelChanged(SolidFramework.Model.Pdf.Pages.ModelChangedEventArgs)">
            <summary>
            Raises a ModelChanged event if a handler has been specified for that event type. Otherwise does nothing.
            </summary>
            <param name="args">The event arguments to be included in the event.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OnPagesChanged(SolidFramework.Model.Pdf.Pages.PagesChangedEventArgs)">
            <summary>
            Raises a PagesChanged event if a handler has been specified for that event type. Otherwise does nothing.
            </summary>
            <param name="args">The event arguments to be included in the event.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OnSaveProgress(SolidFramework.Model.Pdf.Pages.SaveProgressEventArgs)">
            <summary>
            Raises a SaveProgress event if a handler has been specified for that event type. Otherwise does nothing.
            </summary>
            <param name="args">The event arguments to be included in the event.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OnPasswordEntered(SolidFramework.Model.Pdf.Pages.PasswordEnteredEventArgs)">
            <summary>
            Raises a PasswordEntered event if a handler has been specified for that event type. Otherwise does nothing.
            </summary>
            <param name="args">The event arguments to be included in the event.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OnThumbnailChanged(SolidFramework.Model.Pdf.Pages.ThumbnailChangedEventArgs)">
            <summary>
            Raises a ThumbnailChanged event if a handler has been specified for that event type. Otherwise does nothing.
            </summary>
            <param name="args">The event arguments to be included in the event.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.Initialize(SolidFramework.Pdf.PdfDocument)">
            <summary>
            #region PagesModel_Initialization
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.InsertRange(System.Int32,SolidFramework.Model.Pdf.Pages.IPageHoldersCollection)">
            <summary>
            Inserts each of the PageHolders in <paramref name="collection"/> into the current document. The new items will be placed before the page with index <paramref name="position"/>.
            As indexing starts at zero, this is generally the same as inserting the items after page <c>number</c> <paramref name="position"/>.
            </summary>
            <param name="position">Index of the page before which the items should be inserted.</param>
            <param name="collection">A collection of PageHolder objects, each of which should be inserted into the current document.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.InsertRange(System.Int32,SolidFramework.Model.Pdf.Pages.IPageSourcesCollection)">
            <summary>
            Inserts each of the PageSources in <paramref name="collection"/> into the current document. The new items will be placed before the page with index <paramref name="position"/>.
            As indexing starts at zero, this is generally the same as inserting the items after page <c>number</c> <paramref name="position"/>.
            </summary>
            <param name="position">Index of the page before which the items should be inserted.</param>
            <param name="collection">A collection of PageSource objects, each of which should be inserted into the current document.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.InsertRange(System.Int32,SolidFramework.StringsArray,System.Boolean)">
            <summary>
            Inserts each of the PageSources in <paramref name="pageFiles"/> into the current document. The new items will be placed before the page with index <paramref name="position"/>.
            As indexing starts at zero, this is generally the same as inserting the items after page <c>number</c> <paramref name="position"/>.
            Supported file types are:
            </summary>
            <remarks>Supported file types are .pdf, .tif, .tiff, .jpg, .jpeg, .png, .gif, .bmp, .docx, .doc, .rtf, .txt, .odt, .htm, .html, .pptx, .ppt, .xlsx, .xls, .ods
            and any other type that can be printed to pdf on the current machine.
            </remarks>
            <param name="position">Index of the page before which the items should be inserted.</param>
            <param name="pageFiles">A <see cref="T:SolidFramework.StringsArray"/> collection containing the path to each of the files that should be inserted into the current document.</param>
            <param name="preferPdfAWhenCreating">If <c>true</c> then PdfA are generated for PowerPoint, Word, RTF, ODT and HTML files. If <c>false</c> then these files types are converted to simple PDF.  For other file types this parameter has no effect.</param>
            <exception cref="T:System.NotImplementedException"> Occurs if a file type is added that cannot be converted to a PDF file.</exception>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.InsertRange(System.Int32,System.String,System.Boolean)">
            <summary>
            Inserts the single file whose path is specified in <paramref name="pageFile"/> into the current document. The new item will be placed before the page with index <paramref name="position"/>.
            As indexing starts at zero, this is generally the same as inserting the items after page <c>number</c> <paramref name="position"/>.
            Supported file types are:
            </summary>
            <remarks>Supported file types are .pdf, .tif, .tiff, .jpg, .jpeg, .png, .gif, .bmp, .docx, .doc, .rtf, .txt, .odt, .htm, .html, .pptx, .ppt, .xlsx, .xls, .ods
            and any other type that can be printed to pdf on the current machine.
            </remarks>
            <param name="position">Index of the page before which the items should be inserted.</param>
            <param name="pageFile">The path to each of the file that should be inserted into the current document.</param>
            <param name="preferPdfAWhenCreating">If <c>true</c> then PdfA are generated for PowerPoint, Word, RTF, ODT and HTML files. If <c>false</c> then these files types are converted to simple PDF. For other file types this parameter has no effect.</param>
            <exception cref="T:System.NotImplementedException"> Occurs if a file type is added that cannot be converted to a PDF file.</exception>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.Insert(System.Int32,SolidFramework.Model.Pdf.Pages.IPageSource)">
            <summary>
            Inserts a single PageSource into the specified location.
            </summary>
            <param name="position">Index of the page before which the source is inserted. Since the index is zero based, this is effectively "Insert after page".</param>
            <param name="source"> a <see cref="T:SolidFramework.Model.Pdf.Pages.IPageSource"/> that specifies the page source that should be inserted.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OpenPDF(System.String)">
            <summary>
            Attempts to open the PDF file at the specified path.
            </summary>
            <param name="pdfPath">
            Path to the PDfFile that is to be opened.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OpenPDF(System.String,System.String)">
            <summary>
            Attempts to open the PDF file at the specified path.
            </summary>
            <param name="pdfPath">
            Path to the PDfFile that is to be opened.
            </param>
            <param name="attemptPassword">
            The password that should be used to open the file.
             </param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OpenPDF(System.String,SolidFramework.Pdf.AccessPermissions,SolidFramework.Pdf.AuthenticationModeType,System.String)">
            <summary>
            Attempts to open the PDF file at the specified path.
            </summary>
            <param name="pdfPath">
            Path to the PDfFile that is to be opened
            </param>
            <param name="permissionsRequired">
             A collection of one or more values from <see cref="E:AccessPermissions"/> that specify the permissions that are required by the PagesModel.
            </param>
            <param name="authenticationRequired">
            A value from <see cref="T:SolidFramework.Pdf.AuthenticationModeType"/> that specifies the level of authentication required.
            </param>
            <param name="attemptPassword">
            The password that should be used to open the file.
             </param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.GetThumbnailDpi">
            <summary>
            Gets the DPI used for the thumbnail of the pages.
            </summary>
            <returns>DPI used for the thumbnail of the pages.</returns>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.SetThumbnailDpi(System.Int32)">
            <summary>
            Sets the DPI to be used for the thumbnail of the pages.
            </summary>
            <param name="value">DPI to be used for the thumbnail of the pages.</param>
            <remarks>Setting this value will result in all of the pages being reloaded.</remarks>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.Close">
            <summary>
            Requests the worker thread that generates thumbnails to stop.
            This method is called from Dispose().
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Pdf.Pages.PagesModel.bookmarksRootNode">
            <summary>
            #region PagesModel_Bookmarks
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModel.Bookmarks">
            <summary>
            Gets the bookmarks specified within the PagesModel.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Pdf.Pages.PagesModel.GlobalMemoryFlags">
            <summary>
            #region PagesModel_Clipboard
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Model.Pdf.Pages.PagesModel" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException"> occurs if the license is invalid.</exception>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c>
            to release only unmanaged resources.</param>
        </member>
        <member name="M:SolidFramework.Model.Pdf.Pages.PagesModel.OfferSaveIfModified(System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            This method supports the PdfViewere in the SDK. It is not intended for end-user usage.
            Method called from PdfViewer if the user has made modifications. This will automatically be called if the there is a PdfViewer on a form that is being closed, and the PagesModel contains unsaved changes.
            Displays a dialog to ask if the user wishes to samce any modifications. If they reply "Yes" then the file will automatically be saved. This may overwrite the original file.
            </summary>
            <param name="saved">Out: <c>true</c> if the user pressed "yes" and saved changes; othereise <c>false</c>.</param>
            <param name="wasUntitled">Out: indicates whether the Pdf file had not been saved when this method was called.</param>
            <param name="closePath">Out:if non-empty then it indicates that the user pressed No, and that the path to file can be removed from the list of modified files.</param>
            <returns>A DialogResult that indicates whether the user pressed Yes, No or Cancel.</returns>
        </member>
        <member name="P:SolidFramework.Model.Pdf.Pages.PagesModel.Working">
            <summary>
            Gets a value indicating whether there are any worker threads in this <see cref="T:SolidFramework.Model.Pdf.Pages.PagesModel" /> that are still working.
            </summary>
            <value>
              <c>true</c> if and working threads exist; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Alignment">
            <summary>
            Represents alignment to be used for a paragraph.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.Alignment.Left">
            <summary>Represents alignment is left. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.Alignment.Center">
            <summary>Represents alignment is center. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.Alignment.Right">
            <summary>Represents alignment is right. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.Alignment.Justified">
            <summary>Represents alignment is justified. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.BezierGraphicSegment">
            <summary>
            A smooth curve that is defined by its start and end points and two control points or handles. A <see cref="T:SolidFramework.Model.Plumbing.GraphicPath" /> is a combination of linked Bezier or line segments.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.BezierGraphicSegment.StartHandle">
            <summary>
            Gets the location of the control point nearest to the start point.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Interop.PointF" /> which is location of the control point nearest to the start point.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.BezierGraphicSegment.EndHandle">
            <summary>
            Gets the location of the control point nearest to the start point.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Interop.PointF" /> which is location of the control point nearest to the end point.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Bookmark">
            <summary>
            A bookmark represents a named contiguous area in a document, with both a starting position and an ending position. 
            You can use bookmarks to mark a location in a document, or as a container for text in a document. 
            It can be as small as just the insertion point, or it can be as large as the entire document.
            NOTE: A comment is considered to be a types of bookmark.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Bookmark.Name">
            <summary>
            Gets the name of the bookmark.
            </summary>
            <returns>
            The name of the bookmark.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Bookmark.Count">
            <summary>
            Gets number of child bookmarks.
            </summary>
            <returns>
            The number of child bookmarks owned by this bookmark.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Bookmark.PageNumber">
            <summary>
            Gets the page number where the bookmark is located.
            </summary>
            <returns>
            The number of the page on whcih the bookmark is located.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Bookmark.IsHidden">
            <summary>
            Gets whether the bookmark is hidden.
            </summary>
            <returns>
            <c>true</c> if the the bookmark is hidden, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Bookmark.Type">
            <summary>
            Gets the type of bookmark.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.Plumbing.BookmarkType" /> which specifies the type of object that this is
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.BookmarkType">
            <summary>
            Represents BookmarkType.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BookmarkType.Nothing">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BookmarkType.Bookmark">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BookmarkType.CommentReference">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BookmarkType.BookmarkAndComment">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.BorderLineType">
            <summary>
            Represents line type for borders and underlines.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BorderLineType.None">
            <summary>None. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BorderLineType.Default">
            <summary>Regular line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BorderLineType.Double">
            <summary>Double regular line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BorderLineType.Bold">
            <summary>Thick line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BorderLineType.BigDashed">
            <summary>Dashed line with large dashes. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.BorderLineType.SmallDashed">
            <summary>Dashed line with small dashes. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Borders">
            <summary>
            Specifies the line style for the borders of a cell or section. The line style can be set independently for each border.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Borders.Left">
            <summary>
            Gets the line style for the Left border or <c>null</c> if one is not defined.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.LineStyle" /> for the left border or <c>null</c> if one is not defined.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Borders.Top">
            <summary>
            Gets the line style for the Left border or <c>null</c> if one is not defined.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.LineStyle" /> for the top border or <c>null</c> if one is not defined.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Borders.Right">
            <summary>
            Gets the line style for the Left borderor <c>null</c> if one is not defined.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.LineStyle" /> for the right border or <c>null</c> if one is not defined.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Borders.Bottom">
            <summary>
            Gets the line style for the Left border or <c>null</c> if one is not defined.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.LineStyle" /> for the bottom bordeor <c>null</c> if one is not defined.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Cell">
            <summary>
            Represents a cell within a table.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.Format">
            <summary>
            Gets the format string to be used for the cell.
            </summary>
            <returns>
            Gets the format string to be used for the cell.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.Value">
            <summary>
            Gets the value stored in the cell.
            </summary>
            <returns>
            The value stored in the cell.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.Text">
            <summary>
            Gets a formatted string representing the value stored in the cell.
            </summary>
            <returns>
            A formatted string representing the value stored in the cell.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.FillColor">
            <summary>
            Gets the fill color for the cell.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Interop.Color"/> for the cell.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.Hyperlink">
            <summary>
            Gets the first non-null hyperlink in the cell
            </summary>
            <returns>
            The first non-null <see cref="P:SolidFramework.Model.Plumbing.Cell.Hyperlink"/> in the cell if multiple hyperlinks exist or null if one is not found.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.Borders">
            <summary>
            Gets the borders for the cell.
            </summary>
            <returns>
            The <see cref="P:SolidFramework.Model.Plumbing.Cell.Borders"/> object for the cell if one exists otherwise <c>null</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.TextType">
            <summary>
            Gets or sets the type of text (e.g. Decimal, Currency, Text) used within the cell. Default is <c>Undetermined</c>.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Cell.TextType"/> that represents the type of text used in the cell.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.RowSpan">
            <summary>
            Gets the number of rows that the cell spans. If the value is greater than 1, then the cell has been merged.
            </summary>
            <returns>
            The number of rows that the cell spans.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.ColSpan">
            <summary>
            Gets the number of columns that the cell spans. If the value is greater than 1, then the cell has been merged.
            </summary>
            <returns>
            The number of columns that the cell spans.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.Width">
            <summary>
            Gets the width of the cell in points.
            </summary>
            <returns>
            The width of the cell in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Cell.TextDirection">
            <summary>
            Gets the text direction.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Cell.TextDirection" /> that describes the text direction.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Cell at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.Cell at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CopyTo(SolidFramework.Model.Plumbing.Cell[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CopyTo(SolidFramework.Model.Plumbing.Cell[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.Cell[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.CellsCollection)">
            <summary>
            Creates a new instance of the CellsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Cell element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.CellsCollection.CellsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.CellVerticalAlignment">
            <summary>
            Represents cell vertical alignment.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.CellVerticalAlignment.Top">
            <summary>Represents vertical alignment is top. </summary>
            <summary>Represents vertical alignment is top. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.CellVerticalAlignment.Centered">
            <summary>Represents vertical alignment is centered. </summary>
            <summary>Represents vertical alignment is centered. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.CellVerticalAlignment.Bottom">
            <summary>Represents vertical alignment is bottom. </summary>
            <summary>Represents vertical alignment is bottom. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.CharacterPosition">
            <summary>
            Represents how characters should be positioned (superscript/subscript/normal).
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.CharacterPosition.Normal">
            <summary>Represents normal alignment. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.CharacterPosition.Superscript">
            <summary>Represents superscript. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.CharacterPosition.Subscript">
            <summary>Represents subscript. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Column">
            <summary>
            Represents a text column within a section. This class does not represent a column within a table.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Column.Width">
            <summary>
            Gets or sets the width of the column in points.
            </summary>
            <returns>
            The width of the column in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Column.Spacing">
            <summary>
            Gets or sets the spacing of the column in points.
            </summary>
            <returns>
            The spacing of the column in points.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Columns">
            <summary>
            Represents the collection of columns
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Columns.GetColumns">
            <summary>
            Gets the collection of columns.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.ColumnsCollection"/> of columns.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Columns.Count">
            <summary>
            Gets the number of columns.
            </summary>
            <returns>
            The number of columns.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Column at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.Column at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.CopyTo(SolidFramework.Model.Plumbing.Column[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.CopyTo(SolidFramework.Model.Plumbing.Column[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.Column[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.ColumnsCollection)">
            <summary>
            Creates a new instance of the ColumnsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Column element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ColumnsCollection.ColumnsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ExternalHyperlink">
            <summary>
            Represents a hyperlink to an external location.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ExternalHyperlink.Url">
            <summary>
            Gets the URL for the hyperlink.
            </summary>
            <returns>
            The URL for the hyperlink.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ExternalHyperlink.Destination">
            <summary>
            Gets the destination of the hyperlink.
            </summary>
            <returns>
            The destination of the hyperlink.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.FillStyle">
            <summary>
            Specifies the formatting to be used when filling an object.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.FillStyleType">
            <summary>
            Specifies the Type of Fillstyle.
            NOTE: Currently only "Solid" is supported within the SDK.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.FillStyleType.Solid">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.FillStyleType.Gradient">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.FillStyleType.Image">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Font">
            <summary>
            Describes a Font object used within a document. Includes the name, and whether the font is bold and/or italic
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Font.Name">
            <summary>
            Gets the name of the font.
            </summary>
            <returns>
            The name of the font.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Font.Bold">
            <summary>
            Gets whether the font is bold.
            </summary>
            <returns>
            <c>true</c> if the font is bold, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Font.Italic">
            <summary>
            Gets whether the font is italicised.
            </summary>
            <returns>
            <c>true</c> if the font is italicised, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Font.EastAsiaFont">
            <summary>
            Gets whether the font is an East Asian font
            </summary>
            <returns>
            <c>true</c> if the font is East Asian font, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.GradientFill">
            <summary>
            Represents a gradient fill. This is a fill style that changes from one color to another.
            NOTE: This is not currently exposed in the SDK.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GradientFill.From">
            <summary>
            Gets the "From" color.
            </summary>
            <returns>
            The "From" <see cref="T:SolidFramework.Interop.Color"/>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GradientFill.To">
            <summary>
            Gets the "To" color.
            </summary>
            <returns>
            The "To" <see cref="T:SolidFramework.Interop.Color"/>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GradientFill.Angle">
            <summary>
            Gets the angle for the gradient in degrees.
            </summary>
            <returns>
            The angle for the gradient in degrees.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Graphic">
            <summary>
            Represents a Graphic in the document. A Graphic consists of a collection of GraphicPaths, each of which is made up of GraphicSegment objects.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Graphic.GetPaths">
            <summary>
            Gets the collection of GraphicPath elements that are used to define the shape.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.GraphicPath"/> elements that are used to define the shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Graphic.Count">
            <summary>
            Gets the number of GraphicPath elements that are used to define the shape.
            </summary>
            <returns>
            The number of <see cref="T:SolidFramework.Model.Plumbing.GraphicPath"/> elements that are used to define the shape.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPath.GetSegments">
            <summary>
            Gets the collection of GraphicSegment elements that are used to define the path.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.GraphicSegment"/> elements that are used to define the shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPath.Count">
            <summary>
            Gets the number of GraphicSegment elements that are used to define the path.
            </summary>
            <returns>
            The number of <see cref="T:SolidFramework.Model.Plumbing.GraphicSegment"/> elements that are used to define the shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPath.IsClosed">
            <summary>
            Gets whether the path defines a closed shape, is so then the endpoint of every line segment is joined to another line segment.
            </summary>
            <returns>
            <c>true</c> if the path is closed, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.GraphicPath at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.GraphicPath at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.CopyTo(SolidFramework.Model.Plumbing.GraphicPath[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.CopyTo(SolidFramework.Model.Plumbing.GraphicPath[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.GraphicPath[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.GraphicPathsCollection)">
            <summary>
            Creates a new instance of the GraphicPathsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.GraphicPath element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicPathsCollection.GraphicPathsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.GraphicSegment">
            <summary>
            Represents a staright or curved line thatmakes up part of a GraphicPath.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegment.Start">
            <summary>
            Gets the start location of the line (measured in points).
            </summary>
            <returns>
            The start location of the line.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegment.End">
            <summary>
            Gets the end location of the line (measured in points).
            </summary>
            <returns>
            The end location of the line.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.GraphicSegment at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.GraphicSegment at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.CopyTo(SolidFramework.Model.Plumbing.GraphicSegment[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.CopyTo(SolidFramework.Model.Plumbing.GraphicSegment[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.GraphicSegment[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.GraphicSegmentsCollection)">
            <summary>
            Creates a new instance of the GraphicSegmentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.GraphicSegment element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.GraphicSegmentsCollection.GraphicSegmentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.GraphicSegmentType">
            <summary>
            Gets the type of GraphicSegment, at its simplest "straight" or "curved".
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.GraphicSegmentType.GraphicSegment">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.GraphicSegmentType.BezierGraphicSegment">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Group">
            <summary>
            Represents a group of shapes within the document
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Group.GetSolidObjects">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the group.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the group.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Group.Count">
            <summary>
            Gets the number of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the group.
            </summary>
            <returns>
            The number of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the group.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.HeaderFooter">
            <summary>
            Represents a header or footer within the document.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.HeaderFooter.IsHeader">
            <summary>
            Gets whether the object is a header.
            </summary>
            <returns>
            <c>true</c> if the object is a header. <c>false</c> if it is a footer.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.HorizontalAlignment">
            <summary>
            Represents horizontal alignment.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAlignment.Left">
            <summary>Represents horizontal alignment is left. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAlignment.Centered">
            <summary>Represents horizontal alignment is centered. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAlignment.Right">
            <summary>Represents horizontal alignment is right. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAlignment.Offset">
            <summary>Represents horizontal alignment is offset. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAlignment.Justified">
            <summary>Represents horizontal alignment is justified. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.HorizontalAnchoring">
            <summary>
            Represents horizontal anchoring.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAnchoring.Margin">
            <summary>Represents horizontal anchoring is margin. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAnchoring.Page">
            <summary>Represents horizontal anchoring is page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAnchoring.Column">
            <summary>Represents horizontal anchoring is column. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.HorizontalAnchoring.Character">
            <summary>Represents horizontal anchoring is character. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ImageFill">
            <summary>
            Represents a fill containing and image. 
            NOTE: This is not currently exposed in the SDK.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ImageFill.GetImage">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ImageShape">
            <summary>
            Represents an image within a document.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ImageShape.GetImage">
            <summary>
            Gets the image from the ImageShape.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Imaging.Image"/> within the ImageShape.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.InternalHyperlink">
            <summary>
            Represents a hyperlink within the document, such as bookmarks, comments and references.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.InternalHyperlink.Bookmark">
            <summary>
            Gets the bookmark associated with the hyperlink.
            </summary>
            <returns>
            The <see cref="P:SolidFramework.Model.Plumbing.InternalHyperlink.Bookmark" /> associated with the hyperlink.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.LineCompoundType">
            <summary>
            Represents how a line should be drawn, e.g. single, double or triple.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.None">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.Single">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.Double">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.ThickThin">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.ThinThick">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.Triple">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineCompoundType.ThinThickThin">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.LineDashType">
            <summary>
            Represents the type of dash that should be used to draw a line
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.None">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.Solid">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.ShortDash">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.ShortDot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.ShortDashDot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.ShortDashDotDot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.Dot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.Dash">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.LongDash">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.DashDot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.LongDashDot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.LongDashDotDot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineDashType.Custom">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.LineSpacingType">
            <summary>
            Represents line spacing type.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineSpacingType.Multiply">
            <summary>Line spacing determined by the number of lines indicated. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineSpacingType.Exact">
            <summary>Line spacing is only the exact maximum amount of space required. This setting commonly uses less space than single spacing. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.LineSpacingType.AtLeast">
            <summary>Line spacing is always at least a specified amount. The amount is specified separately. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.LineStyle">
            <summary>
            Represents the formatting for a line.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.LineStyle.Color">
            <summary>
            Gets the color of the line.
            </summary>
            <returns>
            The <see cref="P:SolidFramework.Model.Plumbing.LineStyle.Color"/> of the line.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.LineStyle.Weight">
            <summary>
            Gets the weight (width) of the line in points.
            </summary>
            <returns>
            The weight of the line in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.LineStyle.DashType">
            <summary>
            Gets the DashType of the line.
            </summary>
            <returns>
            The <see cref="E:DashType"/> of the line.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.LineStyle.CompoundType">
            <summary>
            Gets the LineCompoundType of the line.
            </summary>
            <returns>
            The <see cref="E:LineCompoundType"/> of the line.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.List">
            <summary>
            Represents a numbered or bullet-point list within a document.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.List.GetAttachedParagraphs">
            <summary>
            Gets the collection of paragraphs within the list.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.Paragraph" /> objects within the list.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.List.CalculateNumericValue(SolidFramework.Model.Plumbing.Paragraph)">
            <summary>
            Gets the numeric value associated with a specific paragraph within a list. This function supports lists starting at arbitrary values.
            </summary>
            <returns>
            The numeric value associated with a specific paragraph within a list.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.List.GenerateLevelText(SolidFramework.Model.Plumbing.Paragraph)">
            <summary>
            Gets the text associated with a specific paragraph within a list. This function supports formatting stle, including nested list levels, e.g. 1.3.a.
            </summary>
            <returns>
            The text associated with a specific paragraph within a list.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.List.Topic">
            <summary>
            Gets the topic associated with the list.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Topic" /> associated with the list.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.List.Count">
            <summary>
            Gets the number of paragraphs within the list.
            </summary>
            <returns>
            The number of <see cref="T:SolidFramework.Model.Plumbing.Paragraph" /> objects within the list.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ListFormat">
            <summary>
            Represents formats for list styles, e.g. bullet, numeric, or Roman.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.Bullet">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.Decimal">
            <summary>1, 2, ..., 9 </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.LowerRoman">
            <summary>i, ii, ..., ix </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.UpperRoman">
            <summary>I, II, ..., IX </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.LowerLatin">
            <summary>a, b, ..., aa </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.UpperLatin">
            <summary>A, B, ..., AA </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.ListFormat.DecimalZero">
            <summary>01, 02, ..., 09 </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ListLevels">
            <summary>
            Represents style information for a numbered or bullet-point list.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListLevels.GetListStyle(System.Int32)">
            <summary>
            Gets the ListStyle for the list.
            </summary>
            <param name="level">
            The index of the level within the list. This is zero-indexed.
            </param>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.ListStyle" /> for the list.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ListStyle">
            <summary>
            Represents style information for a numbered or bullet-point list.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.ListStyle at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.ListStyle at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.CopyTo(SolidFramework.Model.Plumbing.ListStyle[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.CopyTo(SolidFramework.Model.Plumbing.ListStyle[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.ListStyle[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.ListStylesCollection)">
            <summary>
            Creates a new instance of the ListStylesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.ListStyle element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ListStylesCollection.ListStylesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Margins.Top">
            <summary>
            Gets the top margin in points.
            </summary>
            <value>
            The top margin in points.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Margins.Left">
            <summary>
            Gets the left margin in points.
            </summary>
            <value>
            The left margin in points.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Margins.Right">
            <summary>
            Gets the right margin in points.
            </summary>
            <value>
            The right margin in points.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Margins.Bottom">
            <summary>
            Gets the bottom margin in points.
            </summary>
            <value>
            The bottom margin in points.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.MatrixSO">
            <summary>
            Describes the transformation that is to applied to SolidObjects when rendering them.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.MatrixSO.Skew">
            <summary>
            Gets the skew.
            </summary>
            <value>
            The skew.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.MatrixSO.XScale">
            <summary>
            Gets the X scale.
            </summary>
            <value>
            The X scale.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.MatrixSO.YScale">
            <summary>
            Gets the Y scale.
            </summary>
            <value>
            The Y scale.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.MatrixSO.XOffset">
            <summary>
            Gets the X offset.
            </summary>
            <value>
            The X offset.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.MatrixSO.YOffset">
            <summary>
            Gets the Y offset.
            </summary>
            <value>
            The Y offset.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.MatrixSO.Rotation">
            <summary>
            Gets the rotation.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Options">
            <summary>
            Specifies options for the document.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.Options">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.PdfOptions">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.ExportOptions">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.TxtOptions">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.HtmlOptions">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.WordOptions">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.ExcelOptions">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.OptionsType.PowerPointOptions">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.PageNumberFormat">
            <summary>
            Represents page number formats for page number fields.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.PageNumberFormat.None">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.PageNumberFormat.Decimal">
            <summary>1, 2, ..., 9 </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.PageNumberFormat.LowerRoman">
            <summary>i, ii, ..., ix </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.PageNumberFormat.UpperRoman">
            <summary>I, II, ..., IX </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.PageNumberFormat.LowerLatin">
            <summary>a, b, ..., aa </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.PageNumberFormat.UpperLatin">
            <summary>A, B, ..., AA </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Paragraph.GetRuns">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Plumbing.Run" /> objects that are in the Paragraph.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Paragraph.Style">
            <summary>
            Gets the ParagraphStyle for this Paragraph.
            </summary>
            <returns>
            The ParagraphStyle for this Paragraph.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Paragraph.AttachedList">
            <summary>
            Gets the <see cref="T:SolidFramework.Model.Plumbing.List" /> that is associated with the paragraph. This will be <c>null</c> if the paragraph is not part of a list.
            </summary>
            <returns>
            The <see cref="T:SolidFramework.Model.Plumbing.List" /> that is associated with this Paragraph; or <c>null</c> if this Paragraph is not part of a List.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Paragraph.Count">
            <summary>
            Gets the number of <see cref="T:SolidFramework.Model.Plumbing.Run" /> objects that are in the Paragraph.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Paragraph at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.Paragraph at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.CopyTo(SolidFramework.Model.Plumbing.Paragraph[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.CopyTo(SolidFramework.Model.Plumbing.Paragraph[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.Paragraph[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.ParagraphsCollection)">
            <summary>
            Creates a new instance of the ParagraphsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Paragraph element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.ParagraphsCollection.ParagraphsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.AfterSpacing">
            <summary>
            Gets the amount of spacing (in points) after the specified paragraph or text column.
            </summary>
            <returns>
            The amount of spacing (in points) after the specified paragraph or text column.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.BeforeSpacing">
            <summary>
            Gets the amount of spacing (in points) before the specified paragraph or text column.
            </summary>
            <returns>
            The amount of spacing (in points) before the specified paragraph or text column.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.LineSpacing">
            <summary>
            Gets the line spacing (in points) for the specified paragraphs.
            </summary>
            <value>
            The line spacing (in points) for the specified paragraphs.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.LeftIndent">
            <summary>
            Gets the left indent value (in points) for the specified paragraphs, table rows.
            </summary>
            <value>
            The left indent (in points) for the specified paragraphs, table rows.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.RightIndent">
            <summary>
            Gets the right indent value (in points) for the specified paragraphs.
            </summary>
            <value>
            The right indent (in points) for the specified paragraphs.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.FirstLineIndent">
            <summary>
            Gets the value (in points) for a first line or hanging indent.
            </summary>
            <value>
            The value (in points) for a first line or hanging indent.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.Alignment">
            <summary>
            Gets the alignment for the specified paragraphs.
            </summary>
            <value>
            A <see cref="E:SolidFramework::Model::Plumbing::Alignment" /> constant that represents the alignment for the paragraph.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyle.LineSpacingType">
            <summary>
            Gets the type of the line spacing.
            </summary>
            <value>
            A <see cref="E:LineSpacingType" /> that specifies the type of the line spacing for the paragraph.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.ParagraphStyleTemplate.Style">
            <summary>
            Gets the paragraph style.
            </summary>
            <value>
            The paragraph style.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Row">
            <summary>
            Represents a row within a table.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Row.GetCells">
            <summary>
            Gets the collection of cells in the row.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.Cell" /> objects in the row.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Row.CalculateExcelHeight">
            <summary>
            Calculates a row height suitable for exporting to Excel.
            </summary>
            <returns>
            A row height suitable for exporting to Excel.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Row.CalculateWordHeight">
            <summary>
            Calculates a row height suitable for exporting to Word.
            </summary>
            <returns>
            A row height suitable for exporting to Word.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Row.Count">
            <summary>
            Gets the number of cells in the row.
            </summary>
            <returns>
            The number of <see cref="T:SolidFramework.Model.Plumbing.Cell" /> objects in the row.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Row.Height">
            <summary>
            Gets the height of the row in points.
            </summary>
            <returns>
            The height of the row in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Row.HeightRule">
            <summary>
            Gets the height rule for this row.
            </summary>
            <returns>
            The height rule for this row.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.RowHeightRule">
            <summary>
            Represents how a row.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.RowHeightRule.Auto">
            <summary>The row height is a suggestion and the row should grow or shrink to fit its content. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.RowHeightRule.AtLeast">
            <summary>The row height is the minimum size that should be used and the row should grow to fit its content. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.RowHeightRule.Exact">
            <summary>The row height is the exact size that should be used and the row should not grow or shrink. </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Row at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.Row at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.CopyTo(SolidFramework.Model.Plumbing.Row[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.CopyTo(SolidFramework.Model.Plumbing.Row[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.Row[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.RowsCollection)">
            <summary>
            Creates a new instance of the RowsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Row element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RowsCollection.RowsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Run">
            <summary>
            Represents a block of text that has the same formatting
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.Text">
            <summary>
            Gets the text.
            </summary>
            <returns>
            The text.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.Style">
            <summary>
            Gets the TextStyle for this Run.
            </summary>
            <returns>
            The TextStyle for this Run.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.BookmarkStart">
            <summary>
            Gets the Bookmark that starts on this run.
            </summary>
            <returns>
            The Bookmark that starts on this run, or null if no bookmarks start on this run.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.BookmarkEnd">
            <summary>
            Gets the Bookmark that ends on this run.
            </summary>
            <returns>
            The Bookmark that ends on this run, or null if no bookmarks end on this run.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.InlineShape">
            <summary>
            Gets the inline shape. This may be null.
            </summary>
            <returns>
            The inline shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.Hyperlink">
            <summary>
            Gets the hyperlink attached to the Run. This may be null.
            </summary>
            <returns>
            The inline hyperlink.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Run.IsPageNumberField">
            <summary>
            Gets whether the run represents a page number field.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Run at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.Run at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.CopyTo(SolidFramework.Model.Plumbing.Run[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.CopyTo(SolidFramework.Model.Plumbing.Run[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.Run[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.RunsCollection)">
            <summary>
            Creates a new instance of the RunsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.Run element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.RunsCollection.RunsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Section">
            <summary>
            A <c>section</c> is a part of a document that contains its own page formatting. 
            It can be a single page or a range of pages, or a section can comprise the entire document.
            Sections affect only page formatting. They are entirely unrelated to text and paragraph formatting.
            Sections are also used to define an area of the document that contains text columns. 
            If you wish to change the number of columns then a new section is required.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Section.GetOriginalPageNumber">
            <summary>
            Gets the page number that this section originally came from.
            </summary>
            <returns>
            The page number this section originally came from.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.Margins">
            <summary>
            Gets the margins.
            </summary>
            <returns>
            The margins.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.Columns">
            <summary>
            Gets the columns used in the section.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.Column" /> objects that are used in the section.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.PageBackgroundColor">
            <summary>
            Gets the color used for the page background in this section.
            </summary>
            <returns>
            The color used for the page background in this section.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.PageBorder">
            <summary>
            Gets the page border or null if it doesn't have one.
            </summary>
            <returns>
            The page border or null if it doesn't have one.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.PageBorderMargins">
            <summary>
            Gets the margins between the edge of the page and the page border.
            </summary>
            <returns>
            The page border margins.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.PageWidth">
            <summary>
            Gets the width of the page in points.
            </summary>
            <returns>
            The width of the page in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.PageHeight">
            <summary>
            Gets the height of the page in points.
            </summary>
            <returns>
            The height of the page in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.IsSoftPageBreak">
            <summary>
            Gets whether this section should connect with the section on the previous page
            </summary>
            <returns>
            Whether this section should connect with the section on the previous page
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.HasDifferentHeaderFooterForEvenPages">
            <summary>
            Gets whether the document has separate headers and footers for odd and even pages or not
            </summary>
            <returns>
            true if the document has separate headers and footers for odd and even pages; otherwise false
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.SlideLayout">
            <summary>
            Gets the type of slide layout for a PowerPoint presentation.
            </summary>
            <returns>
            A <see cref= "P:SolidFramework.Model.Plumbing.Section.SlideLayout" /> that describes the slide layout.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.SectionBreak">
            <summary>
            Gets the type of section break that terminates this section.
            </summary>
            <returns>
            A <see cref= "P:SolidFramework.Model.Plumbing.Section.SectionBreak" /> that describes the section break.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.TextDirection">
            <summary>
            Gets the text direction.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Section.TextDirection" /> that describes the text direction.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Section.HasPageBackgroundColor">
            <summary>
            Gets whether or not a color has been specified for the background in this section.
            </summary>
            <returns>
            <c>true</c> if a color has been defined for the background in this section, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.SectionBreak">
            <summary>
             Represents section break.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SectionBreak.Continuous">
            <summary>Starts the new section on the same page. One of the most common reasons for using </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SectionBreak.NextPage">
            <summary>Starts the new section on the following page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SectionBreak.EvenPage">
            <summary>Starts the new section on the next even-numbered page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SectionBreak.OddPage">
            <summary>Starts the new section on the next odd-numbered page. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.Shape">
            <summary>
            Represents an object in the drawing layer, such as an AutoShape, 
            freeform, OLE object, ActiveX control, or picture.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.Line">
            <summary>
            Gets the LineStyle for this Shape.
            </summary>
            <returns>
            The LineStyle for this Shape or null if it does not have a line.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.Fill">
            <summary>
            Gets the FillStyle for this Shape.
            </summary>
            <returns>
            The FillStyle for this Shape or null if it does not have a fill.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.Transform">
            <summary>
            Gets the transformation matrix that is to be appleid to the shape.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Model.Plumbing.MatrixSO" /> object that specifies the transformation to applied to the shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.Width">
            <summary>
            Gets the width of the shape in points.
            </summary>
            <returns>
            The width of the shape in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.Height">
            <summary>
            Gets the height of the shape in points.
            </summary>
            <returns>
            The height of the shape in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.WrappingType">
            <summary>
            Gets the properties for wrapping text around the specified shape. Default is <c> SquareBoth</c>.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Shape.WrappingType" /> object that contains the properties for wrapping text around the specified shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.VerticalAlignment">
            <summary>
            Gets the vertical alignment of the shape. Default is <c>Top</c>.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Shape.VerticalAlignment" /> that specifies the vertical alignment of the shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.VerticalAnchoring">
            <summary>
            Gets the vertical anchoring for the shape. The default is <c>Margin</c>.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Shape.VerticalAnchoring" /> that specifies the vertical anchoring.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.HorizontalAlignment">
            <summary>
            Gets the horizontal alignment of the shape. Default is <c>Left</c>.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Shape.HorizontalAlignment" /> that specifies the horizontal alignment of the shape.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Shape.HorizontalAnchoring">
            <summary>
            Gets the horizontal anchoring for the shape. The default is <c>Top</c>.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.Shape.HorizontalAnchoring" /> that specifies the horizontal anchoring.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.SlideLayout">
            <summary>
             Represents PowerPoint slide layout type.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SlideLayout.Undefined">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SlideLayout.TitleSlide">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SlideLayout.TitleAndContent">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SlideLayout.TitleAndTwoContent">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SlideLayout.TitleOnly">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SlideLayout.Blank">
            <summary></summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.SolidObject at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.SolidObject at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.CopyTo(SolidFramework.Model.Plumbing.SolidObject[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.CopyTo(SolidFramework.Model.Plumbing.SolidObject[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.SolidObject[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.SolidObjectsCollection)">
            <summary>
            Creates a new instance of the SolidObjectsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.SolidObject element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.SolidObjectsCollection.SolidObjectsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_SolidObject">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_TextStyle">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_ParagraphStyle">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_TableStyle">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Font">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Paragraph">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Section">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Topic">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Shape">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Group">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Image">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Graphic">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_TextBox">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Table">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Cell">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Header">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Footer">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_HeaderFooterBlock">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Bookmark">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_PageBookmark">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_ListStyle">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_ListStylesCollection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_List">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_InternalHyperlink">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_ExternalHyperlink">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_TableOfContents">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_ParagraphStylesCollection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_FontsCollection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_BookmarksCollection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_HyperlinksCollection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_ListsCollection">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Hyperlink">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_Style">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.SolidObjectType.SOT_SolidCollection">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.TabAlignment">
            <summary>
            Represents tab alignment.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabAlignment.Left">
            <summary>Represents alignment is left. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabAlignment.Center">
            <summary>Represents alignment is center. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabAlignment.Right">
            <summary>Represents alignment is right. </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.Table.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified row <paramref name = "ri">index</paramref> and column <paramref name = "ci">index</paramref> . Note that rows and columns are zero indexed, so that the "first" cell is at "0,0".
            </summary>
            <returns>
            The cell at the specified location, or <c>null</c> if ri is negative or greater than the last row, or ci is negative or greater than the last columns.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.Table.CellSpacing">
            <summary>
            Gets the space between cells.
            </summary>
            <value>
            The cell spacing.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.TabLeader">
            <summary>
            Represents how the space leading up to the tab should be filled.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabLeader.None">
            <summary>No tab stop leader. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabLeader.Dot">
            <summary>Dotted leader line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabLeader.Hyphen">
            <summary>Dashed tab stop leader line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabLeader.Underscore">
            <summary>Solid leader line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabLeader.Heavy">
            <summary>Heavy solid leader line. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TabLeader.MiddleDot">
            <summary>Dotted leader line. </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Model.Plumbing.TabStop at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Model.Plumbing.TabStop at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.CopyTo(SolidFramework.Model.Plumbing.TabStop[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.CopyTo(SolidFramework.Model.Plumbing.TabStop[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.CopyTo(System.Int32,SolidFramework.Model.Plumbing.TabStop[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator.#ctor(SolidFramework.Model.Plumbing.TabStopCollection)">
            <summary>
            Creates a new instance of the TabStopCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Model.Plumbing.TabStop element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TabStopCollection.TabStopCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TextBox.GetSolidObjects">
            <summary>
            Gets the collection of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the textbox.
            </summary>
            <returns>
            The collection of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the textbox.
            </returns>
        </member>
        <member name="M:SolidFramework.Model.Plumbing.TextBox.GetMargins">
            <summary>
            Gets the margins.
            </summary>
            <returns>
            The margins.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextBox.IsAnnotation">
            <summary>
            Gets a value indicating whether this instance is annotation.
            </summary>
            <value>
            <c>true</c> if this instance is annotation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextBox.TextDirection">
            <summary>
            Gets the text direction.
            </summary>
            <returns>
            A <see cref="P:SolidFramework.Model.Plumbing.TextBox.TextDirection" /> that describes the text direction.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextBox.Rotation">
            <summary>
            Gets the rotation in degrees.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextBox.Count">
            <summary>
            Gets the number of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the textbox.
            </summary>
            <returns>
            The number of <see cref="T:SolidFramework.Model.Plumbing.SolidObject"/> within the textbox.
            </returns>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.TextDirection">
            <summary>
            Represents text direction.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextDirection.Horizontal">
            <summary>Represents text direction is horizontal. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextDirection.Vertical">
            <summary>Represents text direction is vertical. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextDirection.Rotate90">
            <summary>Represents text direction is rotate 90. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextDirection.Rotate270">
            <summary>Represents text direction is rotate 270. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextDirection.RotateAsian270">
            <summary>Represents text direction rotate asian 270. </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.BasedOn">
            <summary>
            Gets the style template that this style is based on.
            </summary>
            <value>
            The style template that this style is based on, or null if it this style is not based on a style template.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.TextColor">
            <summary>
            Gets the color of the text.
            </summary>
            <value>
            A <see cref="E:Color"/> that describes the color of the text.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.HighlightColor">
            <summary>
            Gets the color of the highlight.
            </summary>
            <value>
            A <see cref="E:Color"/> that describes of the highlight.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.UnderlineColor">
            <summary>
            Gets the color of the underline.
            </summary>
            <value>
             A <see cref="E:Color"/>  color of the underline.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.Font">
            <summary>
            Gets the font. This may be null
            </summary>
            <returns>
            A <see cref="T:SolidFramework::Model::Plumbing::Font" /> that describes the font if one is specified for the Run, otherwise Null.
            </returns>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.Italic">
            <summary>
            Gets a value indicating whether this text is italic.
            </summary>
            <value>
              <c>true</c> if italic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.SmallCaps">
            <summary>
            Gets a value indicating whether this text is smallcaps.
            </summary>
            <value>
              <c>true</c> if smallcaps; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.RightToLeft">
            <summary>
            Gets a value indicating whether [right to left].
            </summary>
            <value>
              <c>true</c> if [right to left]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.FontWeight">
            <summary>
            Gets the font weight in points.
            </summary>
            <value>
            The font weight.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.FontSize">
            <summary>
            Gets the size of the font in points.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.TextScale">
            <summary>
            Gets the text scale. This is a ratio.
            </summary>
            <value>
            The text scale.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.CharSpacing">
            <summary>
            Gets the char spacing.
            </summary>
            <value>
            The char spacing.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.WordSpacing">
            <summary>
            Gets the word spacing.
            </summary>
            <value>
            The word spacing.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.CharacterPosition">
            <summary>
            Gets a <see cref = "E:CharacterPosition"/> that specifies the position of the characters (superscript/subscript/normal).
            </summary>
            <value>
            The character position.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.TextRise">
            <summary>
            Gets the text rise.
            </summary>
            <value>
            The text rise.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.HasTextColor">
            <summary>
            Gets whether a TextColor has been explicitly assigned.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.HasHighlightColor">
            <summary>
            Gets whether a HighlightColor has been explicitly assigned.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.UnderlineType">
            <summary>
            Gets the underline effect.
            </summary>
            <value>
            Gets a <see cref="E:BorderLineType" /> that describes the underline effect.
            </value>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyle.HasUnderlineColor">
            <summary>
            Gets whether an UnderlineColor has been explicitly assigned.
            </summary>
        </member>
        <member name="P:SolidFramework.Model.Plumbing.TextStyleTemplate.Style">
            <summary>
            Gets the text style.
            </summary>
            <value>
            The text style.
            </value>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.TextType">
            <summary>
            Represents the type of object that formatted text refers to to.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Undetermined">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Empty">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.General">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Numeric">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Currency">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Percentage">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Date">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Time">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.DateTime">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Text">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.AlphaNumeric">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.EmailAddress">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.TextLike">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.NumberLike">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.DateLike">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.TextType.Unknown">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.TOC">
            <summary>
            Represents a Table of Contents within a document.
            </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.VerticalAnchoring">
            <summary>
            Represents vertical anchording.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.VerticalAnchoring.Margin">
            <summary>Represents vertical anchording is margin. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.VerticalAnchoring.Page">
            <summary>Represents vertical anchording is page. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.VerticalAnchoring.Paragraph">
            <summary>Represents vertical anchording is paragraph. </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.VerticalAnchoring.Line">
            <summary>Represents vertical anchording is line. </summary>
        </member>
        <member name="T:SolidFramework.Model.Plumbing.WrappingType">
            <summary>
            Represents WrappingType.
            </summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.SquareBoth">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.SquareLeft">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.SquareRight">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.SquareLargest">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.TightBoth">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.TightLeft">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.TightRight">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.TightLargest">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.ThroughBoth">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.ThroughLeft">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.ThroughRight">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.ThroughLargest">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.TopBottom">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.Behind">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.Infront">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Model.Plumbing.WrappingType.Inline">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.PageRange">
            <summary>
            Represents a page range
            </summary>
        </member>
        <member name="M:SolidFramework.PageRange.#ctor(SolidFramework.PagesArray)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.PageRange"/> class.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:SolidFramework.PageRange.#ctor(SolidFramework.Plumbing.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.PageRange"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:SolidFramework.PageRange.#ctor(SolidFramework.Plumbing.Document,SolidFramework.Plumbing.PageRanges)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.PageRange"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="pageRangeSet">The page range set.</param>
        </member>
        <member name="M:SolidFramework.PageRange.Parse(System.String)">
            <summary>Parses a PageRange from the specified string or throws an exception if it can't be parsed.</summary>
            <param name="range">The string to parse.</param>
            <returns>The PageRange that was parsed from the string.</returns>
        </member>
        <member name="M:SolidFramework.PageRange.TryParse(System.String,SolidFramework.PageRange@)">
            <summary>Attempts to parse a PageRange from the specified string.</summary>
            <param name="range">The string to parse.</param>
            <param name="result">A PageRange to store the result into. This will be set to null if <paramref name="range" /> couldn't be parsed.</param>
            <returns>true if <paramref name="range" /> was parsed successfully; otherwise, false.</returns>
        </member>
        <member name="M:SolidFramework.PageRange.ToArray(System.Int32)">
            <summary>
            Return the complete array of integer page numbers after Parse is called.
            
            NOTE: This is a stop gap to allow multiple page ranges like 1-3,4,6-10 used by a couple sample apps like PDFtoImage.
            </summary>
            <param name="maxPagesInDocument">Max page in the document. Uses if page range set to "all", "even", "odd" or "3-" for bounding of array.
            Set it to -1 if array already bounded (set "1-5").</param>
            <returns>int[] of page numbers.</returns>
        </member>
        <member name="P:SolidFramework.PageRange.Count">
            <summary>
            Gets the page count
            </summary>
        </member>
        <member name="P:SolidFramework.PageRange.First">
            <summary>
            Gets the first number of page
            </summary>
            <returns>
            The number of the first page in the range.
            </returns>
        </member>
        <member name="P:SolidFramework.PageRange.Last">
            <summary>
            Gets the last number of page
            </summary>
        </member>
        <member name="P:SolidFramework.PagesArray.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.PagesArray.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.PagesArray.Item(System.Int32)">
            <summary>
            Gets the int at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The int at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.PagesArray.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.PagesArray.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.PagesArray.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.PagesArray.CopyTo(System.Int32[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.PagesArray.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.PagesArray.CopyTo(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.PagesArray.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.PagesArray.PagesArrayEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.PagesArray.PagesArrayEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.PagesArray.PagesArrayEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.PagesArray.PagesArrayEnumerator.#ctor(SolidFramework.PagesArray)">
            <summary>
            Creates a new instance of the PagesArrayEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.PagesArray.PagesArrayEnumerator.Current">
            <summary>
            Gets the int element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.PagesArray.PagesArrayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.PagesArray.PagesArrayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.PagesArray.PagesArrayEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.PdfAWarningEventArgs">
            <summary>
            Represents types of PdfA Warning Event Args.
            </summary>
        </member>
        <member name="M:SolidFramework.PdfAWarningEventArgs.#ctor(System.String,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.PdfAWarningEventArgs" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="customData">The custom data.</param>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.None">
            <summary>No restrictions </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.LimitedPrinting">
            <summary>Allows limited printing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.ContentEditing">
            <summary>Allows content editing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.Extracting">
            <summary>Allows extracting. This must be set (or AccessPermissions must be None) for document reconstruction to be possible </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.FormFieldEditing">
            <summary>Allows form field editing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.ExistingFormFieldFilling">
            <summary>Allows existing form field editing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.AccessForDisabilities">
            <summary>Allows access for disabilities </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.DocumentAssemblying">
            <summary>Allows document assembling </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.HighQualityPrinting">
            <summary>Allows high quality printing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.All">
            <summary>Allows all </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.Printing">
            <summary>Allows printing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AccessPermissions.Owner">
            <summary>Owner mode. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.AuthenticationModeType">
            <summary>
            Represents types of Authentication mode
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AuthenticationModeType.None">
            <summary>None - no security has been applied to the document </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AuthenticationModeType.User">
            <summary>User authentication </summary>
        </member>
        <member name="F:SolidFramework.Pdf.AuthenticationModeType.Owner">
            <summary>Owner authentication </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Catalog">
            <summary>
            Represents PDF catalog
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.CurrentPage">
            <summary>
            Gets the current page number
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.Pages">
            <summary>
            Gets the pages collection
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Catalog.Create(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Creates the specified document.
            </summary>
            <param name="doc">The document.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Catalog.GetViewerPreferences">
            <summary>
            Gets the viewer preferences.
            </summary>
            <returns>The viewer preferences, or null if there were no viewer preferences.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Catalog.GetViewerPreferences(System.Boolean)">
            <summary>
            Gets the viewer preferences, optionally creating them if they don't already exist.
            </summary>
            <param name="create">Whether to create viewer preferences if they don't already exist.</param>
            <returns>The viewer preferences, or null if there were no viewer preferences and create was set to false.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Catalog.RemoveViewerPreferences">
            <summary>
            Removes the viewer preferences.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.OpenAction">
            <summary>
            Gets the OpenAction if present.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.Outlines">
            <summary>
            Gets the outlines.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.OptionalContentProperties">
            <summary>
            Gets the optional content properties.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.IsTagged">
            <summary>
            Is this a Tagged PDF? (Must have MarkInfo with Marked true).
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.PageLayout">
            <summary>
            Gets the page layout.
            </summary>
            <value>
            The page layout.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Catalog.PageMode">
            <summary>
            Gets or sets the page mode.
            </summary>
            <value>
            The page mode.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.Bookmarks">
            <summary>
            Represents bookmarks.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.Bookmarks.None">
            <summary>Represents bookmarks is none. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.Bookmarks.UseHeadings">
            <summary>Represents bookmarks are using headings. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.Bookmarks.UseBookmarks">
            <summary>Represents bookmarks are using bookmarks. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.HandoutOrder">
            <summary>
            Represents hand out order.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.HandoutOrder.VerticalFirst">
            <summary>Represents hand out order is vertical first. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.HandoutOrder.HorizontalFirst">
            <summary>Represents hand out order is horizontal first. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.PowerPointOutput">
            <summary>
            Represents power point output.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.PowerPointOutput.Slides">
            <summary>Represents power point output are slides. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.PowerPointOutput.Handouts">
            <summary>Represents power point output are handouts. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.PowerPointOutput.Notes">
            <summary>Represents power point output are notes. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.PowerPointOutput.Outline">
            <summary>Represents power point output. is outline </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.SlidesPerPage">
            <summary>
            Represents slides per page.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.SlidesPerPage.One">
            <summary>Represents slides per page is one. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.SlidesPerPage.Two">
            <summary>Represents slides per page is two. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.SlidesPerPage.Three">
            <summary>Represents slides per page is three. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.SlidesPerPage.Four">
            <summary>Represents slides per page is four. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.SlidesPerPage.Six">
            <summary>Represents slides per page is six. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Converters.SlidesPerPage.Nine">
            <summary>Represents slides per page is nine. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.ExcelToPdfConverter">
            <summary>
            Represents excel to pdf converter.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.ExcelToPdfConverter.IgnorePrintAreas">
            <summary>
            Gets or sets a value indicating whether ignore print areas.
            </summary>
            <value>
              <c>true</c> if ignore print areas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.ExcelToPdfConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Converters.ExcelToPdfConverter" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.ExcelToPdfConverter.PageRange">
            <summary>
            Gets or sets the page range.
            </summary>
            <value>
            The page range.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.ExcelToPdfConverter.Convert(System.String,System.String)">
            <summary>
            Converts the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.ExcelToPdfConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Converts the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.ExcelToPdfConverter.Convert">
            <summary>
            Converts this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter">
            <summary>
            Represents office to pdf converter.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.OptimizeForSize">
            <summary>
            Gets or sets a value indicating whether optimize for size.
            </summary>
            <value>
              <c>true</c> if optimize for size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.DocumentProperties">
            <summary>
            Gets or sets a value indicating whether document properties.
            </summary>
            <value>
              <c>true</c> if document properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Combine">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter" /> is combine.
            </summary>
            <value>
              <c>true</c> if combine; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.AddSourceFile(System.String)">
            <summary>
            Adds the source file.
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.AddSourceFiles(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Adds the source files.
            </summary>
            <param name="paths">The paths.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.ConvertTo">
            <summary>
            Converts to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.ConvertTo(System.String)">
            <summary>
            Converts to.
            </summary>
            <param name="fullpath">The fullpath.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Results">
            <summary>
            Gets the results.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.ClearSourceFiles">
            <summary>
            Clears the source files.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.OverwriteMode">
            <summary>
            Gets or sets the overwrite mode.
            </summary>
            <value>
            The overwrite mode.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.SourceDirectory">
            <summary>
            Gets or sets the source directory.
            </summary>
            <value>
            The source directory.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>
            The output directory.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.ConvertTo(System.String,System.Boolean)">
            <summary>
            Converts to.
            </summary>
            <param name="fullpath">The fullpath.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.Convert">
            <summary>
            Converts this instance.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.Plumbing.OfficeToPdfConverter.SourceFileExtension">
            <summary>
            Gets or sets the source file extension.
            </summary>
            <value>
            The source file extension.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.PowerPointToPdfConverter">
            <summary>
            Represents a PowerPoint to PDF converter.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.PdfA">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.PowerPointToPdfConverter" /> is PdfA.
            </summary>
            <value>
              <c>true</c> if PdfA; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.Tagged">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.PowerPointToPdfConverter" /> is tagged.
            </summary>
            <value>
              <c>true</c> if tagged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.Ruthless">
            <summary>
             Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.PowerPointToPdfConverter" /> will kill any interfering PowerPoint process.
             </summary>
             <value>
               <c>true</c> if ruthless killer; <c>false</c> if not.
             </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.Frames">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.PowerPointToPdfConverter" /> is frames.
            </summary>
            <value>
              <c>true</c> if frames; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.IncludeHiddenSlides">
            <summary>
            Gets or sets a value indicating whether include hidden slides.
            </summary>
            <value>
              <c>true</c> if include hidden slides; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.PowerPointOutput">
            <summary>
            Gets or sets the power point output.
            </summary>
            <value>
            The power point output.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.HandoutOrder">
            <summary>
            Gets or sets the handout order.
            </summary>
            <value>
            The handout order.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.SlidesPerPage">
            <summary>
            Gets or sets the slides per page.
            </summary>
            <value>
            The slides per page.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.SlideShowName">
            <summary>
            Gets or sets the name of the slide show.
            </summary>
            <value>
            The name of the slide show.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Converters.PowerPointToPdfConverter" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.Convert(System.String,System.String)">
            <summary>
            Converts the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Converts the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.PowerPointToPdfConverter.Convert">
            <summary>
            Converts this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Pdf.Converters.WordToPdfConverter">
            <summary>
            Represents word to pdf converter.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.WordToPdfConverter.Bookmarks">
            <summary>
            Gets or sets the bookmarks.
            </summary>
            <value>
            The bookmarks.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.WordToPdfConverter.Comments">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.WordToPdfConverter" /> is comments.
            </summary>
            <value>
              <c>true</c> if comments; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.WordToPdfConverter.PdfA">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.WordToPdfConverter" /> is PdfA.
            </summary>
            <value>
              <c>true</c> if PdfA; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.WordToPdfConverter.Tagged">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Pdf.Converters.WordToPdfConverter" /> is tagged.
            </summary>
            <value>
              <c>true</c> if tagged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.WordToPdfConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Converters.WordToPdfConverter" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Pdf.Converters.WordToPdfConverter.PageRange">
            <summary>
            Gets or sets the page range.
            </summary>
            <value>
            The page range.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.WordToPdfConverter.Convert">
            <summary>
            Converts this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.WordToPdfConverter.Convert(System.String,System.String)">
            <summary>
            Converts the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Converters.WordToPdfConverter.Convert(System.String,System.String,System.Boolean)">
            <summary>
            Converts the specified source file name.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the dest file.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.PdfCreatorFromImages">
            <summary>
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.CreationResult">
            <summary>
            Represents types of Creation results
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.CreationResult.None">
            <summary>Creation result is None </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.CreationResult.Success">
            <summary>Creation result is Success </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.CreationResult.Error">
            <summary>Creation has error </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.CreationResult.Canceled">
            <summary>Creation is canceled </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.CreationResult.Timeout">
            <summary>Creation canceled by Timeout </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.CreationResult.PdfANotCompliant">
            <summary>Output Paf/A is not Compliant </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.Optimize">
            <summary>
            Represents types of Optimization
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.Optimize.None">
            <summary>No optimization </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.Optimize.Web">
            <summary>Web optimization </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.Optimize.Draft">
            <summary>Draft optimization </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.Optimize.Professional">
            <summary>Professional optimization </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.Optimize.Custom">
            <summary>Custom optimization </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.PdfDocumentType">
            <summary>
            Represents types of PDF document
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.PdfDocumentType.Pdf">
            <summary>Pdf document type is PDF </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.PdfDocumentType.PdfA">
            <summary>Pdf document type is PDF/A </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.PowerPointLayout">
            <summary>
            Represents types of Power point layouts
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.PowerPointLayout.SingleSlides">
            <summary>Single slides </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.PowerPointLayout.TwoSlidesHandout">
            <summary>Two slides handout </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.PowerPointLayout.SixSlidesHandout">
            <summary>Six slides handout </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Creators.Plumbing.PowerPointLayout.Notes">
            <summary>Notes </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException">
            <summary>
            Solid PDF Creator is not installed exception
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorNotInstalledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException">
            <summary>
            Wrong Version of Solid PDF Creator exception
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.CreatorExceptions.CreatorWrongVersionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.PdfCreator">
            <summary>
            Represents PDF creator
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SolidFramework.Pdf.Creators.Plumbing.PdfCreator"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.ProcessName">
            <summary><c>ProcessName</c> is used to find the PDF printer driver process name as seen in Task Manager.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.Build">
            <summary>
            Gets the build number
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.CreateSilentPath">
            <summary>
            Creates the silent path.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.LaunchViewer">
            <summary>
            Gets or sets a value indicating whether [launch viewer].
            </summary>
            <value>
              <c>true</c> if [launch viewer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.HideProgress">
            <summary>
            Gets or sets a value indicating whether [hide progress].
            </summary>
            <value>
              <c>true</c> if [hide progress]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.StatusWindow">
            <summary>
            Gets or sets the status window.
            </summary>
            <value>
            The status window.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.Unlock(System.String,System.String,System.String,System.String)">
            <summary>
            Unlocks creator
            Notes: 
            The current printer code in bypass mode(SolidFramework, SolidScript,Desktop applications)
            does not check unlock code so the whole its functionality is available for every license
            </summary>
            <param name="name">The name.</param>
            <param name="organization">The organization.</param>
            <param name="email">The email.</param>
            <param name="code">The code.</param>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.Plumbing.PdfCreator.PdfDocument">
            <summary>
            Gets the PDF document.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.Plumbing.SolidPdfCreator">
            <summary>
            Represents Solid PDF creator
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.SolidPdfCreator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.Plumbing.SolidPdfCreator"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.Plumbing.SolidPdfCreator.CheckFreeUnlock">
            <summary>
            Checks the free unlocking.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.GenericPrintProvider">
            <summary>
            Represents common print provider functionality
            </summary>
        </member>
        <member name="E:SolidFramework.Pdf.Creators.GenericPrintProvider.Progress">
            <summary>
            Occurs when [progress].
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.SupportedExtensions">
            <summary>
            Gets the supported extensions.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.ValidationMode">
            <summary>
            Gets or sets validation mode.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.GenericPrintProvider"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.#ctor(SolidFramework.Plumbing.LicensePermissions)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.GenericPrintProvider"/> class.
            </summary>
            <param name="permissionsRequired">The permissions required.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.CreatePrintProvider(System.String,System.IntPtr@)">
            <summary>
            Creates the print provider.
            </summary>
            <param name="strFileName">Name of the file.</param>
            <param name="pPrintProvider">The print provider handle.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.CreatePrintProvider(System.String,System.Int32,System.IntPtr@)">
            <summary>
            Creates the print provider.
            </summary>
            <param name="strFileName">Name of the file.</param>
            <param name="nPrintProviderType">Type of the print provider.</param>
            <param name="pPrintProvider">The print provider handle.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.Print(System.String)">
            <summary>
            Prints specified file
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.Cancel">
            <summary>
            Cancels the creation
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SolidFramework.Pdf.Creators.GenericPrintProvider"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.OutputType">
            <summary>
            Gets or sets the type of the output.
            </summary>
            <value>
            The type of the output.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.PdfCreator">
            <summary>
            Gets the PDF creator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.Author">
            <summary>
            Gets or sets the author of the document
            </summary>
            <value>
            The author.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.Subject">
            <summary>
            Gets or sets the subject of document
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.Title">
            <summary>
            Gets or sets the title of document
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
            <value>
            The keywords.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.GenericPrintProvider.Optimize">
            <summary>
            Gets or sets the optimize options
            </summary>
            <value>
            The optimize.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.GenericPrintProvider.Create(System.String)">
            <summary>
            Creates print provider for specified document
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Pdf.Creators.ImagePrintProvider">
            <summary>
            Represents Image Print Provider
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.ImagePrintProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Creators.ImagePrintProvider"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Creators.ImagePrintProvider.SupportedExtensions">
            <summary>
            Gets the supported extensions.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Creators.ImagePrintProvider.Print(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Prints the specified paths.
            </summary>
            <param name="paths">The paths.</param>
        </member>
        <member name="T:SolidFramework.Pdf.Duplex">
            <summary>
            Represents types of Duplex
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Duplex.Simplex">
            <summary>Simplex duplex </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Duplex.DuplexFlipShortEdge">
            <summary>Flip Short Edge duplex </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Duplex.DuplexFlipLongEdge">
            <summary>Flip Long Edge duplex </summary>
        </member>
        <member name="T:SolidFramework.Pdf.EncryptedComponents">
            <summary>
            Represents types of Encrypted Components.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptedComponents.None">
            <summary>Type os Encrypted Components is None. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptedComponents.All">
            <summary>Type os Encrypted Components is All. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptedComponents.AllExceptMetadata">
            <summary>Type os Encrypted Components is All Except Metadata. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptedComponents.OnlyFileAttachments">
            <summary>Type os Encrypted Components is Only File Attachments. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.EncryptionAlgorithm">
            <summary>
            Represents types of Encryption algorithm
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Undefined">
            <summary>Undefined Encryption Algorithm </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Acrobat3">
            <summary>Acrobat 3 Encryption Algorithm </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.RC440Bit">
            <summary>Encryption Algorithm is RC4 40 bits (Acrobat 3) </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Acrobat5">
            <summary>Acrobat 5 Encryption Algorithm </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.RC4128Bit">
            <summary>Encryption Algorithm is RC4 128 bits (Acrobat 5) </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Acrobat7">
            <summary>Acrobat 7 Encryption Algorithm </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Aes128Bits">
            <summary>Encryption Algorithm is AES 128 bits (Acrobat 7) </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Acrobat9">
            <summary>Acrobat 9 Encryption Algorithm </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Aes256Bits">
            <summary>Encryption Algorithm is AES 256 bits (Acrobat 9) </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.AcrobatX">
            <summary>Acrobat X Encryption Algorithm </summary>
        </member>
        <member name="F:SolidFramework.Pdf.EncryptionAlgorithm.Aes256BitsX">
            <summary>Encryption Algorithm is AES 256 bits (Acrobat X) </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Info">
            <summary>
            Represents PDF Info
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Info.Create(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Creates the specified document.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Pdf.Info.Title">
            <summary>
            Gets the title of the document
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.Author">
            <summary>
            Gets the author of the document
            </summary>
            <value>
            The author.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.Subject">
            <summary>
            Gets the subject of the document
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.Keywords">
            <summary>
            Gets the keywords of the document
            </summary>
            <value>
            The keywords.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.Creator">
            <summary>
            Gets the creator of the document
            </summary>
            <value>
            The creator.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.Producer">
            <summary>
            Gets the producer of the document
            </summary>
            <value>
            The producer.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.CreationDate">
            <summary>
            Gets the creation date of the document
            </summary>
            <value>
            The creation date.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Info.ModificationDate">
            <summary>
            Gets the modification date of the document
            </summary>
            <value>
            The modification date.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Interop.CacheDrawingType">
            <summary>
            Represents types of page drawing with cache
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Interop.CacheDrawingType.UseResettedCache">
            <summary>Page drawing with cache. Cache is resetted before page drawing </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Interop.CacheDrawingType.UseCache">
            <summary>Page drawing with cache. Cache isn't resetted before page drawing </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Interop.DrawingCore">
            <summary>
            Represents types of Drawing core
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Interop.DrawingCore.Gdi">
            <summary>Drawing core is GDI </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Interop.DrawingCore.GdiPlus">
            <summary>Drawing core is GDI Plus </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Interop.DrawingCore.Agg">
            <summary>Drawing core is AGG </summary>
        </member>
        <member name="T:SolidFramework.Pdf.NonFullScreenPageMode">
            <summary>
            Represents types of Non full screen page mode
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.NonFullScreenPageMode.UseNone">
            <summary>None </summary>
            <summary>None </summary>
        </member>
        <member name="F:SolidFramework.Pdf.NonFullScreenPageMode.UseOutlines">
            <summary>Use outlines </summary>
            <summary>Use Outlines </summary>
        </member>
        <member name="F:SolidFramework.Pdf.NonFullScreenPageMode.UseThumbs">
            <summary>Use Thumbs </summary>
            <summary>Use Thumbs </summary>
        </member>
        <member name="F:SolidFramework.Pdf.NonFullScreenPageMode.UseOC">
            <summary>Use OC </summary>
            <summary>Use OC </summary>
        </member>
        <member name="F:SolidFramework.Pdf.NonFullScreenPageMode.UseAttachments">
            <summary>Use Attachments </summary>
            <summary>Use Attachments </summary>
        </member>
        <member name="T:SolidFramework.Pdf.OptionalContentProperties">
            <summary>
            Represents Optional content properties
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.OptionalContentProperties.Create(SolidFramework.Pdf.Catalog)">
            <summary>
            Creates Optional Content Properties from the specified catalog.
            </summary>
            <param name="catalog">The catalog.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Pdf.OptionalContentProperties.OptionalContentGroups">
            <summary>
            Gets the optional content groups.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.OptionalContentProperties.Default">
            <summary>
            Gets the default dictionary
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.OptionalContentProperties.AlternateConfigurations">
            <summary>
            Gets the alternate configurations.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.PageBoundary">
            <summary>
            Represents types of Page boundaries
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PageBoundary.CropBox">
            <summary>Page boundaries is CropBox </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PageBoundary.MediaBox">
            <summary>Page boundaries MediaBox </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PageBoundary.BleedBox">
            <summary>Page boundaries BleedBox </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PageBoundary.TrimBox">
            <summary>Page boundaries TrimBox </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PageBoundary.ArtBox">
            <summary>Page boundaries ArtBox </summary>
        </member>
        <member name="T:SolidFramework.Pdf.PdfCertificateSecurityHandler">
            <summary>
            Represents types of Pdf Certificate Security Handler.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.PdfDocument"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.PdfDocument"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Catalog">
            <summary>
            Gets the catalog.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Extension">
            <summary>
            Gets the extension.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.RemoveStructTreeRoot">
            <summary>
            Removes "tagging" from the PdfDocument. 
            If the PdfDocument was not tagged then this has no effect.
            </summary>
            <remarks>
            Tagging is used to indicate structure within the PdfDocument.
            Where text is tagged as being part of a table this will, if <c>DetectTaggedTables</c> is true, cause the text to always be extracted as a table, 
            rather than the text being considered to be a table only if it "looks" like a table. 
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.Save(SolidFramework.Plumbing.OverwriteMode,SolidFramework.PageRange)">
            <summary>
            Saves the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="pageRange">The page range.</param>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.InquireUserPasswordByOwnerPassword(System.String)">
            <summary>
             InquireUserPasswordByOwnerPassword returns user password by owner password for password security handlers. Works for revisions prior to Acrobat 9. 
             In case of failure return null string 
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Info">
            <summary>
            Gets the info.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Trailer">
            <summary>
            Gets the trailer.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Root">
            <summary>
            Gets the root.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Version">
            <summary>
            Gets the version using either Catalog.Version or file header.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.SetOutputID(SolidFramework.BytesArray,SolidFramework.BytesArray)">
            <summary>
            Sets the ID to use when the document is saved.
            </summary>
            <param name="permanentIdentifier">Specifies the first part of the ID (this should be unique for new PDFs but can remain unchanged when modifying an existing PDF).</param>
            <param name="changingIdentifier">Specifies the second part of the ID (this should change each time the PDF is modified).</param>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.CatalogDictionary">
            <summary>
            Gets the catalog dictionary.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.IDArray">
            <summary>
            Gets the ID array.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.InfoDictionary">
            <summary>
            Gets the info dictionary.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.DecodeAllStreams">
            <summary>
            Decodes all streams.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.Append(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Appends the specified PDF document to append.
            </summary>
            <param name="pdfDocumentToAppend">The PDF document to append.</param>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.GetFonts">
            <summary>
            Gets the fonts used in this document.
            </summary>
            <returns>
            The fonts.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.GetPages">
            <summary>
            Gets the pages.
            </summary>
            <returns>
            The pages.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocument.NativeDataBase">
            <summary>
            Gets the native data base.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.AuthenticationMode">
            <summary>
            Gets the authentication mode.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.EncryptionAlgorithm">
            <summary>
            Gets or sets the encryption algorithm.
            </summary>
            <value>
            The encryption algorithm.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>
            The permissions.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.IsLinearized">
            <summary>
            Determines if the PDF is "fast web view" using the header
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocument.IsModified">
            <summary>
            Gets a value indicating whether this document is modified.
            </summary>
            <value>
                <c>true</c> if this document is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Pdf.PdfDocument at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Pdf.PdfDocument at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.CopyTo(SolidFramework.Pdf.PdfDocument[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.CopyTo(SolidFramework.Pdf.PdfDocument[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.CopyTo(System.Int32,SolidFramework.Pdf.PdfDocument[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator.#ctor(SolidFramework.Pdf.PdfDocumentsCollection)">
            <summary>
            Creates a new instance of the PdfDocumentsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Pdf.PdfDocument element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.PdfDocumentsCollection.PdfDocumentsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Pdf.PdfPasswordSecurityHandler">
            <summary>
            Represents types of Pdf Password Security Handler.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfPasswordSecurityHandler.OpenPassword">
            <summary>
            Gets the open password.
            </summary>
            <value>
            The open password.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.PdfPasswordSecurityHandler.OwnerPassword">
            <summary>
            Gets the owner password.
            </summary>
            <value>
            The owner password.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.PdfSecurityHandler">
            <summary>
            Represents types of Pdf Security Handler.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.PdfSecurityHandler.IsOwner">
            <summary>
            Gets a value indicating whether this instance is owner.
            </summary>
            <value>
              <c>true</c> if this instance is owner; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.PdfSecurityHandler.Permissions">
            <summary>
            Gets the permissions.
            </summary>
            <value>
            The permissions.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.PdfSecurityHandler.EncryptionAlgorithm">
            <summary>
            Gets the encryption algorithm.
            </summary>
            <value>
            The encryption algorithm.
            </value>
        </member>
        <member name="F:SolidFramework.Pdf.PdfSecurityHandlerType.PdfSecurityHandler">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.PdfSecurityHandlerType.PdfPasswordSecurityHandler">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.PdfSecurityHandlerType.PdfCertificateSecurityHandler">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontStatus.Unknown">
            <summary>Font status is unknown </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontStatus.BuiltIn">
            <summary>Font is built-in </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontStatus.Subset">
            <summary>Font has subset font program </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontStatus.Embedded">
            <summary>Font has embedded font program </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontStatus.NonEmbedded">
            <summary>Font has embedded font program </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.FontType">
            <summary>
            Represents types of Font. For a description of Font Types see https://en.wikipedia.org/wiki/Computer_font
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontType.Unknown">
            <summary>Font is unknown </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontType.Type1">
            <summary>Font type is Type1 </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontType.Type3">
            <summary>Font type is Type3 </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontType.MMType1">
            <summary>Font type is Type1 </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontType.TrueType">
            <summary>Font type is TrueType </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.FontType.Type0">
            <summary>Font type is Type0 </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PageStatistics">
            <summary>
            Used by GetScannedImage to return details of the content analysis for the page.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.None">
            <summary>Not set. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.Image">
            <summary>Page contains at least one image. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.VisibleText">
            <summary>Page contains visible text. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.InvisibleText">
            <summary>Page contains invisible text. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.VectorGraphics">
            <summary>Page contains vector graphics. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.LowResImage">
            <summary>Page contains at least one image. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.TooComplex">
            <summary>Page contains more than 10,000 objects </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.Empty">
            <summary>Page has no content. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PageStatistics.VectorText">
            <summary>Page contains vector text </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfAction">
            <summary>
            Represents PDF action
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfAction.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfAction"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfAction.D">
            <summary>
            Gets the D.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfAction.S">
            <summary>
            Gets the S.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfAnnot">
            <summary>
            Represents PDF annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfAnnot"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfAnnot.Subtype">
            <summary>
            Gets the type of annotation that this dictionary describes.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfAnnot.Rect">
            <summary>
            Gets the annotation rectangle, defining the location of the annotation on the page in default user space units.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfAnnot.Contents">
            <summary>
            Gets the contents.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfAnnot.Modified">
            <summary>
            Gets the date and time when the annotation was most recently modified.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfArray">
            <summary>
            Represents PDF array
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfArray" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.GetPdfArrayItemsCollection">
            <summary>
            Returns reference to PdfArrayItemsCollection object.
            PdfArrayItemsCollection implements System.Collections.IEnumerable
            and System.Collections.Generic.IList{PdfItem} interfaces in C#
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.Clear">
            <summary>
            Removes all items from the array.
            </summary>
            <exception cref="T:System.NotSupportedException">The array is read-only. </exception>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.IsFixedSize">
            <summary>
            Gets a value indicating whether this instance has fixed size.
            </summary>
            <value>
                <c>true</c> if this instance is fixed size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the array is read-only.
            </summary>
            <returns><c>true</c> if the array is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArray.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value>
                <c>true</c> if this instance is synchronized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArray.Count">
            <summary>
            Gets the items count.
            </summary>
            <returns>The number of elements contained in the array.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Pdf.Plumbing.PdfItem at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Pdf.Plumbing.PdfItem at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.CopyTo(SolidFramework.Pdf.Plumbing.PdfItem[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.CopyTo(SolidFramework.Pdf.Plumbing.PdfItem[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.CopyTo(System.Int32,SolidFramework.Pdf.Plumbing.PdfItem[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator.#ctor(SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection)">
            <summary>
            Creates a new instance of the PdfArrayItemsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Pdf.Plumbing.PdfItem element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfArrayItemsCollection.PdfArrayItemsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfBoolean">
            <summary>
            Represents PDF boolean
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfBoolean.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfBoolean" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfBoolean.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfBoolean.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfCaretAnnot">
            <summary>
            Represents PDF caret annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfCaretAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfCaretAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfCircleAnnot">
            <summary>
            Represents PDF circle annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfCircleAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfCircleAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfDate">
            <summary>
            Represents PDF date
            ISO/IEC 8824 - see PDF Reference
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfDate"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfDate"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.GetUtcOffsetDefined">
            <summary>
            Gets a value indicating whether [UTC offset defined].
            </summary>
            <value>
              <c>true</c> if [UTC offset defined]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.SetUtcOffsetDefined(System.Boolean)">
            <summary>
            Sets a value indicating whether [UTC offset defined].
            </summary>
            <value>
              <c>true</c> if [UTC offset defined]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDate.DateTime">
            <summary>
            Gets value.
            </summary>
            <value>
            Value
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.ToStringXmp">
            <summary>
            Converts to the string XMP.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.Parse(System.String)">
            <summary>Parses a PdfDate from the specified string or throws an exception if it can't be parsed.</summary>
            <param name="date">The string to parse.</param>
            <returns>The PdfDate that was parsed from the string.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDate.TryParse(System.String,SolidFramework.Pdf.Plumbing.PdfDate@)">
            <summary>Attempts to parse a PdfDate from the specified string.</summary>
            <param name="date">The string to parse.</param>
            <param name="result">A PdfDate to store the result into. This will be set to null if <paramref name="date" /> couldn't be parsed.</param>
            <returns>true if <paramref name="date" /> was parsed successfully; otherwise, false.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDate.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfDictionary">
            <summary>
            Represents PDF dictionary
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfDictionary" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDictionary.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.TryGetValue(System.String,SolidFramework.Pdf.Plumbing.PdfItem@)">
            <summary>Retrieves the value for the given key, if possible.</summary>
            <returns>true if there is a value present for the specified key; otherwise, false.</returns>
            <param name="key">The key associated with the value to retrieve.</param>
            <param name="value">The value associated with the specified key.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key" /> is null.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDictionary.Keys">
            <summary>Gets an <see cref="T: System.Collections.ICollection" /> containing the keys of the <see cref="T: System.Collections.IDictionary" />.</summary>
            <returns>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDictionary.Values">
            <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</summary>
            <returns>An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,SolidFramework.Pdf.Plumbing.PdfItem})">
            <summary>Adds an item containing a key and value to the <see cref="T:System.Collections.Generic.IDictionary" />.</summary>
            <param name="item">A KeyValuePair that contains the key and value of the itme to be add.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,SolidFramework.Pdf.Plumbing.PdfItem})">
            <summary>Removes the element with the specified key from the <see cref="T:Dictionary" />.</summary>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:Dictionary" />.</returns>
            <param name="item">PdfItem to be removed.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,SolidFramework.Pdf.Plumbing.PdfItem})">
            <summary>Determines whether the <see cref="T:Dictionary" /> contains an element with the key specified in item.</summary>
            <returns>true if the <see cref="T:SDictionary" /> contains an element with the key; otherwise, false.</returns>
            <param name="item">A KeyValuePair containing the key to locate in the <see cref="T:Dictionary" />.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,SolidFramework.Pdf.Plumbing.PdfItem}[])">
            <summary>
             Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,SolidFramework.Pdf.Plumbing.PdfItem}[],System.Int32)">
            <summary>
             Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:Dictionary" />.</summary>
            <returns>An <see cref="T:System.Collections.Enumerator" /> for the <see cref="T:Dictionary" />.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDictionary.Item(System.String)">
            <summary>
            Gets the elements of the dictionary at the specified index.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDictionary.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>
            <c>true</c> if the dictionary contains an element with the key; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.Add(System.String,SolidFramework.Pdf.Plumbing.PdfItem)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.Clear">
            <summary>
            Removes all items from the dictionary.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfDictionary.ClearMetadata">
            <summary>
            Clears the metadata.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfDictionary.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
            <returns>The number of elements contained in the dictionary.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfDictionaryItemsCollection.PdfDictionaryItemsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfFileAttachmentAnnot">
            <summary>
            Represents PDF file attachment annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFileAttachmentAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfFileAttachmentAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfFont">
            <summary>
            Represents PDF font.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfFont" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.IsPredefinedEncoding">
            <summary>
            Gets a value indicating whether this instance has the predefined encoding.
            </summary>
            <value>
            <c>true</c> if this instance has the predefined encoding; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFont.BaseFontName">
            <summary>
            Gets a base font name.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.IsBuiltIn">
            <summary>
            Gets a value indicating whether this instance is built in.
            </summary>
            <value>
            <c>true</c> if this instance is built in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.IsSubset">
            <summary>
            Gets a value indicating whether this instance is subset.
            </summary>
            <value>
              <c>true</c> if this instance is subset; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.IsSymbolic">
            <summary>
            Gets a value indicating whether this instance is symbolic.
            </summary>
            <value>
            <c>true</c> if this instance is symbolic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.IsEmbedded">
            <summary>
            Gets a value indicating whether this instance is embedded.
            </summary>
            <value>
            <c>true</c> if this instance is embedded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFont.HasToUnicode">
            <summary>
            Gets a value indicating whether this instance has to unicode.
            </summary>
            <value>
            <c>true</c> if this instance has to unicode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFont.PdfFontType">
            <summary>
            Gets the font type.
            </summary>
            <value>
            The font type.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Pdf.Plumbing.PdfFont at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Pdf.Plumbing.PdfFont at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.CopyTo(SolidFramework.Pdf.Plumbing.PdfFont[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.CopyTo(SolidFramework.Pdf.Plumbing.PdfFont[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.CopyTo(System.Int32,SolidFramework.Pdf.Plumbing.PdfFont[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator.#ctor(SolidFramework.Pdf.Plumbing.PdfFontsCollection)">
            <summary>
            Creates a new instance of the PdfFontsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Pdf.Plumbing.PdfFont element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFontsCollection.PdfFontsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfFreeTextAnnot">
            <summary>
            Represents PDF free text annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfFreeTextAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfFreeTextAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfGoTo">
            <summary>
            Represents PDF GoTo Action
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfGoTo.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfGoTo"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfHighlightAnnot">
            <summary>
            Represents PDF highlight annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfHighlightAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfHighlightAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfInkAnnot">
            <summary>
            Represents PDF ink annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfInkAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfInkAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfItem">
            <summary>
            Represents PDF item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfItem.PdfObjectType">
            <summary>
            Gets the type of the PDF object.
            </summary>
            <value>
            The type of the PDF object.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfKids">
            <summary>
            Represents PDF kids
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfKids.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfKids" /> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfLineAnnot">
            <summary>
            Represents PDF line annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfLineAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfLineAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfLink">
            <summary>
            Represents PDF link
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfLink.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfLink"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfLink.A">
            <summary>
            Gets the A.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfLink.Dest">
            <summary>
            Gets the dest.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot">
            <summary>
            Represents PDF markup annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot.T">
            <summary>
            Gets the text label to be displayed in the title bar of the annotation's pop-up window when open and active.
            By convention, this entry identifies the user who added the annotation.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot.GetRC">
            <summary>
            Gets a rich text string to be displayed in the pop-up window when the annotation is opened.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfMarkupAnnot.Subj">
            <summary>
            Gets text representing a short description of the subject being addressed by the annotation.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfName">
            <summary>
            Represents PDF named object
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfName.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfName" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfName.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfNamedDestinationsCollection.PdfNamedDestinationsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfNull">
            <summary>
            Represents PDF null
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfNull.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfNull" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfNull.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfNumber">
            <summary>
            Represents PDF number
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfNumber.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfNumber" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfNumber.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfObject">
            <summary>
            Represents PDF object
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfObject.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfObject" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfObject.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfObject.GenerationId">
            <summary>
            Gets the generation ID.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfObject.ObjectId">
            <summary>
            Gets the object ID.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfObjectType">
            <summary>
            Represents types of PDF object
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Unknown">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Object">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Reference">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Dictionary">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Array">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Stream">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Boolean">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Number">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.String">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Name">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Null">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Rectangle">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Kids">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Font">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.OutlineItem">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Outlines">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Page">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Pages">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Action">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.GoTo">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Uri">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Annot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.Link">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.PopupAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.MarkupAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.TextAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.FreeTextAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.LineAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.SquareAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.CircleAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.PolygonAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.PolyLineAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.HighlightAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.UnderlineAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.SquigglyAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.StrikeOutAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.StampAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.CaretAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.InkAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.FileAttachmentAnnot">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Plumbing.PdfObjectType.SoundAnnot">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfOutlineItem">
            <summary>
            Represents PDF outline item
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfOutlineItem.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfOutlineItem"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.Dest">
            <summary>
            Gets the destination.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.First">
            <summary>
            Gets the first item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.Next">
            <summary>
            Gets the next item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.Last">
            <summary>
            Gets the last item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.Prev">
            <summary>
            Gets the previous item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.A">
            <summary>
            Gets the A.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlineItem.OpenItems">
            <summary>
            Gets the open items.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfOutlines">
            <summary>
            Represents PDF outlines
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfOutlines.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfOutlines"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlines.First">
            <summary>
            Gets the first item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlines.Last">
            <summary>
            Gets the last item
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfOutlines.OpenItems">
            <summary>
            Gets the open items.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfPage">
            <summary>
            Represents a single page within a PDF document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfPage"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.Contents">
            <summary>
            Gets the contents.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.Resources">
            <summary>
            Gets the resources.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.MediaBox">
            <summary>
            Gets the media box. This is a rectangle, expressed in points with the origin at the bottom left corner, defining the boundaries of the physical 
            medium on which the page is intented to be displayed or printed.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.CropBox">
            <summary>
            Gets the crop box. This is a rectangle, expressed in points with the origin at the bottom left corner, defining the visible region of 
            the page. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. 
            This property may be <c>null</c>, in which case use the <c>MediaBox</c> property.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.BleedBox">
            <summary>
            Gets the bleed box. This is a rectangle, expressed in points with the origin at the bottom left corner, defining the size of 
            the page to which the contents need tobe clipped in a "production" environment.
            When the page is printed, its contents are to be clipped (cropped) to this rectangle. 
            This property may be <c>null</c>, in which case use the <c>CropBox</c> property.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.TrimBox">
            <summary>
            Gets the trim box. This is a rectangle, expressed in points with the origin at the bottom left corner, defining the intended size of 
            the finished page.
            This property may be <c>null</c>, in which case use the <c>CropBox</c> property.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.ArtBox">
            <summary>
            Gets the art box. This is a rectangle, expressed in points with the origin at the bottom left corner, defining the extent of the page 
            meaningful content (including potential white space). 
            This property may be <c>null</c>, in which case use the <c>CropBox</c> property.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.LastModified">
            <summary>
            Gets the time when the page was last modified. this may be <c>null</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.OriginalReference">
            <summary>
            Gets the original reference.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Pdf.Plumbing.PdfReference" /> that contains the original reference.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.Annots">
            <summary>
            Gets the annotations.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Pdf.Plumbing.PdfArray" /> containing the annotations if there are any. This method may return <c>null</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.VisibleBox">
            <summary>
            Gets the visible box. This is the intersection of the MediaBox and CropBox.
            </summary>
            <returns>
            A <see cref= "T:SolidFramework.Interop.RectangleF" /> that shows that area of the page that is actually visible, isnce it is possible for the CropBox and MediaBox to not co-incide.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.SearchText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the visible text on the page for the <c>searchText</c>.
            </summary>
            <param name="searchText">Text to search for.</param>
            <param name="matchCase">Specifies whether matches should be case sensitive.</param>
            <param name="matchWholeWord">Specifies whether matches should require that the found words exactly match the search string.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.LoadPage">
            <summary>
            Loads the page into the document.
            </summary>
            <returns>
            This method always returns 0.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.AutoRotate">
            <summary>
            Auto rotates the document, and returns the angle by which the document was rotated.
            </summary>
            <returns> The angle (in degrees) by which the document was rotated.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.Deskew">
            <summary>
            Deskew.
            </summary>
            <returns>The angle (in degrees) by which the documented was rotated to remove the skew.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.DrawBitmap(System.Int32)">
            <summary>
            Draws the bitmap using GDIplus and without resetting the cache before drawing.
            </summary>
            <param name="nDpi">The dpi to be used when generating the image.</param>
            <returns>A <see cref="T:SolidFramework.Interop.Bitmap" /> that is the thumbnail for the page.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.DrawBitmap(System.Int32,SolidFramework.Pdf.Interop.DrawingCore,SolidFramework.Pdf.Interop.CacheDrawingType)">
            <summary>
            Draws the bitmap.
            </summary>
            <param name="nDpi">The dpi to be used when generating the image.</param>
            <param name="drawingCore">The library to be used for drawing.</param>
            <param name="cache">The cache type - determines whether the cache is reset before drawing.</param>
            <returns>A <see cref="T:SolidFramework.Interop.Bitmap" /> that is the thumbnail for the page.</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.GetPageStatistics">
            <summary>
            Gets information about the items that the page contains. e.g. Images, visible text, invisible text, etc.
            </summary>
            <returns>
            A flag that indicatates which features are available. A value of None indicates that no information is avaialble.
            </returns>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPage.GetScannedImage">
            <summary>
            Gets the scanned image if the page was scanned, otherwise returns null.
            </summary>
            <returns>
            A <see cref="T:SolidFramework.Imaging.Image" /> if the page was scanned, otherwise <c>nullptr</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.IsScanned">
            <summary>
            Determines if the page is scanned (needing OCR). This will also return true if the page contains vector text.
            </summary>
            <returns>
            <c>true</c> if the page requires OCR; otherwise <c>false</c> indicating that the file contains font-based text.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.Rotation">
            <summary>
            Gets the angle by which the page has been rotated. The only values that should be used are -270,-180,-90,90,180 and 270.
            However other values can be entered and the rendering engine will show the page rotated by whichever orientation is closest to the specified value.
            </summary>
            <returns>
            Angle in degrees by which the page has been rotated.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.IsVectorText">
            <summary>
            Determines if the page contains vector text (typically drawn by CAD) which would need OCR.
            </summary>
            <returns>
            <c>true</c> if the page contains vector text that requires OCR; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.UserUnit">
            <summary>
            Gets or sets the UserUnit which is 1.0 by default and is multiples of 1/72 inch (points).
            </summary>
            <returns>
            The UserUnit in points.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPage.HasInvisibleText">
            <summary>
            Determines if the page contains hidden text (text render mode 3 used for searchable text in scanned documents).
            </summary>
            <returns>
            <c>true</c> if the page contains hidden text; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfPages">
            <summary>
            Represents PDF page collection
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfPages"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPages.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetResources">
            <summary>
            Gets the resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetMediaBox">
            <summary>
            Gets the media box.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetCropBox">
            <summary>
            Gets the crop box.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetBleedBox">
            <summary>
            Gets the bleed box.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetTrimBox">
            <summary>
            Gets the trim box.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetArtBox">
            <summary>
            Gets the art box.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPages.Kids">
            <summary>
            Gets the kids.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPages.GetRotation">
            <summary>
            Gets the angle
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPages.PageCount">
            <summary>
            Gets the page count.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Pdf.Plumbing.PdfPage at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Pdf.Plumbing.PdfPage at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.CopyTo(SolidFramework.Pdf.Plumbing.PdfPage[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.CopyTo(SolidFramework.Pdf.Plumbing.PdfPage[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.CopyTo(System.Int32,SolidFramework.Pdf.Plumbing.PdfPage[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator.#ctor(SolidFramework.Pdf.Plumbing.PdfPagesCollection)">
            <summary>
            Creates a new instance of the PdfPagesCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Pdf.Plumbing.PdfPage element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPagesCollection.PdfPagesCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfPolygonAnnot">
            <summary>
            Represents PDF polygon annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPolygonAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfPolygonAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfPolyLineAnnot">
            <summary>
            Represents PDF polyline annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPolyLineAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfPolyLineAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfPopupAnnot">
            <summary>
            Represents PDF highlight
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfPopupAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfPopupAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfRectangle">
            <summary>
            Represents PDF rectangle
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfRectangle.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfRectangle"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfRectangle.#ctor(SolidFramework.Pdf.PdfDocument,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            y and x axis details for the RectangleF
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfRectangle.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfRectangle.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfRectangle.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfRectangle.Bottom">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfReference">
            <summary>
            Represents PDF reference
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfReference.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfReference" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfReference.Object">
            <summary>
            Gets the pdf object.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfReference.GenerationId">
            <summary>
            Gets the generation ID.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfReference.ObjectId">
            <summary>
            Gets the object ID.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfSoundAnnot">
            <summary>
            Represents PDF sound annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfSoundAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfSoundAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfSquareAnnot">
            <summary>
            Represents PDF square annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfSquareAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfSquareAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfSquigglyAnnot">
            <summary>
            Represents PDF squiggly annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfSquigglyAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfSquigglyAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfStampAnnot">
            <summary>
            Represents PDF stamp annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfStampAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfStampAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfStreamObject">
            <summary>
            Represents PDF stream object
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfStreamObject.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfStreamObject" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfStreamObject.GetDataAsString">
            <summary>
            Gets the data as string.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfStreamObject.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfStreamObject.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfStreamObject.DataLength">
            <summary>
            Gets the data length.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfStrikeOutAnnot">
            <summary>
            Represents PDF strike out annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfStrikeOutAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfStrikeOutAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfString">
            <summary>
            Represents PDF string
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfString.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfString" /> class.
            </summary>
            <param name="pdfDocument">The PDF document.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfString.RawValue">
            <summary>
            Gets the raw value.
            </summary>
            <value>
            The raw value.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Plumbing.PdfString.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfTextAnnot">
            <summary>
            Represents PDF text annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfTextAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfTextAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfUnderlineAnnot">
            <summary>
            Represents PDF underline annotation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfUnderlineAnnot.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfUnderlineAnnot"/> class.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Plumbing.PdfUriDictionary">
            <summary>
            Represents PDF URI dictionary
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfUriDictionary.#ctor(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Plumbing.PdfUriDictionary"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Plumbing.PdfUriDictionary.GetUri">
            <summary>
            Gets the URI.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.FitToPage">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_25">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_50">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_75">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.ActualSize">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_125">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_150">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_175">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Printing.PrintPageScale.Percentages_200">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Pdf.PrintScaling">
            <summary>
            Represents types of Print scaling
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PrintScaling.AppDefault">
            <summary>Application default </summary>
        </member>
        <member name="F:SolidFramework.Pdf.PrintScaling.None">
            <summary>None </summary>
        </member>
        <member name="T:SolidFramework.Pdf.ReadingDirection">
            <summary>
            Represents types of Reading direction
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.ReadingDirection.L2R">
            <summary>Left to right reading direction </summary>
        </member>
        <member name="F:SolidFramework.Pdf.ReadingDirection.R2L">
            <summary>Right to left reading direction </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Repair.RepairResult">
            <summary>
            Builds the results of the repair, for example xref table rebuilt, duplicate object resolution, stream Length correction, etc
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.None">
            <summary>No repairs were made </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.Repaired">
            <summary>Items repaired like xref table rebuilt, duplicate object resolution, stream Length correction </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.NoPages">
            <summary>Checks if there are no pages in the file </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.NoCatalog">
            <summary>Unable to repair as no document dictionary catelogue was found in the file. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.NotPDF">
            <summary>content of file is not PDF </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.NotXRef">
            <summary>cannot repair PDF containing XRefStm or ObjStm yet </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.DuplicateObject">
            <summary>unresolvable duplicate object (same generation or file revision and not same /Type) </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.RepairResult.NotRepaired">
            <summary>Items repaired like xref table rebuilt, duplicate object resolution, stream Length correction </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Repair.RepairXRef">
            <summary>
            Builds the results of the repair, for example xref table rebuilt, duplicate object resolution, stream Length correction, etc
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.StringType.Literal">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.StringType.PDFDocEncoding">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.StringType.UTF16_BE">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.StringType.UTF16_LE">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Repair.StringType.Hexidecimal">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAProblem">
            <summary>
            Represents PDF/A problem
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblem.Section">
            <summary>
            Gets the section.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblem.Severity">
            <summary>
            Gets the severity.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblem.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblem.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblem.Matched">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Pdf.Reports.PdfAProblem"/> is matched.
            </summary>
            <value>
              <c>true</c> if matched; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAProblemClass">
            <summary>
            Represents PDF/A problem class
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemClass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Reports.PdfAProblemClass"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemClass.Compare(SolidFramework.Pdf.Reports.PdfAProblemClass,System.Boolean)">
            <summary>
            Compares the specified objects.
            </summary>
            <param name="other">The other</param>
            <param name="showWarnings">if set to <c>true</c> [show warnings].</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAProblemClassesCollection.PdfAProblemClassesCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Pdf.Reports.PdfAProblem at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Pdf.Reports.PdfAProblem at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.CopyTo(SolidFramework.Pdf.Reports.PdfAProblem[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.CopyTo(SolidFramework.Pdf.Reports.PdfAProblem[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.CopyTo(System.Int32,SolidFramework.Pdf.Reports.PdfAProblem[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator.#ctor(SolidFramework.Pdf.Reports.PdfAProblemsCollection)">
            <summary>
            Creates a new instance of the PdfAProblemsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Pdf.Reports.PdfAProblem element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAProblemsCollection.PdfAProblemsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAReport">
            <summary>
            Represents PDF/A report
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAReport.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Pdf.Reports.PdfAReport"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAReport.Save(System.String)">
            <summary>
            Saves to the specified file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAReport.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <value>
            The name of the application.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAReport.Encrypted">
            <summary>
            At least one of the results was an encrypted PDF
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Reports.PdfAReport.MissingStructTreeRoot">
            <summary>
            At least one of the results had missing 'StructTreeRoot' (Tags)
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAResult">
            <summary>
            Represents PDF/A result
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Reports.PdfAResult.Compare(SolidFramework.Pdf.Reports.PdfAResult,System.Boolean)">
            <summary>
            Compares the specified objects.
            </summary>
            <param name="other">The other</param>
            <param name="showWarnings">if set to <c>true</c> [show warnings].</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Pdf.Reports.PdfAResultsCollection.PdfAResultsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SolidFramework.Pdf.RestrictedChangesAllowed">
            <summary>
            Represents types of Restricted Changes Allowed.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedChangesAllowed.None">
            <summary>Type of Restricted Changes Allowed is None. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedChangesAllowed.InsertDeleteRotatePages">
            <summary>Type of Restricted Changes Allowed is Insert Delete Rotate Pages. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedChangesAllowed.FormsAndSignature">
            <summary>Type of Restricted Changes Allowed is Forms And Signature. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedChangesAllowed.CommentsAndFormsAndSignature">
            <summary>Type of Restricted Changes Allowed is Forms And Signature. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedChangesAllowed.AllButExtraction">
            <summary>Type of Restricted Changes Allowed is All But Extraction. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.RestrictedPrinting">
            <summary>
            Represents types of Restricted Printing.
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedPrinting.None">
            <summary>Type of Restricted Printing is None. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedPrinting.LowResolution">
            <summary>Type of Restricted Printing is Low Resolution. </summary>
        </member>
        <member name="F:SolidFramework.Pdf.RestrictedPrinting.HighResolution">
            <summary>Type of Restricted Printing is High Resolution. </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer">
            <summary>
            Represents password security pdf transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.#ctor">
            <summary>
            Default constructor of <c>CertificateSecurityTransformer</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.#ctor(SolidFramework.Pdf.EncryptionAlgorithm)">
            <summary>
            Constructor with defined certificate. Assess permission is None
            </summary>
            <param name="algorithm">Encryption algorithm</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.#ctor(SolidFramework.Pdf.EncryptionAlgorithm,SolidFramework.Pdf.AccessPermissions)">
            <summary>
            Constructor with defined all encryption parameters
            </summary>
            <param name="algorithm">Encryption algorithm</param>
            <param name="permission">Assess permission</param>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.EncryptionAlgorithm">
            <summary>
            Encryption algorithm for documents
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.Permission">
            <summary>
            Assess permission for user security
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,SolidFramework.Pdf.EncryptionAlgorithm)">
            <summary>
            Constructor with defined certificate. Assess permission is None
            </summary>
            <param name="ownerCertificate">Owner certificate for encryption</param>
            <param name="algorithm">Encryption algorithm</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,SolidFramework.Pdf.EncryptionAlgorithm,SolidFramework.Pdf.AccessPermissions)">
            <summary>
            Constructor with defined all encryption parameters
            </summary>
            <param name="ownerCertificate">Owner certificate for encryption</param>
            <param name="algorithm">Encryption algorithm</param>
            <param name="permission">Assess permission</param>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.OwnerCertificate">
            <summary>
            Certificate for encryption
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.UserCertificates">
            <summary>
            List of user certificates
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.ClearUserCertificates">
            <summary>
            Clears user certificates list
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.AddUserCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds user certificate
            </summary>
            <param name="userCertificate">User certificate for adding</param>
            <returns>This transformer for chains</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.LoadOwnerCertificate(System.String,System.String)">
            <summary>
            Static function for importing owner certificate
            </summary>
            <param name="pathToCertificateFile">Path to certificate file</param>
            <param name="password">Password for certificate (owner)</param>
            <returns>Loaded certificate</returns>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.CertificateSecurityTransformer.LoadUserCertificate(System.String)">
            <summary>
            Static function for importing user certificate
            </summary>
            <param name="pathToCertificateFile"></param>
            <returns>Loaded certificate</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.ImageWatermarkTransformer">
            <summary>
            Represents image watermark pdf transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ImageWatermarkTransformer.#ctor">
            <summary>
            Default constructor of <c>ImageWatermarkTransformer</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ImageWatermarkTransformer.#ctor(SolidFramework.Converters.Plumbing.ImageWatermark)">
            <summary>
            Constructor with defined <c>ImageWatermark</c> object
            </summary>
            <param name="watermark">Image watermark for adding</param>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ImageWatermarkTransformer.ImageWatermark">
            <summary>
            Image watermark for adding
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.IRecognize">
            <summary>
            Represents interface for recognizing pdf document
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.IRecognize.OcrLanguage">
            <summary>
            Sets language for OCR
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.IRecognize.Recognize">
            <summary>
            Starts the recognizing
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.IRecognize.OcrAlways">
            <summary>
            Does OCR for each page in the document
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.IRecognize.OcrAutoRotate">
            <summary>
            Does auto rotate pages or not
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.IRecognize.OcrType">
            <summary>
            Type of recognizing
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.IRecognize.OcrImageCompression">
            <summary>
            Sets OCR image compression
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.IRecognize.OcrEngine">
            <summary>
            Sets OCR engine
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.ITransformationResult">
            <summary>
            Represents results of transformation
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResult.Document">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResult.Status">
            <summary>
            Result of transformation
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.Item(System.Int32)">
            <summary>
            Gets the SolidFramework.Pdf.Transformers.ITransformationResult at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The SolidFramework.Pdf.Transformers.ITransformationResult at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.CopyTo(SolidFramework.Pdf.Transformers.ITransformationResult[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.CopyTo(SolidFramework.Pdf.Transformers.ITransformationResult[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.CopyTo(System.Int32,SolidFramework.Pdf.Transformers.ITransformationResult[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator.#ctor(SolidFramework.Pdf.Transformers.ITransformationResultsCollection)">
            <summary>
            Creates a new instance of the ITransformationResultsCollectionEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator.Current">
            <summary>
            Gets the SolidFramework.Pdf.Transformers.ITransformationResult element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.ITransformationResultsCollection.ITransformationResultsCollectionEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.OCRTransformationResult">
            <summary>
            Represents results of transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetOCRPageDetailsPageCount">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetPageImageCount(System.Int32)">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetPageGraphicCount(System.Int32)">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetPageWordCount(System.Int32)">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetPageConfidentWordCount(System.Int32)">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetDocumentImageCount">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetDocumentGraphicCount">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetDocumentWordCount">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OCRTransformationResult.GetDocumentConfidentWordCount">
            <summary>
            Transformed document
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.OcrTransformer">
            <summary>
            Represents OCR pdf transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OcrTransformer.#ctor">
            <summary>
            Default constructor of <c>OCRTransformer</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.OcrTransformer.Recognize">
            <summary>
            Starts the recognizing. Same as Transform
            </summary>
            <returns>If the source is one document there is the status of the transformation.
            Else success if all transformation is successful, otherwise fail </returns>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer">
            <summary>
            Represents password security pdf transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.#ctor">
            <summary>
            Default constructor of <c>PasswordSecurityTransformer</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.#ctor(System.String,SolidFramework.Pdf.EncryptionAlgorithm)">
            <summary>
            Constructor with defined owner password and encryption algorithm. User assess permission is None
            </summary>
            <param name="ownerPassword">Owner password</param>
            <param name="algorithm">Encryption algorithm</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.#ctor(System.String,System.String,SolidFramework.Pdf.EncryptionAlgorithm,SolidFramework.Pdf.AccessPermissions)">
            <summary>
            Constructor with defined all encryption parameters
            </summary>
            <param name="ownerPassword">Owner password</param>
            <param name="userPassword">Encryption algorithm</param>
            <param name="algorithm">Encryption algorithm</param>
            <param name="permission">Asses permission</param>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.OwnerPassword">
            <summary>
            Owner password for documents
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.UserPassword">
            <summary>
            User password for documents
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.EncryptionAlgorithm">
            <summary>
            Encryption algorithm for documents
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.PasswordSecurityTransformer.Permission">
            <summary>
            Assess permission for user security
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.PdfTransformer">
            <summary>
            Represents abstract base class for all pdf transformers
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.PdfTransformer.OutputFolder">
            <summary>
            Gets or sets the folder where generated files should be placed. 
            If set then all documents will be saved in the folder
            and closed if they were not opened. This is a typical use case if we
            work with file paths instead of <c>PdfDocument</c>s
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PdfTransformer.ImportFromFile(System.String)">
            <summary>
            Adds <c>PdfDocument</c> to the source for transformation from the path
            </summary>
            <param name="path">Path to the pdf file</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PdfTransformer.ImportFromFolder(System.String)">
            <summary>
            Adds <c>PdfDocument</c>s to the source for transformation from the path to folder
            </summary>
            <param name="path">Path to the folder with pdf files</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PdfTransformer.Clear">
            <summary>
            Clears defined source for transformation and old results
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PdfTransformer.AddDocument(SolidFramework.Pdf.PdfDocument)">
            <summary>
            Adds <c>PdfDocument</c> to the source for transformation
            </summary>
            <param name="document">Document for transformation</param>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PdfTransformer.Transform">
            <summary>
            Starts transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.PdfTransformer.Transform(SolidFramework.Pdf.PdfDocument,SolidFramework.Pdf.Transformers.PdfTransformer)">
            <summary>
            Static function represents simple usage of single transformer
            </summary>
            <param name="document">Document</param>
            <param name="transformer">Transformer</param>
            <returns>Transformation results</returns>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.PdfTransformer.OverwriteMode">
            <summary>
            Gets or sets whether files should be overwritten if they exist.
            This is only required if <c>OutputFolder</c> is specified.
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.PdfTransformerExtensions">
            <summary>
            Extension for simple usage of transformers
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.PdfTransformer">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.IRecognize">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.ImageWatermarkTransformer">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.TextWatermarkTransformer">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.PasswordSecurityTransformer">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.CertificateSecurityTransformer">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.PdfTransformerType.OcrTransformer">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.TextWatermarkTransformer">
            <summary>
            Represents text watermark pdf transformation
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.TextWatermarkTransformer.#ctor">
            <summary>
            Default constructor of <c>TextWatermarkTransformer</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.TextWatermarkTransformer.#ctor(SolidFramework.Converters.Plumbing.TextWatermark)">
            <summary>
            Constructor with defined <c>TextWatermark</c> object
            </summary>
            <param name="watermark">Watermark for adding</param>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.TextWatermarkTransformer.TextWatermark">
            <summary>
            Text watermark for adding
            </summary>
        </member>
        <member name="T:SolidFramework.Pdf.Transformers.TransformationResult">
            <summary>
            Implementation of <c>ITransformationResult</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.Transformers.TransformationResult.#ctor(SolidFramework.Pdf.PdfDocument,SolidFramework.Interop.NativeError)">
            <summary>
            Constructor with defining parameters
            </summary>
            <param name="doc">Transformed document</param>
            <param name="stat">Transformation status</param>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.TransformationResult.Document">
            <summary>
            Implementation of <c>ITransformationResult</c> property
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Transformers.TransformationResult.Status">
            <summary>
            Implementation of <c>ITransformationResult</c> property
            </summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.TransformationResultType.ITransformationResult">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.TransformationResultType.TransformationResult">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Pdf.Transformers.TransformationResultType.OCRTransformationResult">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Pdf.ViewerPreferences">
            <summary>
            Represents Viewer preferences functionality
            </summary>
        </member>
        <member name="M:SolidFramework.Pdf.ViewerPreferences.Create(SolidFramework.Pdf.Catalog)">
            <summary>
            Creates from the specified catalog.
            </summary>
            <param name="catalog">The catalog.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.PrintPageRange">
            <summary>
            Gets the print page range.
            </summary>
            <value>
            The print page range.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.DisplayDocumentTitle">
            <summary>
            Gets a value indicating whether [display document title].
            </summary>
            <value>
                <c>true</c> if [display document title]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.CenterWindow">
            <summary>
            Gets a value indicating whether [center window].
            </summary>
            <value>
              <c>true</c> if [center window]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.FitWindow">
            <summary>
            Gets a value indicating whether [fit window].
            </summary>
            <value>
              <c>true</c> if [fit window]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.HideToolBar">
            <summary>
            Gets a value indicating whether [hide tool bar].
            </summary>
            <value>
              <c>true</c> if [hide tool bar]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.HideMenuBar">
            <summary>
            Gets a value indicating whether [hide menu bar].
            </summary>
            <value>
              <c>true</c> if [hide menu bar]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.HideWindowUI">
            <summary>
            Gets a value indicating whether [hide window UI].
            </summary>
            <value>
              <c>true</c> if [hide window UI]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.PickTrayByPdfSize">
            <summary>
            Gets a value indicating whether [pick tray by PDF size].
            </summary>
            <value>
              <c>true</c> if [pick tray by PDF size]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.NumberOfCopies">
            <summary>
            Gets the number of copies.
            </summary>
            <value>
            The number of copies.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.NonFullScreenPageMode">
            <summary>
            Gets the non full screen page mode.
            </summary>
            <value>
            The non full screen page mode.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.ReadingDirection">
            <summary>
            Gets the reading direction.
            </summary>
            <value>
            The reading direction.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.ViewArea">
            <summary>
            Gets the view area.
            </summary>
            <value>
            The view area.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.ViewClip">
            <summary>
            Gets the view clip.
            </summary>
            <value>
            The view clip.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.PrintArea">
            <summary>
            Gets the print area.
            </summary>
            <value>
            The print area.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.PrintClip">
            <summary>
            Gets the print clip.
            </summary>
            <value>
            The print clip.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.PrintScaling">
            <summary>
            Gets the print scaling.
            </summary>
            <value>
            The print scaling.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.ViewerPreferences.Duplex">
            <summary>
            Gets the duplex.
            </summary>
            <value>
            The duplex.
            </value>
        </member>
        <member name="T:SolidFramework.Pdf.Diagnostics.XmlView">
            <summary>
            Represents XML view functionality
            </summary>
        </member>
        <member name="P:SolidFramework.Pdf.Diagnostics.XmlView.PdfDocument">
            <summary>
            Gets or sets the PDF document.
            </summary>
            <value>
            The PDF document.
            </value>
        </member>
        <member name="P:SolidFramework.Pdf.Diagnostics.XmlView.XmlTextWriter">
            <summary>
            Gets or sets the XML text writer.
            </summary>
            <value>
            The XML text writer.
            </value>
        </member>
        <member name="M:SolidFramework.Pdf.Diagnostics.XmlView.Write">
            <summary>
            Writes document.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.File.ReadAllText(System.String)">
            <summary>
            Returns the contents of the specified file (assumes it is encoded as UTF8)
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.File.WriteAllText(System.String,System.String)">
            <summary>
            Writes the text to the specified file using UTF8 encoding
            </summary>
        </member>
        <member name="T:SolidFramework.Platform.Platform.TempFileIsAboutToBeCreatedCallback">
            <summary>
            Delegate for the TempFileIsAboutToBeCreated callback
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetTempFileIsAboutToBeCreatedCallback(SolidFramework.Platform.Platform.TempFileIsAboutToBeCreatedCallback)">
            <summary>
            Registers a callback that can be used to identify when Solid Framework is about to 
            create a temporary file.
            Note: This was added to provide a mechanism to allow Anti-virus software to discriminate 
            between those files that were being created by Solid Framework, and those that malware had created.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetSupportDirectory">
            <summary>
            Gets the directory where the Solid Framework DLLs are located (This will be where they were unpacked to if using the .NET Solid Framework).
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetAppDataDirectory">
            <summary>
            Gets the directory where the application data is be stored. 
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetAppDataDirectory(System.String)">
            <summary>
            Sets the directory where the application data is be stored. 
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetCMapDirectory">
            <summary>
            Gets the directory where the Character Mapping information is stored. It is unlikely that you will need to modify this. The default value is the folder "CMap" Within the folder "Resources" within the SupportDirectory.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetCMapDirectory(System.String)">
            <summary>
            Sets the directory where the Character Mapping information is stored. It is unlikely that you will need to modify this. The default value is the folder "CMap" Within the folder "Resources" within the SupportDirectory.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetColorProfileDirectory">
            <summary>
            Gets the directory where the Color Profile is stored. It is unlikely that you will need to modify this. The default value is the folder "Resources" within the SupportDirectory.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetColorProfileDirectory(System.String)">
            <summary>
            Sets the directory where the Color Profile is stored. It is unlikely that you will need to modify this. The default value is the folder "Resources" within the SupportDirectory.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetFontDirectory">
            <summary>
            Linux only: Gets the directory which should be serached for fonts in addition to those in the system Fonts folder.
            This is not implemented for Windows versions of the SDK.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetFontDirectory(System.String)">
            <summary>
            Linux only: Sets the directory which should be serached for fonts in addition to those in the system Fonts folder.
            This is not implemented for Windows versions of the SDK.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetFontsDataBaseFile">
            <summary>
            Gets the location of a file (usually called fonts.pdf) that contains information about the fonts that should be considered 
            as candidates when reconstructing files. 
            If this is specified then other fonts available on the system will be ignored.
            Note that the file must have a specific structure, and as such you cannot use just any PDF for this purpose.
            Please contact support@soliddocuments.com for information about how to create a Fonts Database File.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetFontsDataBaseFile(System.String)">
            <summary>
            Gets the location of a file (usually called fonts.pdf) that contains information about the fonts that should be considered 
            as candidates when reconstructing files. 
            If this is specified then other fonts available on the system will be ignored.
            Note that the file must have a specific structure, and as such you cannot use just any PDF for this purpose.
            Please contact support@soliddocuments.com for information about how to create a Fonts Database File.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetTempDirectory">
            <summary>
            Gets the path to the directory that this process will save its temporary files into
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetFullVersion">
            <summary>
            Gets the full version string for this version of SolidFramework (e.g. "9.2.8680.1")
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetVersion">
            <summary>
            Gets the version string for this version of SolidFramework (e.g. "9.2")
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetBuild">
            <summary>
            Gets the build number for this version of SolidFramework (e.g. "8680")
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetLogFilename">
            <summary>
            Gets the name of the logfile that is being generated by Solid Framework. If this value is empty then logging is not
            occurring.
            This is an alternative method of getting <c>SolidFramework.Plumbing.Logging.Instance.Path;</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetLogFilename(System.String)">
            <summary>
            Sets the name of the logfile that Solid Framework should generate. If this value is set then logging is enabled.
            This has the same effect as setting <c>SolidFramework.Plumbing.Logging.Instance.Path = path;</c>
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.WriteToLog(System.String)">
            <summary>
            Writes the specific text to the logfile that is generated by Solid Framework.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SetWarningLevel(SolidFramework.Plumbing.WarningLevelType)">
            <summary>
            Sets the level of messages that will be logged. It is unlikely that you will need to change this.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.GetWarningLevel">
            <summary>
            Gets the level of messages that will be logged. It is unlikely that you will need to change this.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.SupportPlatformIndependentPaths(System.Boolean)">
            <summary>
            Sets whether SolidFramework should accept both '\' and '/' as directory separators
            Defaults to false.
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.Terminate">
            <summary>
            Unloads the converters and cleans up the temporary files
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.Initialize">
            <summary>
            Initializes SolidFramework's native platform from the default path, installing it if it doesn't exist
            </summary>
        </member>
        <member name="M:SolidFramework.Platform.Platform.Initialize(System.String)">
            <summary>
            Initializes SolidFramework's native platform from the specified path, installing it if it doesn't exist
            The native platform will be automatically updated if it doesn't match this version of SolidFramework
            </summary>
            <param name="path">The path to load the native platform from</param>
        </member>
        <member name="M:SolidFramework.Platform.Platform.Initialize(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes SolidFramework's native platform from the specified path, installing it if it doesn't exist
            If replaceExisting is true, the native platform will be updated even if it appears to be the same version
            If replaceExisting is null, the native platform will only be updated if it appears to be a different version of SolidFramework
            If replaceExisting is false, the native platform will not be updated even if its incompatible version of SolidFramework (not recommended)
            </summary>
            <param name="path">The path to load the native platform from</param>
            <param name="replaceExisting">Whether to update the native platform or not</param>
        </member>
        <member name="F:SolidFramework.Plumbing.CatalogType.ICatalog">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.CatalogType.Catalog">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Plumbing.Document">
            <summary>
            Represents wrapper other document
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.Create">
            <summary>
            Creates this empty instance.
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.Document.Catalog">
            <summary>
            Gets the catalog.
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.Document.Extension">
            <summary>
            Gets the extension.
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.Open">
            <summary>
            Opens the document. This will throw an exception if the path has not already been specified in the constructor.
            </summary>
            <exception cref="T:System.InvalidOperationException"> with a message of "Path must be set before calling Open" occurs if the path has not been specified or is null.</exception>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.Open(System.String)">
            <summary>
            Opens the document. This will throw an exception if the path has not already been specified in the constructor.
            </summary>
            <param name="password">The password to be used when opening the file. </param>
            <exception cref="T:System.InvalidOperationException"> with a message of "Path must be set before calling Open" occurs if the path has not been specified or is null.</exception>
        </member>
        <member name="P:SolidFramework.Plumbing.Document.Path">
            <summary>
            Gets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.Save">
            <summary>
            Saves the document
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.Save(SolidFramework.Plumbing.OverwriteMode)">
            <summary>
            Saves the document and sets overwrite mode
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.Save(SolidFramework.Plumbing.OverwriteMode,System.Boolean)">
            <summary>
            Saves the the document to the specified path with using of optimization
            </summary>
            <param name="mode">The mode.</param>
            <param name="useOptimizer">if set to <c>true</c> [use optimizer].</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveAs(System.String)">
            <summary>
            Saves the document to specified path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveAs(System.String,SolidFramework.Plumbing.OverwriteMode)">
            <summary>
            Saves to specified path
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The overwrite mode.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveAs(System.String,SolidFramework.Plumbing.OverwriteMode,System.Boolean)">
            <summary>
            Saves to specified path
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The overwrite mode.</param>
            <param name="useOptimizer">if set to <c>true</c> [use optimizer].</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveOptimized">
            <summary>
            Saves and apply optimization
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveOptimized(SolidFramework.Plumbing.OverwriteMode)">
            <summary>
            Saves and apply optimization
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveOptimizedAs(System.String)">
            <summary>
            Saves to specified path and apply optimization
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Document.SaveOptimizedAs(System.String,SolidFramework.Plumbing.OverwriteMode)">
            <summary>
            Saves to specified path and apply optimization
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The overwrite mode.</param>
        </member>
        <member name="P:SolidFramework.Plumbing.Document.IsLoaded">
            <summary>
            Gets a value indicating whether this document is loaded.
            </summary>
            <value>
              <c>true</c> if this document is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.Document.OverwriteMode">
            <summary>
            Gets the overwrite mode.
            </summary>
            <value>
            The overwrite mode.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.Document.Dirty">
            <summary>
            Gets a value indicating whether this <see cref="T:SolidFramework.Plumbing.Document"/> is dirty.
            </summary>
            <value>
              <c>true</c> if dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SolidFramework.Plumbing.ICatalog">
            <summary>
            Interface for PDF catalog
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.ICatalog.CurrentPage">
            <summary>
            Gets the current page number
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.ICatalog.Pages">
            <summary>
            Gets the pages collection
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.IPagesCollection">
            <summary>
            Interface for PDF catalog
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.IPagesCollection.PageCount">
            <summary>
            Gets the page count.
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.LicensePermissions">
            <summary>
            License permissions
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicensePermissions.None">
            <summary>No permissions </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicensePermissions.PdfToWord">
            <summary>Permission to use 'conversion' features </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicensePermissions.PdfTools">
            <summary>Permission to use 'tools' features </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicensePermissions.PdfFree">
            <summary>Permission to use 'free' features </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicensePermissions.Ocr">
            <summary>Permission to use OCR </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.LicenseType">
            <summary>
            License type
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.Invalid">
            <summary>Invalid license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.Developer">
            <summary>Developer license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.Professional">
            <summary>Professional license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.Tools">
            <summary>Tools license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.Free">
            <summary>Free license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ToolsInternal">
            <summary>Internal Tools license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ProfessionalInternal">
            <summary>Internal Professional license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ToolsRepublisher">
            <summary>Republisher Tools license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ProfessionalRepublisher">
            <summary>Republisher Professional license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ProfessionalOcrInternal">
            <summary>Internal Professional licence with OCR </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ProfessionalOcrRepublisher">
            <summary>Republisher Professional licence with OCR </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ProfessionalOcr">
            <summary>Professional licence with OCR </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ClientTrial">
            <summary>Trial license </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseType.ProfessionalUniversal">
            <summary>Universal Professional licence </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.OverwriteMode">
            <summary>
            Defines whether to overwrite or fail the conversion if the output file exists.
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.OverwriteMode.FailIfExists">
            <summary>If output file exists, fail conversion. </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.OverwriteMode.ForceOverwrite">
            <summary>If output file exists, overwrite file. </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.PageRanges">
            <summary>
            Represents types of Page ranges
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.None">
            <summary>None </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.Odd">
            <summary>Odd pages </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.Even">
            <summary>Even pages </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.All">
            <summary>All pages </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.Portrait">
            <summary>Portrait pages </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.Landscape">
            <summary>Landscape pages </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.Selected">
            <summary>Selected pages </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.PageRanges.Current">
            <summary>Current </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.ValidationMode">
            <summary>
            Variant of PDFa formats
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.Detect">
            <summary>Detect mode to validate </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.Pdf">
            <summary>Not PDF/A. Attempting to convert to PDF with ValidationMode set to PDF will throw an exception. </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA1B">
            <summary>Pdf/A 1B </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA1A">
            <summary>Pdf/A 1A </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA2B">
            <summary>Pdf/A 2B </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA2A">
            <summary>Pdf/A 2A </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA2U">
            <summary>Pdf/A 2U </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA3B">
            <summary>Pdf/A 3B </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA3A">
            <summary>Pdf/A 3A </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ValidationMode.PdfA3U">
            <summary>Pdf/A 3U </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.none">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.force">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.errors">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.verbose">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.engineer_l1">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.engineer_l2">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.Plumbing.WarningLevelType.details">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.Plumbing.IMacroEngine">
            <summary>
            IMacro Interface allows interception of all the UI form activity in Solid Framework
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.IMacroEngine.FetchMacroPaths">
            <summary>
            Fetches Paths is used in the SolidFolderBrowserDialog, SolidOpenFileDialog, SolidOpenSaveDialog forms when running a macro and use them instead of prompting for them.
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.IMacroEngine.Attach(System.Windows.Forms.Form)">
             <summary>
            This allows implementation of iMarcoEngine to subsribe to form events for all Solid Framework Forms.
             </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.IMacroEngine.PathCommand(System.String)">
             <summary>
            This is used to incercept the file from a SolidSaveFileDialog or SolidFolderBrowser form.
             </summary>
             
        </member>
        <member name="M:SolidFramework.Plumbing.IMacroEngine.PathsCommand(System.String[])">
             <summary>
            This is used to incercept the selectedpaths from the SolidOpenFileDialog
             </summary>
             
        </member>
        <member name="T:SolidFramework.Plumbing.Logging">
            <summary>
            Represents Logging functionality
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.IsLogging">
            <summary>
            Gets a value indicating whether this instance is logging.
            </summary>
            <value>
            <c>true</c> if this instance is logging; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.LogRotationSize">
            <summary>
            Get or Set the amount of bytes that the log file can grow to before it is rotated. The logfile will be renamed from 
            [filename] to [filename_1], with any file with that name being renamed as [filename_2]. If there are already two 
            existing log files, so that a file exists that is already called [filename_2], then that will be deleted.
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Logging.WriteLine(System.String)">
            <summary>
            Write a string to the log file (if logging)
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.Logger.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.Logger.IsLogging">
            <summary>
            Gets a value indicating whether this instance is logging.
            </summary>
            <value>
            <c>true</c> if this instance is logging; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.Logging.Logger.LogRotationSize">
            <summary>
            Get or Set the amount of bytes that the log file can grow to before it is rotated. The logfile will be renamed from 
            [filename] to [filename_1], with any file with that name being renamed as [filename_2]. If there are already two 
            existing log files, so that a file exists that is already called [filename_2], then that will be deleted.
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Logging.Logger.WriteLine(System.String)">
            <summary>
            Write a string to the log file (if logging)
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.ProgressTickerStatus">
            <summary>
            Represents types of Progress ticker statuses
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ProgressTickerStatus.StartEpisode">
            <summary>
            Ticker is starting episode
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ProgressTickerStatus.EndEpisode">
            <summary>
            Ticker is ending episode
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ProgressTickerStatus.TickEpisode">
            <summary>
            Ticker is ticking episode
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ProgressTickerStatus.StartSeason">
            <summary>
            Ticker is starting season
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ProgressTickerStatus.EndSeason">
            <summary>
            Ticker is ending season
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.ProgressTickerStatus.TickSeason">
            <summary>
            Ticker is ticking season
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.ProgressTickerEventDelegate">
            <summary>
            Progress Ticker Event Handler Delegate
            </summary>
            <param name="progress">The progress.</param>
            <param name="progressMax">The progress max.</param>
            <param name="status">The status.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Plumbing.ProgressTicker">
            <summary>
            Represents Progress ticker
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.ProgressTicker.TotalEpisodes">
            <summary>
            Gets or sets the total episodes.
            </summary>
            <value>
            The total episodes.
            </value>
        </member>
        <member name="E:SolidFramework.Plumbing.ProgressTicker.ProgressEvent">
            <summary>
            Occurs when [progress event].
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.ProgressTicker.TicksPerEpisode">
            <summary>
            Gets or sets the ticks per episode.
            </summary>
            <value>
            The ticks per episode.
            </value>
        </member>
        <member name="M:SolidFramework.Plumbing.ProgressTicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Plumbing.ProgressTicker"/> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.ProgressTicker.RawLength">
            <summary>
            Gets or sets the length of the raw.
            </summary>
            <value>
            The length of the raw.
            </value>
        </member>
        <member name="M:SolidFramework.Plumbing.ProgressTicker.RawTick(System.Int64,System.Boolean)">
            <summary>
            Raws the tick.
            </summary>
            <param name="current">The current.</param>
            <param name="exiting">if set to <c>true</c> [exiting].</param>
        </member>
        <member name="M:SolidFramework.Plumbing.ProgressTicker.StartEpisode(System.String)">
            <summary>
            Starts the episode.
            </summary>
            <param name="episodeName">Name of the episode.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.ProgressTicker.EndEpisode">
            <summary>
            Ends the episode.
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.ProgressTicker.StartSeason(System.String)">
            <summary>
            Starts the season.
            </summary>
            <param name="seasonName">Name of the season.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.ProgressTicker.EndSeason">
            <summary>
            Ends the season.
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.StatusWindowAction">
            <summary>
            Represents types of Status window action
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.StatusWindowAction.CloseOnCompletion">
            <summary>
            Close window on completion
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.StatusWindowAction.KeepOpen">
            <summary>
            Keep window open
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.LicenseState">
            <summary>
            Used as return value by License.Validate
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseState.Valid">
            <summary>
            License passed in is ok
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseState.Generated">
            <summary>
            License passed in was not valid so new license was generated and returned
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseState.Invalid">
            <summary>
            License passed in was not valid (not valid and not found in developer account)
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseState.Expired">
            <summary>
            License passed in was not valid and account is in need of renewal
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseState.WebCallFailure">
            <summary>
            There was a failure attempting to call the Solid Documents license server (http call)
            </summary>
        </member>
        <member name="F:SolidFramework.Plumbing.LicenseState.Denied">
            <summary>
            Validate isn't supported for your account, please contact support@soliddocuments.com to discuss options.
            </summary>
        </member>
        <member name="T:SolidFramework.Plumbing.VerifyVersions">
            <summary>
            Represents static class for the Verify versions functionality
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.VerifyVersions.Test(System.Int32)">
            <summary>
            Tests the specified build.
            Not called on OS X
            </summary>
            <param name="build">The build.</param>
            <returns></returns>
        </member>
        <member name="T:SolidFramework.Plumbing.GZip">
            <summary>
            Represents GZip functionality
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.#ctor">
            <summary>
            Some compilers automatically create a public default constructor if the type does not define any constructors.
            If this is the case with your type, add a private default constructor to eliminate the violation.
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.Compress(System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="lpSourceFolder">The location of the files to include in the zip file, all files including files in subfolders will be included.</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.Compress(System.String,System.String,System.IO.SearchOption,System.String,System.String,System.Boolean)">
            <summary>
            Compress
            </summary>
            <param name="lpSourceFolder">The location of the files to include in the zip file</param>
            <param name="searchPattern">Search pattern (ie "*.*" or "*.txt" or "*.gif") to idendify what files in lpSourceFolder to include in the zip file</param>
            <param name="searchOption">Only files in lpSourceFolder or include files in subfolders also</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
            <param name="deleteTempFile">Boolean, true deleted the intermediate temp file, false leaves the temp file in lpDestFolder (for debugging)</param>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.Compress(System.IO.FileInfo[],System.String,System.String,System.String)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:/zipTest/Files/', and there is a file 
            'C:/zipTest/Files/folder1/sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.Compress(System.IO.FileInfo[],System.String,System.String,System.String,System.Boolean)">
            <summary>
            Compress
            </summary>
            <param name="files">Array of FileInfo objects to be included in the zip file</param>
            <param name="lpBaseFolder">Base folder to use when creating relative paths for the files 
            stored in the zip file. For example, if lpBaseFolder is 'C:/zipTest/Files/', and there is a file 
            'C:/zipTest/Files/folder1/sample.txt' in the 'files' array, the relative path for sample.txt 
            will be 'folder1/sample.txt'</param>
            <param name="lpDestFolder">Folder to write the zip file into</param>
            <param name="zipFileName">Name of the zip file to write</param>
            <param name="deleteTempFile">Boolean, true deleted the intermediate temp file, false leaves the temp file in lpDestFolder (for debugging)</param>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.Decompress(System.IO.Stream,System.String,System.String,SolidFramework.Plumbing.ProgressTicker)">
            <summary>
            Decompresses the specified SRC stream.
            </summary>
            <param name="srcStream">The SRC stream.</param>
            <param name="lpDestFolder">The destination folder.</param>
            <param name="zipFileName">Name of the zip file.</param>
            <param name="ticker">The ticker.</param>
            <returns>Results</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.GZip.Decompress(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Decompresses from the specified source folder.
            </summary>
            <param name="lpSourceFolder">The source folder.</param>
            <param name="lpDestFolder">The destination folder.</param>
            <param name="zipFileName">Name of the zip file.</param>
            <param name="deleteTempFile">if set to <c>true</c> [delete temp file].</param>
            <returns>Results</returns>
        </member>
        <member name="T:SolidFramework.Plumbing.GZippedFile">
            <summary>
            Represents GZipped file
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.GZippedFile.GetGZippedFile(System.String)">
            <summary>
            Gets the GZipped file.
            </summary>
            <param name="fileInfo">The file info.</param>
            <returns>
            The GZipped file.
            </returns>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.RelativePath">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>
            The relative path.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.ModifiedDate">
            <summary>
            Gets or sets the modified date.
            </summary>
            <value>
            The modified date.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.AddedToTempFile">
            <summary>
            Gets or sets a value indicating whether [added to temp file].
            </summary>
            <value>
              <c>true</c> if [added to temp file]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.Restored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Plumbing.GZippedFile"/> is restored.
            </summary>
            <value>
              <c>true</c> if restored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.LocalPath">
            <summary>
            Gets or sets the local path.
            </summary>
            <value>
            The local path.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZippedFile.Folder">
            <summary>
            Gets or sets the folder.
            </summary>
            <value>
            The folder.
            </value>
        </member>
        <member name="T:SolidFramework.Plumbing.GZipResult">
            <summary>
            Represents GZip result
            </summary>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.ZipFile">
            <summary>
            Gets or sets the zip file.
            </summary>
            <value>
            The zip file.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.ZipFileSize">
            <summary>
            Gets or sets the size of the zip file.
            </summary>
            <value>
            The size of the zip file.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.TempFileSize">
            <summary>
            Gets or sets the size of the temp file.
            </summary>
            <value>
            The size of the temp file.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.CompressionPercent">
            <summary>
            Gets or sets the compression percent.
            </summary>
            <value>
            The compression percent.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.TempFile">
            <summary>
            Gets or sets the temp file.
            </summary>
            <value>
            The temp file.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.FileCount">
            <summary>
            Gets or sets the file count.
            </summary>
            <value>
            The file count.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.TempFileDeleted">
            <summary>
            Gets or sets a value indicating whether [temp file deleted].
            </summary>
            <value>
              <c>true</c> if [temp file deleted]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Plumbing.GZipResult.Files">
            <summary>
            Gets or sets the files.
            </summary>
            <value>
            The files.
            </value>
        </member>
        <member name="T:SolidFramework.Plumbing.Utilities">
            <summary>
            Represents Utilities
            </summary>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ConvertToMD5String(System.String)">
            <summary>
            Converts to Md5 string.
            </summary>
            <param name="source">The source.</param>
            <returns>MD5 hash</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.CreateFolderIfNotExist(System.String,System.String)">
            <summary>
            Creates the folder if it is not exist.
            </summary>
            <param name="path">The path.</param>
            <param name="folder">The folder.</param>
            <returns>Name of created folder</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ConvertUTF7toUCS2(System.String)">
            <summary>
            UTF-7 is used to transfer strings (like unicode paths) via the console without
            needing to care about the code page of the console (since only 0..127 are used)
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ConvertUCS2toUTF7(System.String)">
            <summary>
            UTF-7 is used to transfer strings (like unicode paths) via the console without
            needing to care about the code page of the console (since only 0..127 are used)
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.GetWorkerTempFolder(System.Int32)">
            <summary>
            Gets the worker temp folder.
            </summary>
            <param name="pid">The pid.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.IsDirectoryReadWrite(System.String,System.Boolean)">
            <summary>
            Checks if a directory is read/write by the current user.
            </summary>
            <param name="dirPath">Path to check read/write access.</param>
            <param name="throwIfFails">Throw exception if not writable when true.</param>
            <returns>True if path is writable, else false or throws exception.</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.CreateUniqueTempFileName(System.String)">
            <summary>
            Creates the name of the unique temp file.
            </summary>
            <param name="extension">The extension.</param>
            <returns>File name</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.CreateUniqueTempFolder">
            <summary>
            Creates the name of the unique temp folder.
            </summary>
            <returns>Folder name</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ConvertBytesToString(System.Int64)">
            <summary>
            Converts the bytes to string.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.FileDelete(System.String)">
            <summary>
            Files the delete.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.FileCopy(System.String,System.String)">
            <summary>
            Files the copy.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            Files the copy.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ProcessResourceTags(System.String,System.String,System.String)">
            <summary>
            Replace two placeholders in a string, and converts any {n}, {CR} and {amp} tags.
            </summary>
            <param name="value">A string that may contain a placeholder in the format "{1}" and {2}.</param>
            <param name="arg1">A string that should be used to replace the placeholder "{1}".</param>
            <param name="arg2">A string that should be used to replace the placeholder "{2}".</param>
            <returns>A string where the replacements have been made.</returns>
            <remarks>If the string contains a placeholder in the format {0}, then only the second placeholder will be converted.
            This may not be the expected behaviour. This method appears to not be used.</remarks>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ProcessResourceTags(System.String,System.String)">
            <summary>
            Replace a single placeholder in a string, and converts any {n}, {CR} and {amp} tags.
            </summary>
            <param name="value">A string that may contain a placeholder in the format "{0}".</param>
            <param name="arg1">A string that should be used to replace the placeholder "{0}".</param>
            <returns>A string where the replacements have been made.</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ProcessResourceTags(System.String)">
            <summary>
            Replaces {n}, {CR} and {amp} tags in the string value with NewLine or Ampersand.
            </summary>
            <param name="value">A string that may contain resource tags.</param>
            <returns>A string where the tags have been converted.</returns>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.RotateLogFile(System.String,System.Int64)">
            <summary>
            Utility method for changing the logfile when it becomes larger than the specified size.
            In that event, the logfile will be renamed from [filename] to [filename_1], with any file with that name being renamed as [filename_2].
            If there are already two existing log files, so that a file exists that is already called [filename_2], then that will be deleted.
            </summary>
            <param name="path">Path to the file</param>
            <param name="rotateFileSize">The size of the file, in bytes, which if exceeded when this method is called, will cause the file names to be incremented.</param>
        </member>
        <member name="M:SolidFramework.Plumbing.Utilities.ValidationModeToString(SolidFramework.Plumbing.ValidationMode)">
            <summary>
            Returns a string representation of the ValidationMode.
            </summary>
            <param name="mode">The ValidationMode that is to be converted.</param>
            <returns>A string that represents the <paramref name="mode"/>.</returns>
            <exception cref="T:System.NotImplementedException">Occurs if <paramref name="mode"/> is not a supported type.</exception>
        </member>
        <member name="T:SolidFramework.ProgressEventArgs">
            <summary>
            Describes and manipulates progress event arguments.
            </summary>
        </member>
        <member name="M:SolidFramework.ProgressEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.ProgressEventArgs"/> class.
            </summary>
        </member>
        <member name="M:SolidFramework.ProgressEventArgs.#ctor(System.Int32,System.Int32,SolidFramework.Interop.SolidErrorCodes,System.String,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.ProgressEventArgs"/> class.
            </summary>
            <param name="progress">The progress.</param>
            <param name="maxProgress">The max progress.</param>
            <param name="statusCode">The status code.</param>
            <param name="statusDescription">The status description.</param>
            <param name="customData">The custom data.</param>
        </member>
        <member name="M:SolidFramework.ProgressEventArgs.Cancel">
            <summary>
            Cancels the current operation and causes it to terminate at the next appropriate time.
            </summary>
        </member>
        <member name="P:SolidFramework.ProgressEventArgs.StatusDescription">
            <summary>
            Gets the status description.
            </summary>
            <value>
            The status description.
            </value>
        </member>
        <member name="P:SolidFramework.ProgressEventArgs.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:SolidFramework.ProgressEventArgs.StatusCode">
            <summary>
            Gets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:SolidFramework.ProgressEventArgs.MaxProgress">
            <summary>
            Gets or sets the max progress.
            </summary>
            <value>
            The max progress.
            </value>
        </member>
        <member name="P:SolidFramework.ProgressEventArgs.IsCanceled">
            <summary>
            Indicates whether the current operation has been canceled and will terminate at an appropriate time.
            </summary>
            <value>
            true if the current operation has been cancelled otherwise false
            </value>
        </member>
        <member name="P:SolidFramework.StringsArray.IsFixedSize">
            <summary>
            Gets whether the collection is a fixed size. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.StringsArray.IsReadOnly">
            <summary>
            Gets whether the collection is readonly. This method always returns false.
            </summary>
        </member>
        <member name="P:SolidFramework.StringsArray.Item(System.Int32)">
            <summary>
            Gets the string at the specified index in the collection.
            </summary>
            <param name="index">The index of the item to be returned.</param>
            <returns>The string at the specified index.</returns>
        </member>
        <member name="P:SolidFramework.StringsArray.Capacity">
            <summary>
            Gets or sets the maximum number of items that can be stored in the collection.
            If the value is set to a number less than the current size of the colelction then an exception will be thrown.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs if the capacity is set to a number less than the current size.</exception>
        </member>
        <member name="P:SolidFramework.StringsArray.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:SolidFramework.StringsArray.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            This always returns false.
            </summary>
        </member>
        <member name="M:SolidFramework.StringsArray.CopyTo(System.String[])">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the beginning.
            </summary>
        </member>
        <member name="M:SolidFramework.StringsArray.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies all the elements of the dictionary to the specified one-dimensional array starting at the specified destination array index.
            </summary>
        </member>
        <member name="M:SolidFramework.StringsArray.CopyTo(System.Int32,System.String[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count">count</paramref>items from the collection starting at <paramref name="index">index</paramref> to the specified one-dimensional array starting at specified destination <paramref name = "arrayIndex">index</paramref>.
            </summary>
            <param name="index">Index of the first item in this collection that should be copied.</param>
            <param name="array">A one-dimensional array into which the items should be copied.</param>
            <param name="arrayIndex">Index of the destination array to where the first item should be copied.</param>
            <param name="count">Number of items to be copied.</param>
        </member>
        <member name="M:SolidFramework.StringsArray.GetEnumerator">
            <summary>Returns an <see cref="T:SolidFramework.StringsArray.StringsArrayEnumerator" /> for the collection.</summary>
            <returns>An <see cref="T:SolidFramework.StringsArray.StringsArrayEnumerator" /> for the collection.</returns>
        </member>
        <member name="T:SolidFramework.StringsArray.StringsArrayEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="M:SolidFramework.StringsArray.StringsArrayEnumerator.#ctor(SolidFramework.StringsArray)">
            <summary>
            Creates a new instance of the StringsArrayEnumerator.
            </summary>
        </member>
        <member name="P:SolidFramework.StringsArray.StringsArrayEnumerator.Current">
            <summary>
            Gets the string element in the collection at the current position of the enumerator.
            </summary>
            <remarks>
            Current returns the same object until MoveNext is called. MoveNext sets Current to the next element.
            If a call to MoveNext returned false, which indicates the end of the collection, then Current is undefined.
            </remarks>
        </member>
        <member name="M:SolidFramework.StringsArray.StringsArrayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; <c>false</c> if the 
            enumerator has passed the end of the collection.
            </returns>
            <remarks>
            After an enumerator is created or after the Reset method is called, an enumerator is positioned before 
            the first element of the collection, and the first call to the MoveNext method moves the enumerator over 
            the first element of the collection.
            If MoveNext passes the end of the collection, the enumerator is positioned after the last element in 
            the collection and MoveNext returns false. When the enumerator is at this position, subsequent calls 
            to MoveNext also return false until Reset is called.
            </remarks>
        </member>
        <member name="M:SolidFramework.StringsArray.StringsArrayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SolidFramework.StringsArray.StringsArrayEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This method has to be implemented because IEnumerator is inherited from IDisposable.
            </remarks>
        </member>
        <member name="T:SolidFramework.WarningEventArgs">
            <summary>
            Describes and manipulates warning event arguments.
            </summary>
        </member>
        <member name="M:SolidFramework.WarningEventArgs.#ctor(System.String,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.WarningEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="customData">The custom data.</param>
        </member>
        <member name="P:SolidFramework.WarningEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:SolidFramework.WarningEventArgs.Warning">
            <summary>
            Gets the warning.
            </summary>
            <value>
            The warning.
            </value>
        </member>
        <member name="F:SolidFramework.WarningEventArgsType.WarningEventArgs">
            <summary></summary>
        </member>
        <member name="F:SolidFramework.WarningEventArgsType.PdfAWarningEventArgs">
            <summary></summary>
        </member>
        <member name="T:SolidFramework.WarningType">
            <summary>
            Represents types of Warning Type.
            </summary>
        </member>
        <member name="F:SolidFramework.WarningType.NSEText">
            <summary>Document contains Non-standard encoded text and TextRecoveryNSE is set to Never. </summary>
        </member>
        <member name="F:SolidFramework.WarningType.CJKFont">
            <summary>Document contains CJK fonts and no CJK fonts were found locally to substitute. </summary>
        </member>
        <member name="T:SolidFramework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.actions_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ActualSize">
            <summary>
              Looks up a localized string similar to Actual Size.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.All_Supported_Formats_Filter">
            <summary>
              Looks up a localized string similar to All Supported Formats.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Allowed">
            <summary>
              Looks up a localized string similar to Allowed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.AlreadyExists_Question">
             <summary>
               Looks up a localized string similar to &apos;{0}&apos; already exists.
            Do you want to replace it?.
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.annotations_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ArgumentNull">
            <summary>
              Looks up a localized string similar to At least one argument that was passed to the method was null or empty..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.AttachmentsPanelandPage">
            <summary>
              Looks up a localized string similar to Attachments Panel and Page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Author">
            <summary>
              Looks up a localized string similar to Author:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadConversionResults">
            <summary>
              Looks up a localized string similar to The converter results are no good. Check Results.Count and Results[].Status.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadDataOpeningFile">
            <summary>
              Looks up a localized string similar to PDF file is corrupt and cannot be opened..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadDLLPath">
            <summary>
              Looks up a localized string similar to SolidFramework&apos;s dependent DLLs need to either be in the same folder as your exe or in the same folder that you loaded SolidFramework.dll from..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadHtmlSplittingUsing">
            <summary>
              Looks up a localized string similar to When using HtmlNavigation.SplitIntoMultipleFiles only one of the Converters.HtmlSplittingUsing may be selected..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadLicenseXML">
            <summary>
              Looks up a localized string similar to The license XML was invalid or could not be parsed..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadNodeConvertDescription">
            <summary>
              Looks up a localized string similar to Issues not addressed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadNodeValidateDescription">
            <summary>
              Looks up a localized string similar to Issues that cannot be addressed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadNumCopies">
            <summary>
              Looks up a localized string similar to NumberOfCopies should be between 1 and 5 (PDF Reference says values higher than 5 are ignored).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadStream">
            <summary>
              Looks up a localized string similar to Stream needs to be defined and accessible.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BadThreadingModel">
            <summary>
              Looks up a localized string similar to Framework requires single threaded apartment thread state WordDocumentType.Doc or TextRecoveryEngine.MODI. Use [STAThread] attribute on Main or call Framework using new thread with SetApartmentState(ApartmentState.STA)..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BookmarksPanelandPage">
            <summary>
              Looks up a localized string similar to Bookmarks Panel and Page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.BuildingFontCache">
            <summary>
              Looks up a localized string similar to Building Solid Framework Font Cache.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.canc">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Cancelled">
            <summary>
              Looks up a localized string similar to Cancelled..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.catalog_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ChangesAllNoExtraction">
            <summary>
              Looks up a localized string similar to Any except extraction of pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ChangesCommenting">
            <summary>
              Looks up a localized string similar to Commenting, filling in form fields, and signing existing signature fields.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ChangesFilling">
            <summary>
              Looks up a localized string similar to Inserting, deleting, and rotating pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ChangesInserting">
            <summary>
              Looks up a localized string similar to Filling in form fields, and signing existing signature fields.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CloudImportDenied">
            <summary>
              Looks up a localized string similar to CloudImport isn&apos;t enabled for your account, please contact support@soliddocuments.com to discuss options..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.colorspaces_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ComplianceLogFilter">
            <summary>
              Looks up a localized string similar to Compliance log XML (*.xml).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ConfirmOverwrite">
            <summary>
              Looks up a localized string similar to Confirm Overwrite.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ConflictingRecontstructionModeAndWorddocumentType">
            <summary>
              Looks up a localized string similar to ReconstructionMode and WordDocumentType properties are incompatible. ReconstructionMode.PlainText should only be used with WordDocumentType.Txt.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.contents_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Doc">
             <summary>
               Looks up a localized string similar to Word 97-2003 Document (*.doc)
            .
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_DocX">
            <summary>
              Looks up a localized string similar to Word Document (*.docx).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Htm">
            <summary>
              Looks up a localized string similar to HTML File (*.html).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Odp">
            <summary>
              Looks up a localized string similar to OpenDocument Presentation (*.odp).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Ods">
            <summary>
              Looks up a localized string similar to OpenDocument Spreadsheet (*.ods).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Odt">
            <summary>
              Looks up a localized string similar to OpenDocument Text (*.odt).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_PptX">
            <summary>
              Looks up a localized string similar to PowerPoint File (*.pptx).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Rtf">
             <summary>
               Looks up a localized string similar to Rich Text Format (*.rtf)
            .
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_Txt">
            <summary>
              Looks up a localized string similar to Plain Text File (*.txt).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Converter_Convert_Out_Format_XlsX">
             <summary>
               Looks up a localized string similar to Excel Workbook (*.xlsx)
            .
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ConvertionCompliancyFailed">
            <summary>
              Looks up a localized string similar to Unable to address all compliance issues.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ConvertNeedsContinuous">
            <summary>
              Looks up a localized string similar to This conversion is limited to continuous page ranges like All or n..m.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.copy_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CoreModelCreationCancelled">
            <summary>
              Looks up a localized string similar to CoreModel creation was cancelled by the user..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CreationDate">
            <summary>
              Looks up a localized string similar to Created:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Creator">
            <summary>
              Looks up a localized string similar to Creator:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Current">
            <summary>
              Looks up a localized string similar to Current.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CurrentIsExclusive">
            <summary>
              Looks up a localized string similar to PageRanges.Current should not be used with other PageRanges flags..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CurrentPageNotDone">
            <summary>
              Looks up a localized string similar to CurrentPage is not yet implemented for Word.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CurrentPageNotSet">
            <summary>
              Looks up a localized string similar to CurrentPage is not set..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.CurrentPageRange">
            <summary>
              Looks up a localized string similar to CurrentPage should be between 1 and the total number of pages in the document..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.cut_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DateObjectInvalid">
            <summary>
              Looks up a localized string similar to The date object is invalid..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DateTimeKindMustBeUnspecified">
            <summary>
              Looks up a localized string similar to DateTime.Kind must not be DateTimeKind.Utc. Use PdfDate(DateTime) constuctor or UtcOffset to specify time zone offset..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Default">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DefaultPrinterNotChanged">
            <summary>
              Looks up a localized string similar to Couldn&apos;t set &quot;{0}&quot; as default printer..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.delete_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.delete_button">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.device">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DifferentThreadSolidConverter">
            <summary>
              Looks up a localized string similar to SolidFramework.Converter classes are designed to be used within a single thread.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DifferentThreadWordApp">
            <summary>
              Looks up a localized string similar to SolidFramework.Word classes are designed to be used within a single thread.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DocumentAlreadyOpen">
            <summary>
              Looks up a localized string similar to Document is already Open..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DocumentMustBeOpen">
            <summary>
              Looks up a localized string similar to Document is not Open..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DocumentNotModified">
            <summary>
              Looks up a localized string similar to Document was not modified since Open. Save is meaningless..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DocumentRepairedSaveChanges">
            <summary>
              Looks up a localized string similar to Corrupt file &apos;{0}&apos; was repaired during loading. Save changes?.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DocumentSaveChanges">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; has been modified. Save changes?.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DocumentTitle">
            <summary>
              Looks up a localized string similar to Document Title.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DoForAllFiles">
            <summary>
              Looks up a localized string similar to Do this for all files..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DontUseCoreModelAfterClose">
            <summary>
              Looks up a localized string similar to The CoreModel has been closed and can no longer be used..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DontUseNativeDocumentAfterClose">
            <summary>
              Looks up a localized string similar to NativeDocument is not valid after Dispose..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DontUsePageHolderAfterClose">
            <summary>
              Looks up a localized string similar to The page holder has been closed and can no longer be used..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DontUsePagesModelAfterClose">
            <summary>
              Looks up a localized string similar to The PagesModel has been closed and can no longer be used..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DontUsePageSourceAfterClose">
            <summary>
              Looks up a localized string similar to The page source has been closed and can no longer be used..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DPIValueInvalid">
            <summary>
              Looks up a localized string similar to DPI cannot be set for ConversionType of ExtractImages..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.DuplicatePage">
            <summary>
              Looks up a localized string similar to Duplicate page numbers not allowed in range..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EmptyExtension">
            <summary>
              Looks up a localized string similar to Empty extension is not supported..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EmptyPath">
            <summary>
              Looks up a localized string similar to Empty path found..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EncryptionLevel128AES">
            <summary>
              Looks up a localized string similar to High (128-bit AES) - Acrobat 7.0 and later.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EncryptionLevel128RC4">
            <summary>
              Looks up a localized string similar to High (128-bit RC4) - Acrobat 5.0 and later.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EncryptionLevel256AES">
            <summary>
              Looks up a localized string similar to High (256-bit AES) - Acrobat X and later.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EncryptionLevel256AES9">
            <summary>
              Looks up a localized string similar to High (256-bit AES) - Acrobat 9.0 and later.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EncryptionLevel40RC4">
            <summary>
              Looks up a localized string similar to Low (40-bit RC4) - Acrobat 3.0 and later.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EncryptionLevelNone">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ErrorParsingDateTime">
            <summary>
              Looks up a localized string similar to There was an error parsing the ISO/IEC8824 date string..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ErrorParsingPageRange">
            <summary>
              Looks up a localized string similar to There was an error parsing the PageRange string..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ErrorUtcDeltaNotDefined">
            <summary>
              Looks up a localized string similar to Confirm that PdfDate has time zone defined using UtcDeltaDefined before reading UtcDelta..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.EvenOnly">
            <summary>
              Looks up a localized string similar to Even only.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Array">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Boolean">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Dictionary">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Name">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Null">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Number">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Reference">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Root">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Stream">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_String">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Explorer_Unknown">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.failure">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.file_structure_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to Failed to overwrite existing file. Set OverwriteMode property..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileAlreadyExists2">
            <summary>
              Looks up a localized string similar to Failed to overwrite existing file. Call with overwrite = true..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileHasCopyProtection">
            <summary>
              Looks up a localized string similar to This PDF file is password protected. Please specify the correct user password or owner password..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileIsNotPDFA">
            <summary>
              Looks up a localized string similar to Not PDF/A.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileMissingClosingAll">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; missing. Closing all files..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileName">
            <summary>
              Looks up a localized string similar to File Name.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FileNotFound">
            <summary>
              Looks up a localized string similar to File {0} was not found..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FirstPage_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FitHeight">
            <summary>
              Looks up a localized string similar to Fit Height.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FitPage">
            <summary>
              Looks up a localized string similar to Fit Page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FitVisible">
            <summary>
              Looks up a localized string similar to Fit Visible.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FitWidth">
            <summary>
              Looks up a localized string similar to Fit Width.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FixedItem">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FixedNodeConvertDescription">
            <summary>
              Looks up a localized string similar to Issues addressed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FixedNodeValidateDescription">
            <summary>
              Looks up a localized string similar to Issues that can be addressed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FolderLabel">
            <summary>
              Looks up a localized string similar to Folder.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FontBuiltIn">
            <summary>
              Looks up a localized string similar to Built-in.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FontEmbeddded">
            <summary>
              Looks up a localized string similar to Embedded.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.fonts_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FontSubset">
            <summary>
              Looks up a localized string similar to Subset.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.FrameworkError">
            <summary>
              Looks up a localized string similar to Failed in Framework.dll.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.graphicstates_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.handclosed">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.handopen">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.HighRes">
            <summary>
              Looks up a localized string similar to High Resolution.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ImportFileFilter">
            <summary>
              Looks up a localized string similar to PDF files (*.pdf)|*.pdf.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ImportImageFilter">
            <summary>
              Looks up a localized string similar to Image files (*.tif;*.tiff;*.jpg;*.png)|*.TIF;*.TIFF;*.JPG;*.PNG.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.IncorrectOcrLanguage">
            <summary>
              Looks up a localized string similar to Invalid Language. Use Ocr.Languages to see list of valid languages..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.info">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InstallationIssue">
            <summary>
              Looks up a localized string similar to The PDF creation product does not appear to be installed correctly. Please reinstall or repair..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.interactive_forms_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidCloudLicense">
            <summary>
              Looks up a localized string similar to The license is not valid on this platform. Please use License.CloudImport(..) to import licenses on this platform..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidImageType">
            <summary>
              Looks up a localized string similar to Attempted to use unsupported image type with Html converter..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidLicense">
            <summary>
              Looks up a localized string similar to The license is not valid..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidMachineID">
            <summary>
              Looks up a localized string similar to Failed to establish unique machine id from MAC.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidOperationException">
            <summary>
              Looks up a localized string similar to An identical License is already exists in LicenseCollection.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidPageRangeFormat">
            <summary>
              Looks up a localized string similar to Input could not be parsed as a PageRange..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidParameter">
            <summary>
              Looks up a localized string similar to At least one parameter that was passed to the method was invalid..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidPdfDateFormat">
            <summary>
              Looks up a localized string similar to Input could not be parsed as a PdfDate..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.InvalidVersion">
            <summary>
              Looks up a localized string similar to Please reinstall Solid Framework.  Invalid version of DLL:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Keywords">
            <summary>
              Looks up a localized string similar to Keywords:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.KeywordsNotFree">
            <summary>
              Looks up a localized string similar to PdfDocument.Info.Keywords is a read only property for Free and Developer licenses of Solid Framework..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LastPage_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LayersPanelandPage">
            <summary>
              Looks up a localized string similar to Layers Panel and Page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LicenseExpired">
            <summary>
              Looks up a localized string similar to The license you are trying to use has expired..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LicenseViolation">
            <summary>
              Looks up a localized string similar to Operation not possible without correct license (use License.Import(..)).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LicenseWebCallError">
            <summary>
              Looks up a localized string similar to The SolidDocuments license server returned an unexpected error response..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LicenseWebCallFailure">
            <summary>
              Looks up a localized string similar to It was not possible to connect to SolidDocuments server to validate the license..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.LowRes150">
            <summary>
              Looks up a localized string similar to Low Resolution (150 dpi).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MagnificationOutOfRange">
            <summary>
              Looks up a localized string similar to Magnification &apos;{0}&apos; is out of acceptable range..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MediaBoxMissing">
            <summary>
              Looks up a localized string similar to Cannot find required MediaBox for Page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxAbort">
            <summary>
              Looks up a localized string similar to Abort.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxCancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxIgnore">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxNo">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxOK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxRetry">
            <summary>
              Looks up a localized string similar to Retry.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MessageBoxYes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.metadata_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationCopy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationDelete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationInsert">
            <summary>
              Looks up a localized string similar to Insert.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationMove">
            <summary>
              Looks up a localized string similar to Move.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationRedo">
            <summary>
              Looks up a localized string similar to Redo.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationRotate">
            <summary>
              Looks up a localized string similar to Rotate.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModelOperationUndo">
            <summary>
              Looks up a localized string similar to Undo.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ModificationDate">
            <summary>
              Looks up a localized string similar to Modified:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.MSWordNotInstalled">
            <summary>
              Looks up a localized string similar to Couldn&apos;t create WordDocument because MS Word is not installed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedOwnerPasswordNotUser">
            <summary>
              Looks up a localized string similar to User password is not sufficient. Please provide owner password..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedOwnerPasswordPrompt">
            <summary>
              Looks up a localized string similar to User password is not sufficient. Please provide owner password:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedPrintAreasForPageRange">
            <summary>
              Looks up a localized string similar to PageRange can only be used with ExcelToPdfConverter when IgnorePrintAreas is false..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedsExcel2007ForConverter">
            <summary>
              Looks up a localized string similar to ExcelToPdfConverter requires Word 2007 or later to be installed..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedsPowerPoint2007ForConverter">
            <summary>
              Looks up a localized string similar to PowerPointToPdfConverter requires Word 2007 or later to be installed..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedsPublisher">
            <summary>
              Looks up a localized string similar to PublisherPrintProvider requires Microsoft Publisher to be installed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedsWord">
            <summary>
              Looks up a localized string similar to WordPrintProvider requires Microsoft Word to be installed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedsWord2007">
            <summary>
              Looks up a localized string similar to WordPrintProvider requires Microsoft Word 2007 or better to be installed for .docx support.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedsWord2007ForConverter">
            <summary>
              Looks up a localized string similar to WordToPdfConverter requires Word 2007 or later to be installed..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedToSaveToModifySecurity">
            <summary>
              Looks up a localized string similar to Security options cannot be modified until the changes to this PDF are saved. Would you like to save changes now?.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NeedToSaveToSetSecurity">
            <summary>
              Looks up a localized string similar to Security options cannot be set until this PDF is saved..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NegativePage">
            <summary>
              Looks up a localized string similar to Pages numbers must be greater than zero..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NextPage_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.no1">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NoIssuesFound">
            <summary>
              Looks up a localized string similar to No compliance issues found..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NoPageOpen">
            <summary>
              Looks up a localized string similar to There is no page numbered {0} in this document.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NotAllowed">
            <summary>
              Looks up a localized string similar to Not Allowed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NotAPage">
            <summary>
              Looks up a localized string similar to This is a Pages node and not a Page leaf object..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NotAPageNode">
            <summary>
              Looks up a localized string similar to This is a Page leaf object and not a Pages node object..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NotImplemented">
            <summary>
              Looks up a localized string similar to The SolidFramework method or operation is not implemented..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NotIndirectObject">
            <summary>
              Looks up a localized string similar to ObjectID and GenerationID are only valid for Indirect Objects. Use Indirect property to test..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.NoUserAndNoOwner">
            <summary>
              Looks up a localized string similar to To use Encryption either a user password or an owner password is required..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.OddOnly">
            <summary>
              Looks up a localized string similar to Odd only.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ok">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ok_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ok1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PageOnly">
            <summary>
              Looks up a localized string similar to Page only.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PageRangeMultipleFiles">
            <summary>
              Looks up a localized string similar to PageRange can only be set for single file conversions..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PageRangeNotSet">
            <summary>
              Looks up a localized string similar to PageRange needs to be set or created before it can be used..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PageRotationAngleInvalid">
            <summary>
              Looks up a localized string similar to The specified rotation angle is not valid..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.pages_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PagesArrayEmpty">
            <summary>
              Looks up a localized string similar to The Pages Array is empty..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.pan_hand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PasswordPrompt">
            <summary>
              Looks up a localized string similar to Please enter the correct password to open the document:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PasswordSecurity">
            <summary>
              Looks up a localized string similar to Password Security.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.paste_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PathMustBeSet">
            <summary>
              Looks up a localized string similar to Path must be set before calling Open..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PathMustBeSetForSave">
            <summary>
              Looks up a localized string similar to Path must be set before calling Save..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PathMustExist">
            <summary>
              Looks up a localized string similar to Path must refer to an existing file for Open.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfCreatorFailed">
            <summary>
              Looks up a localized string similar to Pdf Creator failed. The .pdf file was not found where expected. Could be because the UI appeared and the user chose save location. If so, unlock the product so it can behave silently..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfCreatorFailedNoFile">
            <summary>
              Looks up a localized string similar to PDF creation failed. Print(..) was not called with a source file..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfCreatorIsAbstract">
            <summary>
              Looks up a localized string similar to PdfCreator is an abstract class. Use one of the concrete derived classes for each of the Solid Documents PDF creation printer drivers..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfCreatorNotInstalled">
             <summary>
               Looks up a localized string similar to Solid PDF Creator printer driver is not installed.
            Use Help |Support | Repair to reinstall..
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PDFCreatorRequiresLicense">
            <summary>
              Looks up a localized string similar to PdfCreator requires a SolidFramework license. Use License.Import and a Tools license or better..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfItemAbsent">
            <summary>
              Looks up a localized string similar to The specified PdfItem could not be created..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfItemAlreadyExists">
            <summary>
              Looks up a localized string similar to An item already exists in the PdfDictionary with the specified key..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfItemNull">
            <summary>
              Looks up a localized string similar to The PdfItem is null..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PdfItemTypeInvalid">
            <summary>
              Looks up a localized string similar to The PdfItem has an invalid type and could not be be processed..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PortraitLandscapeNotDone">
            <summary>
              Looks up a localized string similar to PageRanges.Portrait and PageRanges.Landscape are not yet implemented..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PowerPointNoPasswords">
            <summary>
              Looks up a localized string similar to Unfortunately the Microsoft PowerPoint API has no support for opening password protected presentations..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PreviousPage_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PrinterError">
            <summary>
              Looks up a localized string similar to Failed to set PdfCreator as printer in Word. Is the PdfCreator installed?.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PrintInitializedAlready">
            <summary>
              Looks up a localized string similar to PrintProvider cannot be initialized more than once..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.PrintNeedsCreator">
            <summary>
              Looks up a localized string similar to PrintProvider needs PdfCreator property to be set to an appropriate PDF creation printer driver product like SolidPDFCreator..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Producer">
            <summary>
              Looks up a localized string similar to Producer:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ProducerNotFree">
            <summary>
              Looks up a localized string similar to PdfDocument.Info.Producer is a read only property for Free and Developer licenses of Solid Framework..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.r1">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.RangeNotContinuous">
            <summary>
              Looks up a localized string similar to First and Last only make sense for continuous ranges..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ReadOnlyDocument">
            <summary>
              Looks up a localized string similar to The file is read-only.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ReadonlyObject">
            <summary>
              Looks up a localized string similar to This object is readonly..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.RepairNotPDF">
            <summary>
              Looks up a localized string similar to Could not open &apos;{0}&apos; because it is not a PDF file (or has been damaged beyond repair)..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.RepairPDFDamaged">
            <summary>
              Looks up a localized string similar to Could not open &apos;{0}&apos; because it is corrupt or damaged..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.RepairPDFNoPages">
            <summary>
              Looks up a localized string similar to Could not open &apos;{0}&apos; because it has no pages..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.resources_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ResultsFilesMustBeOne">
            <summary>
              Looks up a localized string similar to ConvertTo can only be used for conversion that result in single result file.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.RootConvertName">
            <summary>
              Looks up a localized string similar to PDF/A conversion succeeded.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.RootValidateName">
            <summary>
              Looks up a localized string similar to PDF/A compliance succeeded.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.rotate_left_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.rotate_right_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SaveEmfNotImplemented">
            <summary>
              Looks up a localized string similar to SolidFramework does not save EMF or SPL documents.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SaveSecurityChanges">
            <summary>
              Looks up a localized string similar to Save changes to security settings for &apos;{0}&apos;?.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerFeederLoadedWarning">
            <summary>
              Looks up a localized string similar to Some scanner drivers will automatically use the document feeder even though the flatbed was choosen. Please remove the documents in the document feeder before continuing..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerIsInUse">
            <summary>
              Looks up a localized string similar to Scanner is currently in use.  Please try again later..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerOptions_ImageType_Color">
            <summary>
              Looks up a localized string similar to Color.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerOptions_ImageType_Grayscale">
            <summary>
              Looks up a localized string similar to Grayscale.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerOptions_ImageType_Mono">
            <summary>
              Looks up a localized string similar to Monochrome.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerPageSizeA4">
            <summary>
              Looks up a localized string similar to A4 210 x 297 mm.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerPageSizeLegal">
            <summary>
              Looks up a localized string similar to Legal 8.5 x 14 inches.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerPageSizeLetter">
            <summary>
              Looks up a localized string similar to Letter 8.5 x 11 inches.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerTypeDuplex">
            <summary>
              Looks up a localized string similar to Auto Document Feeder - Duplex.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerTypeFlatbed">
            <summary>
              Looks up a localized string similar to Flatbed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScannerTypeSimplex">
            <summary>
              Looks up a localized string similar to Auto Document Feeder - Simplex.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ScanServerIsNotResponsible">
            <summary>
              Looks up a localized string similar to Program error when trying to connect the scanner. You may need to re-boot your computer..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.secure_err">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.secure_ok">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.selectall_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SelectedNotDone">
            <summary>
              Looks up a localized string similar to PageRanges.Selected is not yet implemented..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SinglePage">
            <summary>
              Looks up a localized string similar to Single page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SinglePageContinuous">
            <summary>
              Looks up a localized string similar to Single Page Continuous.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SolidConverterPDFRequiresLicense">
            <summary>
              Looks up a localized string similar to SolidConverterPDF  requires a SolidFramework license. Use License.Import and a Tools license or better..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SourceFileNotFound">
            <summary>
              Looks up a localized string similar to The source file does not exist..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SourceFilesMustBeOne">
            <summary>
              Looks up a localized string similar to ConvertTo requires only one source file to be set.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SourceFilesMustBeOne_">
            <summary>
              Looks up a localized string similar to Only one source file can be set..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SourceFilesNotDefined">
            <summary>
              Looks up a localized string similar to Source files or directory need to be set..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.SpecifySecuritySettingsLabel">
             <summary>
               Looks up a localized string similar to Specify the security settings for the PDF document. You can apply a user password 
            to prevent the document from unauthorized opening. You can selectively restrict 
            PDF document features when an owner password is specified..
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.structure_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Subject">
            <summary>
              Looks up a localized string similar to Subject:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.testscan_1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.testscan_2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ThisPDFisSecureLabel">
             <summary>
               Looks up a localized string similar to This PDF document has security settings. Use Change Security Settings 
            to modify who can open and modify the PDF file and/or change the passwords
            associated with this file..
             </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.thumbnail_large">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.thumbnail_medium">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.thumbnail_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ThumbnailsPanelandPage">
            <summary>
              Looks up a localized string similar to Thumbnails Panel and Page.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Title">
            <summary>
              Looks up a localized string similar to Title:.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.TwoUpContinuousCoverPage">
            <summary>
              Looks up a localized string similar to Two-Up Continuous (Cover Page).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.TwoUpContinuousFacing">
            <summary>
              Looks up a localized string similar to Two-Up Continuous (Facing).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.TwoUpCoverPage">
            <summary>
              Looks up a localized string similar to Two-Up (Cover Page).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.TwoUpFacing">
            <summary>
              Looks up a localized string similar to Two-Up (Facing).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UncompressCommonFiles">
            <summary>
              Looks up a localized string similar to Uncompressing Solid Framework shared resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UncompressNative32Files">
            <summary>
              Looks up a localized string similar to Uncompressing Solid Framework 32-bit resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UncompressNative64Files">
            <summary>
              Looks up a localized string similar to Uncompressing Solid Framework 64-bit resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UncompressOSXFiles">
            <summary>
              Looks up a localized string similar to Uncompressing Solid Framework OSX resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.unfixed_doc_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UnknownFrameworkError">
            <summary>
              Looks up a localized string similar to Unknown error in Framework.dll..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.unlock">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UnsupportedFileType">
            <summary>
              Looks up a localized string similar to Attempted to use an unsupported file type with print provider..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UntitledDocument">
            <summary>
              Looks up a localized string similar to Untitled.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UntitledSaveChanges">
            <summary>
              Looks up a localized string similar to &lt;Untitled&gt; document has been modified. Save changes?.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UserButMustBeOwner">
            <summary>
              Looks up a localized string similar to The owner password is required to perform this action..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.UserButNoOwner">
            <summary>
              Looks up a localized string similar to When specifying a user password, an owner password is also required..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.valid_pdfa">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ValidationCompliancyFailed">
            <summary>
              Looks up a localized string similar to {0} compliance failed.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ValidationModeAutomaticInvalid">
            <summary>
              Looks up a localized string similar to &apos;ValidationMode.Automatic&apos; is only a valid mode for PdfToPdfAConverter when ValidateOnly is true..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ValidationModeOtherThanDetectInvalid">
            <summary>
              Looks up a localized string similar to For VerifyOnly the only valid ValidationMode is Detect. Nothing else makes sense..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ValidationModePdfInvalid">
            <summary>
              Looks up a localized string similar to &apos;ValidationMode.Pdf&apos; is not a valid mode for PdfToPdfAConverter.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ValidTime">
            <summary>
              Looks up a localized string similar to Confirm that the PdfDate is valid using IsValid before trying to read it..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.VerifiedAsNotPDFA">
            <summary>
              Looks up a localized string similar to Verified NOT {0}.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.VerifiedAsPDFA">
            <summary>
              Looks up a localized string similar to Verified {0}.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Verifying">
            <summary>
              Looks up a localized string similar to Verifying...
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.WebValidateDenied">
            <summary>
              Looks up a localized string similar to WebValidate isn&apos;t enabled for your account, please contact support@soliddocuments.com to discuss options..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.WriteCommonFiles">
            <summary>
              Looks up a localized string similar to Writing Solid Framework shared resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.WriteNative32Files">
            <summary>
              Looks up a localized string similar to Writing Solid Framework 32-bit resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.WriteNative64Files">
            <summary>
              Looks up a localized string similar to Writing Solid Framework 64-bit resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.WriteOSXFiles">
            <summary>
              Looks up a localized string similar to Writing Solid Framework OSX resources..
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.xobjects_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.zoom_in_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.zoom_rectangle_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ZoomFit_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ZoomHeight_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.zoomin">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ZoomIn_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.zoomout">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ZoomOut_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SolidFramework.Properties.Resources.ZoomWidth_26x26">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobHandler.OnConnected(SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel)">
            <summary>
            Fires when the JobHandler connects to the JobProcessor
            </summary>
            <param name="channel">The message channel used to communicate with the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.JobHandler.OnJobStarted(SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel,SolidFramework.Services.Plumbing.JobEnvelope)">
            <summary>
            Fires just before executing a JobEnvelope
            </summary>
            <param name="channel">The message channel used to communicate with the JobProcessor</param>
            <param name="jobEnvelope">The JobEnvelope that will be executed</param>
        </member>
        <member name="M:SolidFramework.Services.JobHandler.OnJobFinished(SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel,SolidFramework.Services.Plumbing.JobEnvelope)">
            <summary>
            Fires after a JobEnvelope has been executed
            </summary>
            <param name="channel">The message channel used to communicate with the JobProcessor</param>
            <param name="jobEnvelope">The JobEnvelope that was executed</param>
        </member>
        <member name="M:SolidFramework.Services.JobHandler.ProcessAdditionalJobOptions(System.Collections.Generic.IEnumerable{SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData},SolidFramework.Services.Plumbing.JobEnvelope)">
            <summary>
            Processes job options that were sent by JobProcessor.GetAdditionalJobOptions
            Fires before OnJobStarted
            </summary>
            <param name="options">The job options sent by JobProcessor.GetAdditionalJobOptions</param>
            <param name="envelope">The job envelope that was sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.JobHandler.ProcessStartupOptions(System.Collections.Generic.IEnumerable{SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData})">
            <summary>
            Processes options that were sent by JobProcessor.GetStartupOptions
            Fires before OnConnected
            </summary>
            <param name="options">The job options sent by JobProcessor.GetStartupOptions</param>
        </member>
        <member name="M:SolidFramework.Services.JobHandler.Initialize">
            <summary>
            Called while the JobHandler is initializing, before it connects to the JobProcessor
            </summary>
        </member>
        <member name="T:SolidFramework.Services.JobProgressEventArgs">
            <summary>
            Represents types of Job Progress Event Args.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProgressEventArgs.#ctor(SolidFramework.Services.Plumbing.JobEnvelope,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.JobProgressEventArgs" /> class.
            </summary>
            <param name="jobEnvelope">The job envelope.</param>
            <param name="position">The progress position.</param>
            <param name="maximum">The maximum progress position.</param>
        </member>
        <member name="P:SolidFramework.Services.JobProgressEventArgs.JobEnvelope">
            <summary>
            Gets the job envelope.
            </summary>
            <value>
            The job envelope.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobProgressEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.Services.JobProgressEventArgs" /> is cancel.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobProgressEventArgs.Maximum">
            <summary>
            Gets the maximum progress position.
            </summary>
            <value>
            The maximum progress position.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobProgressEventArgs.Position">
            <summary>
            Gets the progress position.
            </summary>
            <value>
            The progress position.
            </value>
        </member>
        <member name="T:SolidFramework.Services.JobCompletedEventArgs">
            <summary>
            Represents Job Completed Event Args
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobCompletedEventArgs.#ctor(SolidFramework.Services.Plumbing.JobEnvelope,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.JobCompletedEventArgs" /> class.
            </summary>
            <param name="jobEnvelope">The job envelope.</param>
            /// <param name="elapsedTime">Time taken by the job.</param>
        </member>
        <member name="P:SolidFramework.Services.JobCompletedEventArgs.JobEnvelope">
            <summary>
            Gets the job envelope.
            </summary>
            <value>
            The job envelope.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobCompletedEventArgs.ElapsedTime">
            <summary>
            Gets the time taken by the job.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="T:SolidFramework.Services.QueueEmptyEventArgs">
            <summary>
            Represents types of Queue Empty Event Args.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.QueueEmptyEventArgs.#ctor(SolidFramework.Services.JobProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.QueueEmptyEventArgs" /> class.
            </summary>
            <param name="jobProcessor">The job processor.</param>
        </member>
        <member name="M:SolidFramework.Services.DuplicateDictionary.GetId(System.String)">
            <summary>
            Returns the id for the given hash or -1 if it doesn't exist
            </summary>
        </member>
        <member name="T:SolidFramework.Services.JobProcessor">
            <summary>
            Represents types of Job Processor.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.KeepJobs">
            <summary>
            Gets or sets a value indicating whether keep jobs.
            </summary>
            <value>
              <c>true</c> if keep jobs; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.Allow64on32">
            <summary>
            Gets or sets a value indicating whether to run 64 bit job handlers from a 32 user application on a 64 bit OS.
            </summary>
            <value>
              <c>true</c> if running 64 bit JobHandler on a 32 bit JobProcesser is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.ProcessedJobs">
            <summary>
            Gets the list of processed jobs.
            </summary>
            <value>
            The processed jobs.
            </value>
        </member>
        <member name="E:SolidFramework.Services.JobProcessor.JobProgressEvent">
            <summary>
            Occurs when job progress event is raised.
            </summary>
        </member>
        <member name="E:SolidFramework.Services.JobProcessor.JobCompletedEvent">
            <summary>
            Occurs when a job is completed.
            </summary>
        </member>
        <member name="E:SolidFramework.Services.JobProcessor.QueueEmptyEvent">
            <summary>
            Occurs when the job queue becomes empty.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.JobProcessor" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.JobProcessor" /> class with a specific JobHandler.
            </summary>
            <param name="jobHandlerPath">The path to the JobHandler executable that will be doing the work</param>
            <param name="jobHandlerArguments">The command line arguments to provide the JobHandler executable, "{WorkerNumber}" will be substituted with the worker number</param>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.ResetStatistics">
            <summary>
            Resets and clears the statistic counters that provide information 
            about the number and state of conversions that were allocated to this JobProcessor.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.GetStatistics">
            <summary>
            Gets a read only collection of the statistics about the conversions that 
            were allocated to this JobProcessor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.WorkerCount">
            <summary>
            Gets or sets the worker count.
            </summary>
            <value>
            The worker count.
            </value>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.WorkerJobsBeforeRecycle">
            <summary>
            Gets or sets the number of conversions that should be handled by 
            a single WorkerProcess before it is killed and replaced. 
            The default value is 100.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.WorkerTimeOut">
            <summary>
            Gets or sets the worker time out.
            </summary>
            <value>
            The worker time out.
            </value>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.GetNextWorkerID">
            <summary>
            Gets the next worker ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.ClearRemainingQueue(System.Boolean)">
            <summary>
            Clears the remaining queue.
            </summary>
            <param name="triggerEvents">Whether JobCompletedEvent should fire for the cancelled jobs</param>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.QueuedJobs">
            <summary>
            Gets the number of jobs in the queue
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.RemoveJobFromDupList(System.Int32)">
            <summary>
            Remove a job from the Duplicate list.
            </summary>
            <param name="jobId"></param>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.SubmitJob(SolidFramework.Services.Plumbing.JobEnvelope)">
            <summary>
            Submits the job.
            </summary>
            <param name="jobEnvelope">The job envelope.</param>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SolidFramework.Services.JobProcessor" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.TotalJobs">
            <summary>
            Gets or sets the total jobs.
            </summary>
            <value>
            The total jobs.
            </value>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.WaitTillComplete">
            <summary>
            Waits the till complete.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.IsBusy">
            <summary>
            Determines whether this instance is busy.
            </summary>
            <returns>
              <c>true</c> if this instance is busy; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.Kill">
            <summary>
            Kills this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.JobProcessor.Running">
            <summary>
            Gets or sets whether the JobProcessor is running.
            </summary>
            <remarks>This property will generally remain <c>true</c> once it has been set. 
            Use IsBusy to identify whether processing has completed, or use the QueueEmptyEvent 
            to identify when processing completes.</remarks>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.OnWorkerCreated(SolidFramework.Services.Plumbing.WorkerProcess)">
            <summary>
            Fires when a WorkerProcess creates its JobHandler process.
            </summary>
            <param name="workerProcess">The WorkerProcess for the JobHandler that was created</param>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.OnWorkerConnected(SolidFramework.Services.Plumbing.WorkerProcess,SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel)">
            <summary>
            Fires when a WorkerProcess has established a connection to its JobHandler process.
            </summary>
            <param name="workerProcess">The WorkerProcess that was connected</param>
            <param name="channel">The message channel used to communicate with the JobHandler process</param>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.OnWorkerKilled(SolidFramework.Services.Plumbing.WorkerProcess)">
            <summary>
            Fires just before a WorkerProcess kills its JobHandler process.
            </summary>
            <param name="workerProcess">The WorkerProcess for the JobHandler that will be killed</param>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.StartWorkerProcess(SolidFramework.Services.Plumbing.WorkerProcess,System.Diagnostics.ProcessStartInfo)">
            <summary>
            Creates and starts a JobHandler process for a WorkerProcess (the default behaviour just calls Process.Start(startInfo))
            This can be overridden to customize the ProcessStartInfo properties or to record the PID of the new process
            </summary>
            <param name="workerProcess">The WorkerProcess that needs to create a JobHandler process</param>
            <param name="startInfo">The default ProcessStartInfo for the JobHandler process</param>
            <returns>A new (running) JobHandler Process</returns>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.GetAdditionalJobOptions(SolidFramework.Services.Plumbing.WorkerProcess,SolidFramework.Services.Plumbing.JobEnvelope)">
            <summary>
            Gets additional job options to send to the JobHandler
            These can be handled by JobHandler.ProcessAdditionalJobOptions
            </summary>
            <returns>The additional job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.GetStartupOptions(SolidFramework.Services.Plumbing.WorkerProcess)">
            <summary>
            Gets options to send to the JobHandler when it starts
            These can be handled by JobHandler.ProcessStartupOption
            </summary>
            <returns>The options to send to the JobHandler when it starts</returns>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.DispatchAndRunJobEnvelope(SolidFramework.Services.Plumbing.WorkerProcess,SolidFramework.Services.Plumbing.JobEnvelope)">
            <summary>
            Sends the JobEnvelope to the WorkerProcess and waits for it to finish.
            </summary>
            <param name="workerProcess">The WorkerProcess to send the JobEnvelope to</param>
            <param name="jobEnvelope">The JobEnvelope that needs to be run</param>
            <returns>true, if the job was executed successfully and the WorkerProcess can be reused, false if the WorkerProcess should be recycled</returns>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.WorkerMain">
            <summary>
            Workers the main.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.JobProcessor.CleanupAbandonedResults">
            <summary>
            This function is intended to be used only by SolidFramework internally.
            Function for cleaning up the temporary files that are created by JobProcessor during the processing of files.
            When JobProcessor is initialised, a search is made in the User's temp folder for folders that were created
            by previous JobHandlers, if none of the previous JobHandlers are still running the folders are then deleted.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToDataJobEnvelope">
            <summary>
            Represents types of Pdf To Data Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.SingleTable">
            <summary>
            Gets or sets whether to join all output information into a single file.
            The default is <c>ExcelTablesOnSheet.PlaceEachTableOnOwnSheet</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.AutoDetectSeparators">
            <summary>
            Gets or sets whether to automatically detect decimal and thousands separators.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator.
            The default is <c>DecimalSeparator.Period</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.ThousandsSeparator">
            <summary>
            Gets or sets the thousands separator.
            The default is <c>ThousandsSeparator.Comma</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.DetectTiledPages">
            <summary>
            Gets or sets whether to detect tables that are tiled across multiple pages.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.ExportFormat">
            <summary>
            Gets or sets the data format to export as.
            The default is <c>DataExportFormat.Text</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.DelimiterOption">
            <summary>
            Gets or sets the character that will be used to separate each field in the data file. ie. comma, tab or semicolon.
            The default is <c>DelimiterOptions.Comma</c>
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.Encoding">
            <summary>
            Gets or sets the encoding.
            The default is <c>Encoding.UTF8</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.LineTerminator">
            <summary>
            Gets or sets the line terminator.
            The default is <c>LineTerminator.Platform</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.Delimiter">
            <summary>
            Deprecated alias for <c>DelimiterOption</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToDataJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToDataJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToDataJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToDataJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToDataJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToDataJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToExcelJobEnvelope">
            <summary>
            Represents types of Pdf To Excel Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.SingleTable">
            <summary>
            Gets or sets whether to join all output information into a single sheet.
            The default is <c>ExcelTablesOnSheet.PlaceEachTableOnOwnSheet</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.AutoDetectSeparators">
            <summary>
            Gets or sets whether to automatically detect decimal and thousands separators.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.DecimalSeparator">
            <summary>
            Gets or sets the decimal separator.
            The default is <c>DecimalSeparator.Period</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.ThousandsSeparator">
            <summary>
            Gets or sets the thousands separator.
            The default is <c>ThousandsSeparator.Comma</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.DetectTiledPages">
            <summary>
            Gets or sets whether to detect tables that are tiled across multiple pages.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.KeepNonTableContent">
            <summary>
            Gets or sets whether to include non-table content such as images or text in the reconstructed Excel document.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.PreserveColumnsInNonTableContent">
            <summary>
            Gets or sets whether columns of non-table content in the PDF should be preserved as separate columns in the reconstructed Excel file.
            The default is <c>true</c>.
            This property will be ignored if KeepNonTableContent is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.TextAnnotationsAsContent">
            <summary>
            Gets or sets whether text annotations should be included as non-table content.
            The default is <c>true</c>.
            This property will be ignored if KeepNonTableContent is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.HeaderAndFooterMode">
            <summary>
            Gets or sets the header and footer mode.
            The default is <c>HeaderAndFooterMode.Remove</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.FootnotesMode">
            <summary>
            Gets or sets the footnote mode.
            The default is <c>FootnotesMode.Remove</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.TablesFromContent">
            <summary>
            Alias for <c>KeepNonTableContent</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToExcelJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToExcelJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToExcelJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToExcelJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToExcelJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToExcelJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToHtmlJobEnvelope">
            <summary>
            Represents types of Pdf To Html Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.Images">
            <summary>
            Gets or sets how images should be included in the HTML (embedded, linked or ignored).
            The default is <c>HtmlImages.Default</c> (linked).
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.ImageType">
            <summary>
            Gets or sets the image format to include in the HTML.
            The default is <c>ImageDocumentType.Default</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.WidthLimit">
            <summary>
            Gets or sets the maximum width for HTML images.
            The default is <c>0</c> (no limit).
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.DetectLists">
            <summary>
            Gets or sets a whether lists should be detected.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.DetectTiledPages">
            <summary>
            Gets or sets whether to recombine pages that had been tiled across multiple pages.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.HtmlNavigation">
            <summary>
            Gets or sets whether the HTML should include navigation controls.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.HtmlSplittingUsing">
            <summary>
            Gets or sets whether the HTML should be split by pages, bookmarks or headings.
            The default is <c>HtmlSplittingUsing.Pages</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.HeaderAndFooterMode">
            <summary>
            Gets or sets the header and footer mode.
            The default is <c>HeaderAndFooterMode.Remove</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.ExactMode">
            <summary>
            Gets or sets whether the reconstruction should attempt to represent the original pdf.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.OutputFileName">
            <summary>
            Gets or sets the name of the file that will be created.
            The default value will be based on the name of the SourcePath.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToHtmlJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToHtmlJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToHtmlJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToHtmlJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToHtmlJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToHtmlJobEnvelope.GetProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress as a value between 0 and 100
            </summary>
            <param name="e">The current progress</param>
            <returns>A value between 0 and 100 representing the overall progress</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToHtmlJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToImagesJobEnvelope">
            <summary>
            Represents types of Pdf To Images Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToImagesJobEnvelope.OutputType">
            <summary>
            Gets or sets the image format to output as.
            The default is <c>ImageDocumentType.Default</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToImagesJobEnvelope.PageDPI">
            <summary>
            Gets or sets the DPI to render pages at when extracting pages.
            The default is <c>96</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToImagesJobEnvelope.ConversionType">
            <summary>
            Gets or sets the type of conversion to perform.
            The default is <c>ImageConversionType.ExtractImages</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToImagesJobEnvelope.DrawingCore">
            <summary>
            Gets or sets the drawing core to use when rendering PDF pages.
            The default is <c>DrawingCore.GdiPlus</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToImagesJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToImagesJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToImagesJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToImagesJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToImagesJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToImagesJobEnvelope.GetProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress as a value between 0 and 100
            </summary>
            <param name="e">The current progress</param>
            <returns>A value between 0 and 100 representing the overall progress</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToImagesJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToPowerPointJobEnvelope">
            <summary>
            Represents types of Pdf To PowerPoint Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToPowerPointJobEnvelope.DetectLists">
            <summary>
            Gets or sets whether lists should be detected.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToPowerPointJobEnvelope.TextAnnotationsAsSpeakerNotes">
            <summary>
            Gets or sets whether text annotations should be converted into speaker notes.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToPowerPointJobEnvelope.EmbedFonts">
            <summary>
            Gets or sets wither to embed fonts into the pptx file.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToPowerPointJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToPowerPointJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToPowerPointJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToPowerPointJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToPowerPointJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToPowerPointJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToTextJobEnvelope">
            <summary>
            Represents types of Pdf To Text Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.LineLength">
            <summary>
            Gets or sets the maximum number of characters to display in each line of your text document.
            You can specify an infinite line length by setting this to 0 or -1.
            The default is <c>100</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.Encoding">
            <summary>
            Gets or sets the encoding.
            The default is <c>Encoding.UTF8</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.LineTerminator">
            <summary>
            Gets or sets the line terminator.
            The default is <c>LineTerminator.Platform</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.DetectAndRemoveHeadersAndFooters">
            <summary>
            Gets or sets whether to detect and remove headers and footers.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.DetectAndRemoveFootnotes">
            <summary>
            Gets or sets whether to detect and remove footnotes.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.TextAnnotationsAsContent">
            <summary>
            Gets or sets whether text annotations should be converted into content.
            The default is <c>false</c>.
            </summary>  
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.KeepLineBreaks">
            <summary>
            Gets or sets whether line breaks should be preserved in the content.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.DetectSoftHyphens">
            <summary>
            Gets or sets a value indicating whether soft-hyphens should be detected.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToTextJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToTextJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToTextJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToTextJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToTextJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToTextJobEnvelope.GetProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress as a value between 0 and 100
            </summary>
            <param name="e">The current progress</param>
            <returns>A value between 0 and 100 representing the overall progress</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToTextJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.PdfToWordJobEnvelope">
            <summary>
            Represents types of Pdf To Word Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.HeaderAndFooterMode">
            <summary>
            Gets or sets whether headers and footers should be detected, removed or ignored (kept as content).
            The default is <c>HeaderAndFooterMode.Detect</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.FootnotesMode">
            <summary>
            Gets or sets the footnote mode.
            The default is <c>FootnotesMode.Remove</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.DetectLists">
            <summary>
            Gets or sets whether lists should be detected.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.DetectTables">
            <summary>
            Gets or sets whether tables should be detected.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.DetectTaggedTables">
            <summary>
            Gets or sets whether elements tagged as a table in the PDF should be kept as tables.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.DetectTiledPages">
            <summary>
            Gets or sets whether to recombine pages that had been tiled across multiple pages.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.MarkupAnnotConversionType">
            <summary>
            Gets or sets how markup annotations should be converted.
            The default is <c>MarkupAnnotConversionType.Textbox</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.ReconstructionMode">
            <summary>
            Gets or sets the reconstruction mode.
            The default is <c>ReconstructionMode.Flowing</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.OutputType">
            <summary>
            Gets or sets the type of Word document to convert to.
            The default is <c>WordDocumentType.DocX</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.AverageCharacterSpacing">
            <summary>
            Gets or sets whether the spacing between characters should be simplified to reduce the size and complexity of the Word document.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.ImageAnchoringMode">
            <summary>
            Gets or sets how images should be anchored.
            The default is <c>ImageAnchoringMode.Automatic</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.PdfToWordJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.PdfToWordJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.PdfToWordJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.PdfToWordJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.PdfToWordJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.PdfToWordJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.JobStatus">
            <summary>
            Represents types of Job Status.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.Created">
            <summary>
            Type of Job Status is Created.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.Started">
            <summary>
            Type of Job Status is Started.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.Success">
            <summary>
            Type of Job Status is Success.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.Failure">
            <summary>
            Type of Job Status is Failed.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.Cancelled">
            <summary>
            Type of Job Status is Cancelled.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.TimedOut">
            <summary>
            Type of Job Status is Time Out.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.InvalidPassword">
            <summary>
            Type of Job Status is Invalid Password.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.BadData">
            <summary>
            Type of Job Status is BadData.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.InternalError">
            <summary>
            Type of Job Status is Internal Error.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.NoTables">
            <summary>
            Type of Job Status is No Tables.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.NoImages">
            <summary>
            Type of Job Status is No Image.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.NoTagged">
            <summary>
            Type of Job Status is No Tagged.
            </summary>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.JobStatus.NotPdfA">
            <summary>
            Type of Job Status is could not make PdfA
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.PdfToJobEnvelope">
            <summary>
            Base class for JobEnvelopes that convert PDFs to other formats.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToJobEnvelope.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToJobEnvelope.GraphicsAsImages">
            <summary>
            Gets or sets whether vector images should be converted to bitmap images.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToJobEnvelope.KeepBackgroundColorText">
            <summary>
            Gets or sets whether to recover text that is invisible because it is exactly the same colour as the background.
            The default is <c>false</c>.
            </summary>
            <remarks>
            Note that if recovered it will not be obvious in the reconstructed document if the formatting is maintained, since it will still be the same colour as the background.
            </remarks>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToJobEnvelope.KeepInvisibleText">
            <summary>
            Gets or sets whether to recover text that is invisible because it has no stroke or fill.
            This is typically used in PDFs to provide a searchable layer in scanned pages.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToJobEnvelope.PageRange">
            <summary>
            Gets or sets the page range that should be converted.
            The default is <c>null</c> (all pages).
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToJobEnvelope.ImageWatermarkPath">
            <summary>
            Gets or sets the path to the watermark image file.
            The default is <c>null</c> (no watermark).
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.Plumbing.PdfToJobEnvelope" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToJobEnvelope.#ctor(SolidFramework.Plumbing.LicensePermissions)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.Plumbing.PdfToJobEnvelope" /> class with the specified license permissions.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope">
            <summary>
            Base class for JobEnvelopes that convert PDFs to MS Office formats.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.SelectedAreas">
            <summary>
            Gets or sets the collection of selected areas that should be included when converting just part of a document.
            The default is <c>null</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.AutoRotate">
            <summary>
            Gets or sets whether to automatically rotate pages based on the orientation of the text on the pages.
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.TextRecoveryLanguage">
            <summary>
            Gets or sets the text recovery language.
            The default is <c>null</c> (automatic language detection).
            </summary>
            <remarks>
            Format for each language is as follows:
            "au" for Automatic
            "en" for English
            "de" for German
            "es" for Spanish
            "fr" for French
            "it" for Italian
            "nl" for Dutch
            "pl" for Polish
            "pt" for Portugeuse
            "ru" for Russian
            </remarks>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.UserProperties">
            <summary>
            Gets or sets the user properties.
            The default is <c>null</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.TextRecoveryType">
            <summary>
            Gets or sets the text recovery type.
            The default is <c>TextRecovery.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.TextRecoveryNseType">
            <summary>
            Gets or sets the text recovery NSE type.
            The default is <c>TextRecoveryNSE.Automatic</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.OcrLanguage">
            <summary>
            Deprecated alias for <c>TextRecoveryLanguage</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.OcrMode">
            <summary>
            Deprecated alias for <c>TextRecoveryType</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.NseMode">
            <summary>
            Deprecated alias for <c>TextRecoveryNseType</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.#ctor(SolidFramework.Plumbing.LicensePermissions)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.PdfToOfficeJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerStatistics.CurrentPath">
            <summary>
            Gets or sets the source path of the file that is being processed.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerStatistics.JobsProcessed">
            <summary>
            Gets or sets the number of jobs that have been processed by the current WorkerProcess.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerStatistics.CurrentStartTime">
            <summary>
            Gets or sets the time when processing of the current job began, or when the statistics were last reset.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerStatistics.Active">
            <summary>
            Gets whether or not the current WorkerProcess is actually processing a job.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.WorkerProcess">
            <summary>
            Represents types of Worker Process.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.CustomData">
            <summary>
            Gets or sets custom data to associate with the worker process
            This is not used internally and is intended to provide per-worker storage for custom implementations of JobHandler
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.JobEnvelope">
            <summary>
            Gets or sets the job envelope.
            </summary>
            <value>
            The job envelope.
            </value>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.JobProcessor">
            <summary>
            Gets or sets the job processor.
            </summary>
            <value>
            The job processor.
            </value>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.WorkerThread">
            <summary>
            Gets or sets the worker thread.
            </summary>
            <value>
            The worker thread.
            </value>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.WorkerNumber">
            <summary>
            Gets or sets an ID for the WorkerProcess, based on the number of instances that had been 
            created up to the point when this instance was created during job submission.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.JobsProcessed">
            <summary>
            Gets or sets the number of Jobs that this instance has processed. When this exceeds the value of 
            WorkerJobsBeforeRecycle, this instance will terminate.
            The value should not be set from user code.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.Free">
            <summary>
            Frees this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.KillProcess">
            <summary>
            Kills this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.GetInJob">
            <summary>
            Gets the in job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.HasRunningProcess">
            <summary>
            Determines whether has running process.
            </summary>
            <returns>
              <c>true</c> if has running process; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.NotKilled">
            <summary>
            Returns true until WorkerProcess.Kill has been called
            </summary>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcess.Statistics">
            <summary>
            Gets the WorkStatistics for the current WorkerProcess
            </summary>
        </member>
        <member name="E:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.ConsoleOutputReceived">
            <summary>
            An event that will receive non-message console output
            The output will be sent one line at a time
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.GetQueuedMessage">
            <summary>
            Gets a message if one is already in the queue, otherwise returns null
            </summary>
            <returns>The next message in the queue or null if the queue is empty</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.GetMessage(System.Int32)">
            <summary>
            Gets a message if one is already in the queue or waits the specified amount of time for one to arrive
            </summary>
            <param name="milliseconds">The number of milliseconds to wait for a message to arrive</param>
            <returns>The next message, or null if the queue was empty and no messages arrived in the specified amount of time</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.AddData(System.String)">
            <summary>
            Adds data to the buffer and checks if the buffer contains any complete messages
            </summary>
            <param name="data">The data to process</param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.AddChar(System.Char)">
            <summary>
            Adds a single character to the buffer and checks if it has a complete message
            </summary>
            <param name="c">The character to add</param>
        </member>
        <member name="F:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.ConsoleNewLines">
            <summary>
            These are the strings AddConsoleOutput will split on
            \r is excluded to avoid interpreting \r\n as 2 newlines when receiving one char at a time
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.AddConsoleOutput(System.String)">
            <summary>
            Buffers non-message console output and sends it to ConsoleOutputReceived one line at a time
            </summary>
            <param name="data">The non-message output to add</param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.FindStartOfMessage(System.Boolean)">
            <summary>
            Looks for MessagePrefix in the messageBuffer and sends everything before it to the AddConsoleOutput function
            </summary>
            <param name="addingChar">Allows the method to avoid rechecking text when only a single character was added</param>
            <returns>true if the MessagePrefix was found in the message; otherwise false</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.GetNextMessage(System.Int32)">
            <summary>
            Finds where the current message ends and returns it
            If the message hasn't ended yet this will return null
            </summary>
            <param name="startIndex">Allows the method to avoid rechecking text when only a single character was added</param>
            <returns>A complete message if one was found; otherwise null</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcess.MessageQueue.EncodeMessage(System.String)">
            <summary>
            Helper function to add the prefix and terminator to a message
            </summary>
            <param name="message">The message to encode</param>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.WorkerProcesses">
            <summary>
            Represents types of Worker Proccesses.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.WorkerProcesses.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcesses.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SolidFramework.Services.Plumbing.WorkerProcesses" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.WorkerProcesses.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.JobEnvelope">
            <summary>
            Represents types of Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.CustomData">
            <summary>
            Gets or sets the custom data.
            The default is <c>null</c>.
            Note: setting this to a non-string value will prevent duplicate job detection
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.SourcePath">
            <summary>
            Gets or sets the path to the source file.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.OutputPaths">
            <summary>
            Gets the list of output paths.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.Status">
            <summary>
            Gets the status of the conversion. This can indicate success, whether there was a problem, etc.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.ID">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.DoProgress">
            <summary>
            Gets or sets whether events should be raised to indicate how far the conversion has progressed.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.NoCopies">
            <summary>
            Gets or sets whether the conversion should be performed on the original source file rather than a temporary copy.
            The default is <c>false</c> (perform the conversion on a temporary copy).
            Setting this to true can risk data loss if:
             - don't have correct permissions to access source file
             - the source file disappears during conversion (i.e. the file is deleted or its drive is unmounted)
             - etc.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.Duplicate">
            <summary>
            Gets or sets whether the JobEnvelope is a duplicate.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.ProcessDuration">
            <summary>
            Gets the time it took to process the job.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.Plumbing.JobEnvelope" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.#ctor(SolidFramework.Plumbing.LicensePermissions)">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.Plumbing.JobEnvelope" /> class with the specified license permissions.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.Plumbing.JobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.GetResults">
            <summary>
            Gets the result data so it can be sent back to the JobProcessor.
            Note: Make sure to include the base method's results when overriding in a subclass
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.ProcessResult(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes results sent from a JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <param name="result">The data sent by the JobHandler.</param>
            <returns>true if the result was handled, otherwise false</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.GetHashString">
            <summary>
            Creates a hash of the JobEnvelope's options and it's source file to be used in duplicate envelope detection
            Will return null if the JobEnvelope contains unique data that excludes it from duplicate envelope detection
            </summary>
            <returns>A hash of the JobEnvelope's options and source file, or null if the JobEnvelope contains unique data</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Get3StageProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress for a standard conversion that has 3 stages
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Get4StageProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress for a standard conversion that has 4 stages
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.GetProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress as a value between 0 and 100
            </summary>
            <param name="e">The current progress</param>
            <returns>A value between 0 and 100 representing the overall progress</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.UpdateProgress(System.Double)">
            <summary>
            Sends a progress update to the JobProcessor
            </summary>
            <param name="overallPercent"></param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.GetJobDescription">
            <summary>
            Gets a string representation of this JobEnvelope.
            </summary>
            <returns>A string representation of this JobEnvelope.</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Parse(System.String,SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel,System.Action{System.Collections.Generic.IEnumerable{SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData},SolidFramework.Services.Plumbing.JobEnvelope})">
            <summary>
            Parses a JobEnvelope from the specified job description or throws an exception if it can't be parsed.
            </summary>
            <param name="description">The job description to parse (as created by JobEnvelope.GetJobDescription).</param>
            <param name="outputChannel">The output channel the JobEnvelope should write to.</param>
            <param name="additionalOptionProcessor">A function to handle options added by JobProcessor.GetAdditionalJobOptions</param>
            <returns>The JobEnvelope that was parsed from the description.</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.TryParse(System.String,SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel,System.Action{System.Collections.Generic.IEnumerable{SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData},SolidFramework.Services.Plumbing.JobEnvelope},SolidFramework.Services.Plumbing.JobEnvelope@)">
            <summary>
            Creates a JobEnvelope from a job description (created by GetJobDescription).
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="description">The description of the JobEnvelope.</param>
            <param name="outputChannel">The output channel the JobEnvelope should write to.</param>
            <param name="additionalOptionProcessor">A function to handle options added by JobProcessor.GetAdditionalJobOptions</param>
            <param name="jobEnvelope">The JobEnvelope to store the result in.</param>
            <returns><c>true</c> if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.TryParse(System.String,SolidFramework.Services.Plumbing.WorkerProcess.IMessageChannel,SolidFramework.Services.Plumbing.JobEnvelope@)">
            <summary>
            Creates a JobEnvelope from a job description (created by GetJobDescription).
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="description">The description of the JobEnvelope.</param>
            <param name="outputChannel">The output channel the JobEnvelope should write to.</param>
            <param name="jobEnvelope">The JobEnvelope to store the result in.</param>
            <returns><c>true</c> if the conversion succeeded, otherwise false.</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.GetAllJobOptions">
            <summary>
            Like GetJobOptions but includes the options that should be excluded from the the hash string
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.EmitResults">
            <summary>
            Sends the result data to the JobProcessor.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.ProcessResult(System.String,System.String,SolidFramework.Services.JobProcessor)">
            <summary>
            Processes results sent from a JobHandler
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SolidFramework.Services.Plumbing.JobEnvelope" /> class.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.RegisterCustomJobEnvelopeType(System.Type)">
            <summary>
            Registers a custom JobEnvelope type
            As the regular JobHandler won't understand the custom JobEnvelope type you'll also need to create a JobProcessor
            that uses a custom JobHandler.
            The JobHandler should be a console application that registers the same custom JobEnvelope types before calling
                new JobHandler().Run();
            </summary>
            <param name="customJobEnvelopeType">The custom JobEnvelope type to register</param>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.UnregisterCustomJobEnvelopeType(System.Type)">
            <summary>
            Unregisters a custom JobEnvelope type
            </summary>
            <param name="customJobEnvelopeType">The custom JobEnvelope type to unregister</param>
            <returns>true if the custom JobEnvelope type was registered, otherwise false</returns>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData">
            <summary>
            A key value pair
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.JobEnvelope.Disposer">
            <summary>
            An object that performs some action when it is disposed
            </summary>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.MakeWorkingCopy(System.String)">
            <summary>
            Returns a FileWrapper that will point to the original file if NoCopies is true or at a temporary copy of that file if its false.
            If it returns a temporary copy it will be deleted when the FileWrapper is disposed.
            </summary>
            <param name="path">The path of the original file</param>
            <returns>A FileWrapper pointing to the original file or to a temporary copy</returns>
        </member>
        <member name="M:SolidFramework.Services.Plumbing.JobEnvelope.MakeWorkingCopy(SolidFramework.Services.Plumbing.JobEnvelope.FileWrapper)">
            <summary>
            If wrapper is already temporary it will return a non-temporary FileWrapper pointing at the temporary file
            (this is to prevent the original temporary file getting deleted when this copy gets disposed).
            If the wrapper is not temporary it will return MakeWorkingCopy(wrapper.Path)
            </summary>
        </member>
        <member name="T:SolidFramework.Services.Plumbing.JobEnvelope.FileWrapper">
            <summary>
            An object that points to either a temporary file or a permanent file.
            If it points to a temporary file it will delete that file when it is disposed.
            This class doesn't have a finalizer (for performance reasons), so any FileWrappers that may be temporary
            should be used within a using block or should be explicitly disposed.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.ToFullOcrPdfJobEnvelope">
            <summary>
            Represents types of To Full Ocr Pdf Job Envelope.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToFullOcrPdfJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="T:SolidFramework.Services.ToPdfAJobEnvelope">
            <summary>
            A job that attempts to convert a single PDF file or TIFF image into PDF/A. Also produces an xml report.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToPdfAJobEnvelope.ValidationMode">
            <summary>
            Gets or sets the PDF/A validation mode.
            The default is <c>ValidationMode.PdfA2B</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToPdfAJobEnvelope.TextWatermark">
            <summary>
            Gets or sets the text watermark to be used in the converted file.
            The default is <c>null</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToPdfAJobEnvelope.PdfAStatus">
            <summary>
            Gets the PDF/A conversion status for the converted file.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.ToPdfAJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToPdfAJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.GetResults">
            <summary>
            Gets the result data so it can be sent back to the JobProcessor.
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.ProcessResult(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes results sent from a JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <param name="result">The data sent by the JobHandler.</param>
            <returns>true if the result was handled, otherwise false</returns>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.GetProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress as a value between 0 and 100
            </summary>
            <param name="e">The current progress</param>
            <returns>A value between 0 and 100 representing the overall progress</returns>
        </member>
        <member name="M:SolidFramework.Services.ToPdfAJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SolidFramework.Services.ToPdfJobEnvelope">
            <summary>
            A job that converts a single PDF file or TIFF image into something  else.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToPdfJobEnvelope.CreateTagged">
            <summary>
            Gets or sets whether to tag content in the PDF.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToPdfJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.ToPdfJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToPdfJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.ToPdfJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.ToPdfJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.ToPdfJobEnvelope.CreateAndProcessPdf(SolidFramework.Services.Plumbing.JobEnvelope.FileWrapper)">
            <summary>
            Returns a pdf that has been preprocessed and tagged
            If the source file is a PDF and tagging is off this can return sourceWrapper
            If an error occurs this will set the appropriate status and message and will return null
            </summary>
            <param name="sourceWrapper">The source file (which may or may not be a PDF)</param>
            <returns>A FileWrapper pointing to a processed PDF</returns>
        </member>
        <member name="M:SolidFramework.Services.ToPdfJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToPdfJobEnvelope.PreProcessPdf(SolidFramework.Services.Plumbing.JobEnvelope.FileWrapper)">
            <summary>
            Allows subclasses to modify the PDF (this gets called before tagging is applied)
            The pdfWrapper may point to the original source PDF, so subclasses should not overwrite it and should call MakeWorkingCopy
            </summary>
            <param name="pdfWrapper">The pdf file to pre-process</param>
            <returns>A FileWrapper pointing to the pre-processed pdf file or null if an error occured</returns>
        </member>
        <member name="T:SolidFramework.Services.ToSearchablePdfAJobEnvelope">
            <summary>
            A job that attempts to convert a single PDF file or TIFF image into a PDF/A file while also adding searchable text for scanned pages. Also produces an xml report.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfAJobEnvelope.OcrImageCompression">
            <summary>
            Gets or sets the compression method to be used for images. This will affect file size and image quality.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfAJobEnvelope.OcrLanguage">
            <summary>
            Gets or sets the text recovery language.
            The default is <c>null</c> (automatic language detection).
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToSearchablePdfAJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.ToSearchablePdfAJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfAJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.ToSearchablePdfAJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.ToSearchablePdfAJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="T:SolidFramework.Services.ToSearchablePdfJobEnvelope">
            <summary>
            A job that attempts to convert a single PDF file or TIFF image into a PDF file while also adding searchable text for scanned pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfJobEnvelope.OcrImageCompression">
            <summary>
            Gets or sets the compression method to be used for images. This will affect file size and image quality.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfJobEnvelope.OcrLanguage">
            <summary>
            Gets or sets the text recovery language.
            The default is <c>null</c> (automatic language detection).
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfJobEnvelope.OcrType">
            <summary>
            Specifies the type of OCR to apply to the PDF
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToSearchablePdfJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.ToSearchablePdfJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToSearchablePdfJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.ToSearchablePdfJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.ToSearchablePdfJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="T:SolidFramework.Services.ToTextJobEnvelope">
            <summary>
            A job that attempts to convert a single PDF file or TIFF image into a text file while adding searchable text for scanned pages.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToTextJobEnvelope.OcrLanguage">
            <summary>
            Gets or sets the text recovery language.
            The default is <c>null</c> (automatic language detection).
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToTextJobEnvelope.OcrMode">
            <summary>
            Gets or sets the Text Recovery type.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ToTextJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.ToTextJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ToTextJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.ToTextJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.ToTextJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.ToTextJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.Services.ValidatePdfAJobEnvelope">
            <summary>
            A job that validates a single PDF file and produces an xml report.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ValidatePdfAJobEnvelope.ValidationMode">
            <summary>
            Gets or sets the PDF/A validation mode to validate against.
            The default is <c>ValidationMode.PdfA2B</c>.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ValidatePdfAJobEnvelope.VerifyOnly">
            <summary>
            Gets or sets whether to just verify that the file is what it claims to be.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ValidatePdfAJobEnvelope.PdfType">
            <summary>
            Gets the PDF/A type of the PDF.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ValidatePdfAJobEnvelope.PdfAStatus">
            <summary>
            Gets the PDF/A validation status for the converted file.
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SolidFramework.Services.ValidatePdfAJobEnvelope" /> class.
            </summary>
        </member>
        <member name="P:SolidFramework.Services.ValidatePdfAJobEnvelope.Name">
            <summary>
            Gets the name for this type of JobEnvelope.
            </summary>
            <value>
            The name for this type of JobEnvelope.
            </value>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.GetJobOptions">
            <summary>
            Gets the job options so they can be sent to the JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <returns>The job options to send to the JobHandler</returns>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.ProcessJobOption(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes a job option sent from the JobProcessor
            Note: Make sure to call the base class's method when overriding in a subclass
            </summary>
            <param name="option">The job option sent from the JobProcessor</param>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.GetResults">
            <summary>
            Gets the result data so it can be sent back to the JobProcessor.
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.ProcessResult(SolidFramework.Services.Plumbing.JobEnvelope.JobEnvelopeData)">
            <summary>
            Processes results sent from a JobHandler
            Note: Make sure to call the base method when overriding in a subclass
            </summary>
            <param name="result">The data sent by the JobHandler.</param>
            <returns>true if the result was handled, otherwise false</returns>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.GetProgressPercent(SolidFramework.ProgressEventArgs)">
            <summary>
            Calculates the overall progress as a value between 0 and 100
            </summary>
            <param name="e">The current progress</param>
            <returns>A value between 0 and 100 representing the overall progress</returns>
        </member>
        <member name="M:SolidFramework.Services.ValidatePdfAJobEnvelope.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="T:SolidFramework.SolidEnvironment">
            <summary>
            Represents Solid environment functionality
            </summary>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.SetTempFileIsAboutToBeCreated(System.Func{System.String,System.Boolean})">
            <summary>
            Creates a callback to allow monitoring of temporary file creation.
            This is intended to support anti-virus software that monitors file creation.
            </summary>
            <param name="callback"></param>
            <remarks>
            When handling the callback, return <c>true</c> to allow the file to be created, or <c>false</c> to prevent creation.
            Note that preventing temp file creation will probably prevent Solid Framework from being able to proceed.
            </remarks>
            <returns></returns>
            <example>
            Example: 
            
            SolidEnvironment.SetTempFileIsAboutToBeCreated(path =&gt; { Console.WriteLine(path); return true; });
            </example>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.GetUniqueMachineID(System.Byte[]@)">
            <summary>
            Gets the unique machine ID as a byte array.
            Consider using License.GetUniqueMachineID instead.
            </summary>
            <param name="id">The byte array to store the id in.</param>
            <returns>
            NativeError.Success or NativeError.Fail if the machine id contained multi-byte characters
            </returns>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Build">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Version">
            <summary>
            Gets the version number.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Nucleus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SolidFramework.SolidEnvironment"/> is nucleus.
            </summary>
            <value>
              <c>true</c> if nucleus; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.IdentityBitmap">
            <summary>
            Gets or sets the identity bitmap.
            </summary>
            <value>
            The identity bitmap.
            </value>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.MachineID">
            <summary>
            Gets the machine ID.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.IsWindows">
            <summary>
            Gets a value indicating whether the environment is windows.
            </summary>
            <value>
              <c>true</c> if this instance is windows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.IsUnix">
            <summary>
            Gets a value indicating whether the environment is unix.
            </summary>
            <value>
              <c>true</c> if this instance is unix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.IsLinux">
            <summary>
            Gets a value indicating whether the environment is Linux.
            </summary>
            <value>
              <c>true</c> if this instance is OSX; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.IsOSX">
            <summary>
            Gets a value indicating whether the environment is OSX.
            </summary>
            <value>
              <c>true</c> if this instance is OSX; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.PlatformPath(System.String)">
            <summary>
            Construct platform defined path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Word10toWord12Version">
            <summary>
            Gets the word10 to word12 version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Word11toWord12Version">
            <summary>
            Gets the word11 to word12 version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.WordVersion">
            <summary>
            Gets the Word version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.ExcelVersion">
            <summary>
            Gets the Excel version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.PowerPointVersion">
            <summary>
            Gets the PowerPoint version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.PublisherVersion">
            <summary>
            Gets the publisher version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.CreatorVersion">
            <summary>
            Gets the Solid PDF Creator version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.ToolsVersion">
            <summary>
            Gets the Solid PDF Tools version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.OfficePDFCreationFor2007">
            <summary>
            Gets the office PDF creation for2007.
            </summary>
            <value>
            The office PDF creation for2007.
            </value>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.SupportedFileTypes">
            <summary>
            Gets the supported file types.
            </summary>
            <value>
            The supported file types.
            </value>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.GetSupportedFileFilters(System.Boolean)">
            <summary>
            Gets the supported file filters.
            </summary>
            <param name="includeAll">if set to <c>true</c> [include all].</param>
            <returns></returns>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.GetSupportedFileFilters(System.Boolean,System.String)">
            <summary>
            Gets the supported file filters.
            </summary>
            <param name="includeAll">if set to <c>true</c> [include all].</param>
            <param name="excludeList">The exclude list.</param>
            <returns></returns>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Acrobat">
            <summary>
            Gets the Adobe Acrobat version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.AcrobatPlugin">
            <summary>
            Gets the Acrobat Plug-in version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.AcrobatSolid">
            <summary>
            Gets the Solid Acrobat Plug-in version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.AcrobatPath">
            <summary>
            Gets the Adobe Acrobat path.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Excel">
            <summary>
            Gets the Excel version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.PowerPoint">
            <summary>
            Gets the PowerPoint version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Word">
            <summary>
            Gets the word version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Publisher">
            <summary>
            Gets the Publisher version.
            </summary>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.GetOfficeProductPath(System.String)">
            <summary>
            Gets the path for the specified Office product or null if it isn't installed.
            </summary>
        </member>
        <member name="M:SolidFramework.SolidEnvironment.GetOfficeProductVersion(System.String,System.Diagnostics.FileVersionInfo@)">
            <summary>
            Gets the Office version for the specified Office product or an empty string if it isn't installed.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Creator">
            <summary>
            Gets Solid Pdf Creator version.
            </summary>
        </member>
        <member name="P:SolidFramework.SolidEnvironment.Tools">
            <summary>
            Gets Solid PDF Tools version.
            </summary>
        </member>
    </members>
</doc>
